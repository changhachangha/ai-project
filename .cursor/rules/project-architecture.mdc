---
description:
globs:
alwaysApply: false
---
# Project Architecture & Development Guidelines

## 🏗️ Project Overview
This is a **Next.js 15 App Router** based developer tools hub featuring encoding/decoding utilities, text processing tools, and security features. The project uses modern React patterns with TypeScript, Tailwind CSS, and shadcn/ui components.

## 📁 Core Architecture

### Directory Structure
```
app/
├── (main)/              # Route groups for main pages
│   ├── encoding/        # Encoding tools (base64, hex, url, etc.)
│   ├── text/           # Text processing utilities
│   ├── security/       # Security/encryption tools
│   └── integrations/   # Integration management
├── api/                # API routes
├── data/               # Static data definitions
├── types/              # Type definitions
├── layout.tsx          # Root layout with command palette
├── page.tsx           # Home page entry
└── globals.css        # Global styles with CSS variables
```

### Key Files Reference
- Main entry: [app/page.tsx](mdc:app/page.tsx)
- Root layout: [app/layout.tsx](mdc:app/layout.tsx)
- Home client: [app/HomePageClient.tsx](mdc:app/HomePageClient.tsx)
- Global styles: [app/globals.css](mdc:app/globals.css)
- Config: [next.config.ts](mdc:next.config.ts)
- Package info: [package.json](mdc:package.json)

## 🎯 CRITICAL RULES - MUST FOLLOW

### ✅ ALWAYS DO
1. **Use TypeScript strictly** - All components must have proper type definitions
2. **Follow App Router patterns** - Use server/client components appropriately
3. **Use `"use client"` directive** for any component using browser APIs or state
4. **Import from `@/` paths** - Use absolute imports configured in tsconfig
5. **Use shadcn/ui components** - Leverage existing UI components from [components/ui/](mdc:components/ui/)
6. **Apply Tailwind classes** - Use utility-first CSS with design system variables
7. **Handle SSR/CSR properly** - Use `next/dynamic` with `ssr: false` for client-only components
8. **Maintain responsive design** - Ensure mobile-first responsive layouts
9. **Follow naming conventions** - PascalCase for components, camelCase for utilities
10. **Use proper error boundaries** - Handle errors gracefully in React components

### ❌ NEVER DO
1. **DON'T use inline styles** - Always use Tailwind classes or CSS variables
2. **DON'T create components without TypeScript** - No JavaScript files in components
3. **DON'T use deprecated React patterns** - No class components, use functional components
4. **DON'T bypass the design system** - Use existing color variables and spacing
5. **DON'T create uncontrolled components** - Always manage state properly
6. **DON'T ignore accessibility** - Maintain ARIA attributes and keyboard navigation
7. **DON'T use external CSS frameworks** - Stick to Tailwind and shadcn/ui
8. **DON'T create duplicate utilities** - Check [lib/utils.ts](mdc:lib/utils.ts) first
9. **DON'T ignore mobile responsiveness** - Test on all screen sizes
10. **DON'T use browser APIs in server components** - Keep server/client boundaries clear

## 🧩 Component Patterns

### Component Structure Template
```typescript
'use client'; // Only if using browser APIs or state

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';

interface ComponentProps {
  // Always define props interface
  className?: string;
  children?: React.ReactNode;
}

export default function Component({ className, children }: ComponentProps) {
  // Component logic here
  return (
    <div className={cn("base-classes", className)}>
      {children}
    </div>
  );
}
```

### State Management
- **Local state**: Use `useState` for component-specific state
- **Global state**: Use Zustand stores in [lib/store/](mdc:lib/store/)
- **Context**: Use React Context for UI state (sidebar, theme)

## 🎨 Design System

### Color System
- Use CSS variables defined in [app/globals.css](mdc:app/globals.css)
- OKLCH color space for better color accuracy
- Support both light and dark modes
- Examples: `bg-background`, `text-foreground`, `border-border`

### Typography & Spacing
- Use Tailwind's spacing scale (4px increments)
- Inter font family for consistency
- Responsive text sizes: `text-sm md:text-base`

### Component Styling
- Use `cn()` utility from [lib/utils.ts](mdc:lib/utils.ts) for conditional classes
- Leverage shadcn/ui component variants
- Follow the design tokens in [tailwind.config.ts](mdc:tailwind.config.ts)

## 🔧 Tool Development Guidelines

### Adding New Tools
1. **Create tool data** in `app/data/` directory
2. **Add route** in appropriate category under `app/(main)/`
3. **Use consistent layout** with existing tools
4. **Implement proper error handling** for user inputs
5. **Add to integrations** in data files

### Tool Component Structure
```typescript
'use client';

import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';

export default function ToolPage() {
  const [input, setInput] = useState('');
  const [output, setOutput] = useState('');
  
  const handleProcess = () => {
    // Tool logic here
  };

  return (
    <div className="container mx-auto p-4">
      <Card>
        <CardHeader>
          <CardTitle>Tool Name</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <Textarea
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Enter input..."
          />
          <Button onClick={handleProcess}>Process</Button>
          <Textarea
            value={output}
            readOnly
            placeholder="Output will appear here..."
          />
        </CardContent>
      </Card>
    </div>
  );
}
```

## 🚀 Performance Guidelines

### Optimization Strategies
1. **Use dynamic imports** for heavy components
2. **Implement proper loading states** for async operations
3. **Optimize images** with Next.js Image component
4. **Minimize bundle size** by avoiding unnecessary dependencies
5. **Use React.memo** for expensive components

### Code Splitting
```typescript
// For client-only components
const ClientComponent = dynamic(() => import('./ClientComponent'), {
  ssr: false,
  loading: () => <div>Loading...</div>
});

// For heavy components
const HeavyComponent = dynamic(() => import('./HeavyComponent'), {
  loading: () => <Skeleton />
});
```

## 🔒 Security & Quality

### Input Validation
- **Always validate user inputs** before processing
- **Sanitize outputs** when displaying user-generated content
- **Handle edge cases** gracefully with proper error messages
- **Use TypeScript** for compile-time type checking

### Error Handling
```typescript
try {
  // Risky operation
  const result = processUserInput(input);
  setOutput(result);
} catch (error) {
  console.error('Processing error:', error);
  setError('Failed to process input. Please check your input format.');
}
```

## 📱 Responsive Design

### Breakpoint Strategy
- **Mobile-first approach** - Start with mobile styles
- **Use Tailwind breakpoints** - `sm:`, `md:`, `lg:`, `xl:`
- **Test on all devices** - Ensure functionality across screen sizes
- **Consider touch interactions** - Proper button sizes and spacing

### Layout Patterns
```typescript
// Responsive grid
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
  {/* Grid items */}
</div>

// Responsive text
<h1 className="text-xl md:text-2xl lg:text-3xl font-bold">
  Title
</h1>
```

## 🧪 Testing Considerations

### Manual Testing Checklist
- [ ] Component renders without errors
- [ ] All interactive elements work
- [ ] Responsive design functions properly
- [ ] Error states display correctly
- [ ] Loading states are implemented
- [ ] Accessibility features work (keyboard navigation, screen readers)

## 📋 Code Review Guidelines

### Before Submitting
1. **Run type checking** - `npm run build` should pass
2. **Check console errors** - No warnings or errors in browser console
3. **Test user flows** - Verify complete user interactions
4. **Verify responsive design** - Test on multiple screen sizes
5. **Check accessibility** - Ensure keyboard navigation works
6. **Review performance** - No unnecessary re-renders or memory leaks

Remember: **Quality over speed** - Take time to implement features correctly rather than rushing and introducing technical debt.
