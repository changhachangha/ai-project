---
description: 
globs: 
alwaysApply: false
---
# UI Components & Design System Rules - AI Developer Tools Hub

## üé® DESIGN SYSTEM MISSION
Build a cohesive, accessible, and performant design system using shadcn/ui components with Tailwind CSS. Every UI element must be consistent, responsive, and follow modern design principles.

## üéØ CORE DESIGN PRINCIPLES

### ‚úÖ MANDATORY DESIGN STANDARDS

1. **CONSISTENCY IS KING**
   - Use only shadcn/ui components from [components/ui/](mdc:components/ui)
   - Apply consistent spacing using Tailwind's 4px scale
   - Maintain uniform typography across all components
   - Follow established color system from [app/globals.css](mdc:app/globals.css)

2. **ACCESSIBILITY IS NON-NEGOTIABLE**
   - All interactive elements must be keyboard navigable
   - Color contrast must meet WCAG AA standards
   - ARIA labels required for complex components
   - Screen reader compatibility tested

3. **PERFORMANCE FIRST**
   - Use optimized span elements instead of Badge components in lists
   - Implement proper loading states for all async operations
   - Apply memoization to prevent unnecessary re-renders
   - Optimize for Core Web Vitals

### ‚ùå DESIGN SYSTEM VIOLATIONS (NEVER DO)

1. **NEVER use hardcoded colors** - Always use CSS variables
2. **NEVER create custom UI components** - Use shadcn/ui first
3. **NEVER ignore responsive design** - Mobile-first approach mandatory
4. **NEVER skip accessibility attributes** - ARIA labels required
5. **NEVER use inline styles** - Tailwind classes only
6. **NEVER use Badge components in performance-critical lists**

## üé® COLOR SYSTEM

### CSS Variables (MANDATORY)
```css
/* From [app/globals.css](mdc:app/globals.css) - ALWAYS use these */
:root {
  --background: 0 0% 100%;
  --foreground: 0 0% 3.9%;
  --card: 0 0% 100%;
  --card-foreground: 0 0% 3.9%;
  --popover: 0 0% 100%;
  --popover-foreground: 0 0% 3.9%;
  --primary: 0 0% 9%;
  --primary-foreground: 0 0% 98%;
  --secondary: 0 0% 96.1%;
  --secondary-foreground: 0 0% 9%;
  --muted: 0 0% 96.1%;
  --muted-foreground: 0 0% 45.1%;
  --accent: 0 0% 96.1%;
  --accent-foreground: 0 0% 9%;
  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 0 0% 98%;
  --border: 0 0% 89.8%;
  --input: 0 0% 89.8%;
  --ring: 0 0% 3.9%;
  --radius: 0.5rem;
}

.dark {
  --background: 0 0% 3.9%;
  --foreground: 0 0% 98%;
  --card: 0 0% 3.9%;
  --card-foreground: 0 0% 98%;
  --popover: 0 0% 3.9%;
  --popover-foreground: 0 0% 98%;
  --primary: 0 0% 98%;
  --primary-foreground: 0 0% 9%;
  --secondary: 0 0% 14.9%;
  --secondary-foreground: 0 0% 98%;
  --muted: 0 0% 14.9%;
  --muted-foreground: 0 0% 63.9%;
  --accent: 0 0% 14.9%;
  --accent-foreground: 0 0% 98%;
  --destructive: 0 62.8% 30.6%;
  --destructive-foreground: 0 0% 98%;
  --border: 0 0% 14.9%;
  --input: 0 0% 14.9%;
  --ring: 0 0% 83.1%;
}
```

### Color Usage Patterns
```typescript
// ‚úÖ CORRECT: Use semantic color classes
<div className="bg-card text-card-foreground border-border">
  <p className="text-muted-foreground">Secondary text</p>
  <Button variant="default" className="bg-primary text-primary-foreground">
    Primary Action
  </Button>
</div>

// ‚ùå WRONG: Hardcoded colors
<div className="bg-white text-black border-gray-200">
  <p className="text-gray-500">Secondary text</p>
</div>
```

## üß© COMPONENT PATTERNS

### 1. Tool Page Layout (MANDATORY TEMPLATE)
```typescript
'use client';

import { memo, useState, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Copy, Upload, Download } from 'lucide-react';
import { cn } from '@/lib/utils';

interface ToolPageProps {
  title: string;
  description: string;
  icon?: React.ReactNode;
  placeholder?: string;
  className?: string;
}

const ToolPage = memo<ToolPageProps>(({ 
  title, 
  description, 
  icon,
  placeholder = "Enter your input...",
  className 
}) => {
  const [input, setInput] = useState('');
  const [output, setOutput] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleProcess = useCallback(async () => {
    if (!input.trim()) {
      setError('Input cannot be empty');
      return;
    }

    setIsProcessing(true);
    setError(null);

    try {
      // Tool-specific processing
      const result = await processInput(input);
      setOutput(result);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Processing failed');
    } finally {
      setIsProcessing(false);
    }
  }, [input]);

  const handleCopy = useCallback(async () => {
    if (output) {
      await navigator.clipboard.writeText(output);
      // Show toast notification
    }
  }, [output]);

  return (
    <div className={cn("container mx-auto p-4 max-w-4xl", className)}>
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            {icon}
            {title}
          </CardTitle>
          <p className="text-muted-foreground">{description}</p>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Input Section */}
          <div className="space-y-2">
            <label className="text-sm font-medium">Input</label>
            <Textarea
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder={placeholder}
              className="min-h-32 resize-none"
              aria-describedby={error ? "input-error" : undefined}
            />
          </div>

          {/* Action Buttons */}
          <div className="flex gap-2">
            <Button 
              onClick={handleProcess} 
              disabled={isProcessing || !input.trim()}
              className="flex-1"
            >
              {isProcessing ? 'Processing...' : 'Process'}
            </Button>
            <Button variant="outline" size="icon" title="Upload file">
              <Upload className="h-4 w-4" />
            </Button>
          </div>

          {/* Error Display */}
          {error && (
            <div 
              id="input-error"
              className="p-3 text-sm text-destructive bg-destructive/10 rounded-md border border-destructive/20"
              role="alert"
            >
              {error}
            </div>
          )}

          {/* Output Section */}
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <label className="text-sm font-medium">Output</label>
              <Button 
                variant="outline" 
                size="sm" 
                onClick={handleCopy}
                disabled={!output}
                className="h-8"
              >
                <Copy className="h-4 w-4 mr-1" />
                Copy
              </Button>
            </div>
            <Textarea
              value={output}
              readOnly
              placeholder="Output will appear here..."
              className="min-h-32 bg-muted resize-none"
            />
          </div>
        </CardContent>
      </Card>
    </div>
  );
});

ToolPage.displayName = 'ToolPage';

export default ToolPage;
```

### 2. Optimized List Item (PERFORMANCE CRITICAL)
```typescript
import { memo, useMemo, useCallback } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { cn } from '@/lib/utils';

interface ListItemProps {
  item: Integration;
  onSelect: (id: string) => void;
  isSelected?: boolean;
  className?: string;
}

const OptimizedListItem = memo<ListItemProps>(({ 
  item, 
  onSelect, 
  isSelected = false,
  className 
}) => {
  const handleClick = useCallback(() => {
    onSelect(item.id);
  }, [item.id, onSelect]);

  // CRITICAL: Use optimized span elements, NOT Badge components
  const badges = useMemo(() => {
    return item.tags.map((tag) => (
      <span 
        key={tag}
        className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-secondary text-secondary-foreground"
      >
        {tag}
      </span>
    ));
  }, [item.tags]);

  return (
    <Card 
      onClick={handleClick}
      className={cn(
        "cursor-pointer transition-colors hover:bg-accent",
        isSelected && "ring-2 ring-primary ring-offset-2",
        className
      )}
    >
      <CardContent className="p-4">
        <h3 className="font-medium text-card-foreground">{item.name}</h3>
        <p className="text-sm text-muted-foreground mt-1 line-clamp-2">
          {item.description}
        </p>
        <div className="flex gap-1 flex-wrap mt-3">{badges}</div>
      </CardContent>
    </Card>
  );
});

OptimizedListItem.displayName = 'OptimizedListItem';

export default OptimizedListItem;
```

### 3. Loading States (MANDATORY)
```typescript
// Skeleton components for loading states
export const ToolPageSkeleton = memo(() => (
  <div className="container mx-auto p-4 max-w-4xl">
    <Card>
      <CardHeader>
        <div className="h-6 bg-muted animate-pulse rounded w-1/3" />
        <div className="h-4 bg-muted animate-pulse rounded w-2/3" />
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <div className="h-4 bg-muted animate-pulse rounded w-16" />
          <div className="h-32 bg-muted animate-pulse rounded" />
        </div>
        <div className="h-10 bg-muted animate-pulse rounded" />
        <div className="space-y-2">
          <div className="h-4 bg-muted animate-pulse rounded w-16" />
          <div className="h-32 bg-muted animate-pulse rounded" />
        </div>
      </CardContent>
    </Card>
  </div>
));

export const ListSkeleton = memo(() => (
  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
    {Array.from({ length: 9 }).map((_, i) => (
      <Card key={i}>
        <CardContent className="p-4">
          <div className="h-5 bg-muted animate-pulse rounded w-3/4 mb-2" />
          <div className="h-4 bg-muted animate-pulse rounded w-full mb-1" />
          <div className="h-4 bg-muted animate-pulse rounded w-2/3 mb-3" />
          <div className="flex gap-1">
            <div className="h-6 bg-muted animate-pulse rounded w-16" />
            <div className="h-6 bg-muted animate-pulse rounded w-12" />
          </div>
        </CardContent>
      </Card>
    ))}
  </div>
));
```

## üì± RESPONSIVE DESIGN RULES

### Breakpoint Strategy (MANDATORY)
```typescript
// Tailwind breakpoints - ALWAYS use these
// sm: 640px
// md: 768px  
// lg: 1024px
// xl: 1280px
// 2xl: 1536px

// Mobile-first responsive patterns
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
  {/* Grid items */}
</div>

// Responsive text sizing
<h1 className="text-xl md:text-2xl lg:text-3xl xl:text-4xl font-bold">
  Responsive Heading
</h1>

// Responsive spacing
<div className="p-4 md:p-6 lg:p-8">
  <div className="space-y-4 md:space-y-6 lg:space-y-8">
    {/* Content */}
  </div>
</div>

// Responsive visibility
<div className="hidden md:block">Desktop only</div>
<div className="block md:hidden">Mobile only</div>
```

### Container Patterns
```typescript
// Standard container with responsive padding
<div className="container mx-auto px-4 md:px-6 lg:px-8">
  {/* Content */}
</div>

// Max-width containers for different content types
<div className="max-w-md mx-auto">  {/* Forms */}
<div className="max-w-2xl mx-auto">  {/* Articles */}
<div className="max-w-4xl mx-auto">  {/* Tools */}
<div className="max-w-6xl mx-auto">  {/* Dashboards */}
<div className="max-w-7xl mx-auto">  {/* Full layouts */}
```

## üé≠ ANIMATION & TRANSITIONS

### Performance-Optimized Animations
```typescript
// Use CSS transitions for simple animations
<Button className="transition-colors duration-200 hover:bg-accent">
  Hover me
</Button>

// Loading animations
<div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary" />
<div className="animate-pulse bg-muted h-4 rounded" />

// Entrance animations with Framer Motion (when needed)
import { motion } from 'framer-motion';

const MotionCard = motion(Card);

<MotionCard
  initial={{ opacity: 0, y: 20 }}
  animate={{ opacity: 1, y: 0 }}
  transition={{ duration: 0.3 }}
>
  {/* Card content */}
</MotionCard>
```

## üîß FORM PATTERNS

### Accessible Form Components
```typescript
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';

interface FormProps {
  onSubmit: (data: FormData) => void;
  isLoading?: boolean;
}

const AccessibleForm = memo<FormProps>(({ onSubmit, isLoading = false }) => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    message: ''
  });
  const [errors, setErrors] = useState<Record<string, string>>({});

  const handleSubmit = useCallback((e: React.FormEvent) => {
    e.preventDefault();
    // Validation logic
    onSubmit(formData);
  }, [formData, onSubmit]);

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div className="space-y-2">
        <Label htmlFor="name">Name *</Label>
        <Input
          id="name"
          value={formData.name}
          onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
          aria-invalid={!!errors.name}
          aria-describedby={errors.name ? "name-error" : undefined}
          required
        />
        {errors.name && (
          <p id="name-error" className="text-sm text-destructive" role="alert">
            {errors.name}
          </p>
        )}
      </div>

      <div className="space-y-2">
        <Label htmlFor="message">Message</Label>
        <Textarea
          id="message"
          value={formData.message}
          onChange={(e) => setFormData(prev => ({ ...prev, message: e.target.value }))}
          rows={4}
          className="resize-none"
        />
      </div>

      <Button type="submit" disabled={isLoading} className="w-full">
        {isLoading ? 'Submitting...' : 'Submit'}
      </Button>
    </form>
  );
});
```

## üé® THEME INTEGRATION

### Theme-Aware Components
```typescript
import { useTheme } from 'next-themes';

const ThemeAwareComponent = memo(() => {
  const { theme, setTheme } = useTheme();

  return (
    <div className="bg-background text-foreground border border-border rounded-lg p-4">
      <h3 className="text-lg font-semibold text-foreground">
        Current theme: {theme}
      </h3>
      <div className="flex gap-2 mt-2">
        <Button 
          variant={theme === 'light' ? 'default' : 'outline'}
          onClick={() => setTheme('light')}
        >
          Light
        </Button>
        <Button 
          variant={theme === 'dark' ? 'default' : 'outline'}
          onClick={() => setTheme('dark')}
        >
          Dark
        </Button>
        <Button 
          variant={theme === 'system' ? 'default' : 'outline'}
          onClick={() => setTheme('system')}
        >
          System
        </Button>
      </div>
    </div>
  );
});
```

## üìä COMPONENT TESTING

### UI Component Testing Patterns
```typescript
import { render, screen, fireEvent } from '@testing-library/react';
import { ThemeProvider } from 'next-themes';

// Test wrapper with theme provider
const renderWithTheme = (component: React.ReactElement) => {
  return render(
    <ThemeProvider attribute="class" defaultTheme="light">
      {component}
    </ThemeProvider>
  );
};

describe('ToolPage Component', () => {
  it('should render with proper accessibility attributes', () => {
    renderWithTheme(<ToolPage title="Test Tool" description="Test description" />);
    
    expect(screen.getByRole('textbox', { name: /input/i })).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /process/i })).toBeInTheDocument();
    expect(screen.getByRole('textbox', { name: /output/i })).toBeInTheDocument();
  });

  it('should handle user interactions correctly', async () => {
    const mockProcess = jest.fn();
    renderWithTheme(
      <ToolPage 
        title="Test Tool" 
        description="Test description"
        onProcess={mockProcess}
      />
    );

    const input = screen.getByRole('textbox', { name: /input/i });
    const processButton = screen.getByRole('button', { name: /process/i });

    fireEvent.change(input, { target: { value: 'test input' } });
    fireEvent.click(processButton);

    expect(mockProcess).toHaveBeenCalledWith('test input');
  });
});
```

## üéØ UI QUALITY CHECKLIST

### Pre-deployment UI Validation
- [ ] All components use shadcn/ui base components
- [ ] Color system uses CSS variables only
- [ ] Responsive design tested on all breakpoints
- [ ] Accessibility attributes present (ARIA labels, roles)
- [ ] Keyboard navigation functional
- [ ] Loading states implemented for async operations
- [ ] Error states properly displayed
- [ ] Theme switching works correctly
- [ ] Performance optimizations applied (memoization)
- [ ] No hardcoded colors or spacing values

### Component Quality Standards
- [ ] TypeScript interfaces defined for all props
- [ ] Display names set for all memoized components
- [ ] Event handlers properly memoized
- [ ] Computed values use useMemo
- [ ] Proper semantic HTML structure
- [ ] Screen reader compatibility tested
- [ ] Mobile-first responsive design
- [ ] Consistent spacing and typography

---

**Design is not just how it looks, but how it works. Build with purpose, consistency, and accessibility in mind.**

