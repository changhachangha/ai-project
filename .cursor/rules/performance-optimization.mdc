# Performance Optimization Guidelines

## 🚀 Next.js Performance Configuration

### Build Configuration Reference
# Performance Optimization Rules - AI Developer Tools Hub

## 🚀 PERFORMANCE MISSION
Achieve and maintain enterprise-grade performance standards with Core Web Vitals consistently in the "Good" range. Every optimization must be measurable and contribute to user experience.

## 📊 PERFORMANCE TARGETS (NON-NEGOTIABLE)

### Core Web Vitals Thresholds
- **LCP (Largest Contentful Paint)**: < 2.5s (Good), < 4.0s (Needs Improvement)
- **INP (Interaction to Next Paint)**: < 200ms (Good), < 500ms (Needs Improvement)
- **CLS (Cumulative Layout Shift)**: < 0.1 (Good), < 0.25 (Needs Improvement)
- **FCP (First Contentful Paint)**: < 1.8s (Good), < 3.0s (Needs Improvement)
- **TTFB (Time to First Byte)**: < 800ms (Good), < 1.8s (Needs Improvement)

### Build Configuration Reference
- Next.js config: [next.config.ts](mdc:next.config.ts)
- Build output: **Standalone** for optimal deployment
- Image optimization: **Enabled** with remote patterns
- Package transpilation: **Configured** for specific libraries

## ⚡ CRITICAL PERFORMANCE RULES

### ✅ MANDATORY OPTIMIZATIONS

1. **MEMOIZATION IS REQUIRED**
   ```typescript
   // ALWAYS memoize components
   const Component = memo<Props>(({ data }) => {
     // ALWAYS memoize event handlers
     const handleClick = useCallback(() => {
       // Handler logic
     }, []);
   
     // ALWAYS memoize computed values
     const processedData = useMemo(() => {
       return data.map(transform);
     }, [data]);
   
     return <div>{/* JSX */}</div>;
   });
   
   Component.displayName = 'Component';
   ```

2. **DYNAMIC IMPORTS FOR CODE SPLITTING**
   ```typescript
   // Client-only components
   const ClientComponent = dynamic(() => import('./ClientComponent'), {
     ssr: false,
     loading: () => (
       <div className="animate-pulse bg-muted h-32 rounded-md" />
     )
   });
   
   // Heavy components with fallback
   const HeavyChart = dynamic(() => import('./HeavyChart'), {
     loading: () => (
       <div className="flex items-center justify-center h-64">
         <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary" />
       </div>
     )
   });
   ```

3. **OPTIMIZED LIST RENDERING**
   ```typescript
   // CRITICAL: Use optimized span elements, NOT Badge components
   const badges = useMemo(() => {
     return item.tags.map((tag) => (
       <span 
         key={tag}
         className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-secondary text-secondary-foreground"
       >
         {tag}
       </span>
     ));
   }, [item.tags]);
   ```

4. **WEB VITALS MONITORING**
   ```typescript
   // MANDATORY: Initialize in root layout
   import { initWebVitals } from '@/lib/performance/web-vitals';
   
   useEffect(() => {
     initWebVitals();
   }, []);
   
   // Use performance monitoring hook
   const { metrics, analysis } = usePerformanceMonitoring();
   ```

### ❌ PERFORMANCE KILLERS (NEVER DO)

1. **DON'T import entire libraries** - Use tree-shaking friendly imports
2. **DON'T create unnecessary re-renders** - Avoid inline objects and functions
3. **DON'T use large unoptimized images** - Always use Next.js Image component
4. **DON'T block the main thread** - Move heavy computations to web workers
5. **DON'T ignore bundle analysis** - Regularly check with `npm run analyze`
6. **DON'T use Badge components in lists** - Use optimized span elements
7. **DON'T skip performance monitoring** - Always track Core Web Vitals
8. **DON'T create memory leaks** - Clean up event listeners and subscriptions

## 🧩 ADVANCED OPTIMIZATION PATTERNS

### Context Optimization
```typescript
// Split contexts to avoid unnecessary re-renders
interface UserContextValue {
  user: User | null;
  setUser: (user: User | null) => void;
}

interface UIContextValue {
  sidebarOpen: boolean;
  setSidebarOpen: (open: boolean) => void;
}

// Memoized context providers
function UserProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  
  const value = useMemo(() => ({
    user,
    setUser
  }), [user]);

  return (
    <UserContext.Provider value={value}>
      {children}
    </UserContext.Provider>
  );
}
```

### State Optimization
```typescript
// Optimized state management with debouncing
function useOptimizedState<T>(initialValue: T) {
  const [state, setState] = useState<T>(initialValue);
  const stateRef = useRef<T>(initialValue);

  const optimizedSetState = useCallback((newValue: T | ((prev: T) => T)) => {
    setState(prev => {
      const nextValue = typeof newValue === 'function' ? (newValue as (prev: T) => T)(prev) : newValue;
      stateRef.current = nextValue;
      return nextValue;
    });
  }, []);

  return [state, optimizedSetState, stateRef] as const;
}
```

### Image Optimization
```typescript
import Image from 'next/image';

// Optimized image with proper sizing
function ToolIcon({ tool }: { tool: Tool }) {
  return (
    <Image
      src={tool.iconUrl}
      alt={`${tool.name} icon`}
      width={48}
      height={48}
      className="rounded-md"
      priority={tool.featured}
    />
  );
}

// Responsive images
function HeroImage() {
  return (
    <Image
      src="/hero-image.jpg"
      alt="Developer tools"
      fill
      className="object-cover"
      sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
      priority
    />
  );
}
```

## 📦 BUNDLE OPTIMIZATION

### Tree Shaking Best Practices
```typescript
// ✅ Good: Import only what you need
import { debounce } from 'lodash/debounce';
import { Button } from '@/components/ui/button';

// ❌ Bad: Importing entire libraries
// import _ from 'lodash';
// import * as dateFns from 'date-fns';

// ✅ Use native APIs when possible
const formatCurrency = (amount: number) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD'
  }).format(amount);
};
```

### Bundle Analysis Commands
```bash
# Bundle analysis
npm run analyze

# Performance tests
npm test -- __tests__/performance.test.ts

# Development with monitoring
npm run dev
```

## 🔄 CACHING STRATEGIES

### Next.js Caching
```typescript
// Static generation with revalidation
export const revalidate = 3600; // Revalidate every hour

// API route caching
export async function GET() {
  const tools = await getTools();
  
  return NextResponse.json(tools, {
    headers: {
      'Cache-Control': 'public, s-maxage=3600, stale-while-revalidate=86400'
    }
  });
}
```

### Client-Side Caching
```typescript
// Local storage caching with expiration
const CACHE_KEY = 'user-preferences';
const CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 hours

function usePersistedState<T>(key: string, defaultValue: T) {
  const [state, setState] = useState<T>(() => {
    try {
      const cached = localStorage.getItem(key);
      if (cached) {
        const { value, timestamp } = JSON.parse(cached);
        if (Date.now() - timestamp < CACHE_DURATION) {
          return value;
        }
      }
    } catch {
      // Ignore cache errors
    }
    return defaultValue;
  });

  const setValue = useCallback((value: T) => {
    setState(value);
    try {
      localStorage.setItem(key, JSON.stringify({
        value,
        timestamp: Date.now()
      }));
    } catch {
      // Ignore storage errors
    }
  }, [key]);

  return [state, setValue] as const;
}
```

## 🎭 LOADING STATES & SUSPENSE

### Suspense Boundaries
```typescript
import { Suspense } from 'react';

// Loading fallbacks
function ToolListSkeleton() {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {Array.from({ length: 9 }).map((_, i) => (
        <div key={i} className="animate-pulse">
          <div className="bg-muted h-32 rounded-lg" />
        </div>
      ))}
    </div>
  );
}

// Suspense wrapper
function ToolsPage() {
  return (
    <div>
      <Suspense fallback={<ToolListSkeleton />}>
        <ToolList />
      </Suspense>
    </div>
  );
}
```

## 📊 PERFORMANCE MONITORING

### Web Vitals Implementation
```typescript
// Performance monitoring hook
function usePerformanceMonitoring() {
  const [metrics, setMetrics] = useState<Metric[]>([]);
  
  useEffect(() => {
    const observer = new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        // Process performance entries
        setMetrics(prev => [...prev, processEntry(entry)]);
      }
    });
    
    observer.observe({ entryTypes: ['navigation', 'paint', 'largest-contentful-paint'] });
    
    return () => observer.disconnect();
  }, []);
  
  return { metrics };
}
```

### Performance Testing
```typescript
// Performance benchmark tests
describe('Performance Benchmarks', () => {
  it('should render large list efficiently', () => {
    const largeToolList = Array.from({ length: 100 }, (_, i) => ({
      id: `tool-${i}`,
      name: `Tool ${i}`,
      description: `Description for tool ${i}`,
      category: 'test',
      tags: [`tag-${i}`]
    }));

    const startTime = performance.now();
    render(React.createElement(OptimizedToolList, { tools: largeToolList }));
    const endTime = performance.now();
    const renderTime = endTime - startTime;

    expect(renderTime).toBeLessThan(100); // 100ms threshold
  });
});
```

## 🔧 DEVELOPMENT TOOLS

### Memory Usage Monitoring
```typescript
export function monitorMemoryUsage() {
  if (typeof window === 'undefined' || !('memory' in performance)) {
    return null;
  }

  const memory = (performance as unknown as {
    memory: { usedJSHeapSize: number; totalJSHeapSize: number; jsHeapSizeLimit: number }
  }).memory;
  
  return {
    usedJSHeapSize: memory.usedJSHeapSize,
    totalJSHeapSize: memory.totalJSHeapSize,
    jsHeapSizeLimit: memory.jsHeapSizeLimit,
    usagePercentage: Math.round((memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100)
  };
}
```

## 🎯 PERFORMANCE VALIDATION CHECKLIST

### Pre-deployment Performance Audit
- [ ] Core Web Vitals meet "Good" thresholds
- [ ] Bundle size optimized (< 500KB initial)
- [ ] Images optimized and properly sized
- [ ] Code splitting implemented for heavy components
- [ ] Memoization applied to list components
- [ ] Loading states implemented for async operations
- [ ] Error boundaries handle performance failures
- [ ] Memory leaks eliminated
- [ ] Performance monitoring active

### Regular Performance Maintenance
- [ ] Weekly bundle analysis review
- [ ] Monthly Core Web Vitals audit
- [ ] Quarterly performance benchmark updates
- [ ] Continuous monitoring alerts configured

---

**Performance is a feature, not an afterthought. Optimize proactively, measure continuously.**

