# TypeScript Patterns & Best Practices

## 🎯 Core TypeScript Principles

### Type Safety First
# TypeScript Excellence Rules - AI Developer Tools Hub

## 🎯 TYPESCRIPT MISSION
Achieve 100% type safety with zero `any` types. Every component, function, and data structure must be explicitly typed with proper interfaces and generic constraints.

## 🚫 ABSOLUTE PROHIBITIONS

### NEVER DO (Zero Tolerance)
1. **NEVER use `any` type** - Always use proper generic constraints
2. **NEVER skip interface definitions** - Every component must have typed props
3. **NEVER use implicit returns without types** - Always specify return types
4. **NEVER ignore TypeScript errors** - Fix all compilation errors before proceeding
5. **NEVER use `@ts-ignore`** - Find the proper type solution instead
6. **NEVER use loose type assertions** - Use type guards and proper validation

## 📋 MANDATORY TYPE PATTERNS

### 1. Component Interface Definition (REQUIRED)
```typescript
// ALWAYS define props interface before component
interface ToolPageProps {
  title: string;
  description: string;
  placeholder?: string;
  onProcess?: (input: string) => Promise<string>;
  isLoading?: boolean;
  className?: string;
}

// ALWAYS use explicit generic typing
const ToolPage = memo<ToolPageProps>(({ 
  title, 
  description, 
  placeholder = "Enter input...",
  onProcess,
  isLoading = false,
  className 
}) => {
  // Component implementation
});

ToolPage.displayName = 'ToolPage';
```

### 2. Data Type Definitions (MANDATORY)
```typescript
// Core data types from [app/data/types.ts](mdc:app/data/types.ts)
interface Integration {
  id: string;
  name: string;
  description: string;
  category: 'encoding' | 'text' | 'conversion' | 'security';
  tags: string[];
  featured: boolean;
  path: string;
}

// Tool-specific result types
interface EncodingResult {
  success: boolean;
  data: string;
  error?: string;
  timestamp: number;
}

// API response types
interface ApiResponse<T> {
  data: T;
  status: 'success' | 'error';
  message?: string;
  timestamp: number;
}
```

### 3. Hook Type Patterns (REQUIRED)
```typescript
// Custom hook with proper generic typing
function useEncoding<T extends string | Buffer>(
  initialValue: T
): [T, (value: T) => void, boolean] {
  const [value, setValue] = useState<T>(initialValue);
  const [isProcessing, setIsProcessing] = useState<boolean>(false);

  const updateValue = useCallback((newValue: T) => {
    setIsProcessing(true);
    setValue(newValue);
    setIsProcessing(false);
  }, []);

  return [value, updateValue, isProcessing];
}

// State hook with proper typing
function useOptimizedState<T>(
  initialValue: T
): [T, (value: T | ((prev: T) => T)) => void, React.MutableRefObject<T>] {
  const [state, setState] = useState<T>(initialValue);
  const stateRef = useRef<T>(initialValue);

  const optimizedSetState = useCallback((newValue: T | ((prev: T) => T)) => {
    setState(prev => {
      const nextValue = typeof newValue === 'function' 
        ? (newValue as (prev: T) => T)(prev) 
        : newValue;
      stateRef.current = nextValue;
      return nextValue;
    });
  }, []);

  return [state, optimizedSetState, stateRef];
}
```

### 4. Event Handler Typing (MANDATORY)
```typescript
// Form event handlers
interface FormHandlers {
  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;
  onChange: (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;
  onKeyDown: (event: React.KeyboardEvent<HTMLElement>) => void;
  onFocus: (event: React.FocusEvent<HTMLElement>) => void;
}

// Button click handlers
type ButtonClickHandler = (event: React.MouseEvent<HTMLButtonElement>) => void;

// Generic event handler
type EventHandler<T extends HTMLElement> = (event: React.SyntheticEvent<T>) => void;

// Example usage
const handleSubmit: FormHandlers['onSubmit'] = useCallback((event) => {
  event.preventDefault();
  // Handle form submission
}, []);

const handleButtonClick: ButtonClickHandler = useCallback((event) => {
  event.stopPropagation();
  // Handle button click
}, []);
```

### 5. Async Function Typing (REQUIRED)
```typescript
// API function with proper error handling
async function processEncoding(
  input: string,
  type: 'base64' | 'hex' | 'url'
): Promise<EncodingResult> {
  try {
    const result = await performEncoding(input, type);
    return {
      success: true,
      data: result,
      timestamp: Date.now()
    };
  } catch (error) {
    return {
      success: false,
      data: '',
      error: error instanceof Error ? error.message : 'Unknown error',
      timestamp: Date.now()
    };
  }
}

// Generic async operation
async function performAsyncOperation<TInput, TOutput>(
  input: TInput,
  processor: (input: TInput) => Promise<TOutput>
): Promise<ApiResponse<TOutput>> {
  try {
    const data = await processor(input);
    return {
      data,
      status: 'success',
      timestamp: Date.now()
    };
  } catch (error) {
    return {
      data: {} as TOutput, // Type assertion only when necessary
      status: 'error',
      message: error instanceof Error ? error.message : 'Operation failed',
      timestamp: Date.now()
    };
  }
}
```

## 🔧 ADVANCED TYPE PATTERNS

### Union Types and Discriminated Unions
```typescript
// Tool category types
type ToolCategory = 'encoding' | 'text' | 'conversion' | 'security';

// Discriminated union for different tool types
interface BaseToolConfig {
  id: string;
  name: string;
  description: string;
}

interface EncodingToolConfig extends BaseToolConfig {
  type: 'encoding';
  supportedFormats: ('base64' | 'hex' | 'url')[];
}

interface TextToolConfig extends BaseToolConfig {
  type: 'text';
  features: ('format' | 'validate' | 'transform')[];
}

interface SecurityToolConfig extends BaseToolConfig {
  type: 'security';
  algorithms: ('md5' | 'sha1' | 'sha256')[];
}

type ToolConfig = EncodingToolConfig | TextToolConfig | SecurityToolConfig;

// Type guard functions
function isEncodingTool(tool: ToolConfig): tool is EncodingToolConfig {
  return tool.type === 'encoding';
}

function isTextTool(tool: ToolConfig): tool is TextToolConfig {
  return tool.type === 'text';
}

function isSecurityTool(tool: ToolConfig): tool is SecurityToolConfig {
  return tool.type === 'security';
}
```

### Generic Constraints and Conditional Types
```typescript
// Generic constraint for tool processors
interface ProcessorConstraint {
  input: string;
  output: string;
}

type ToolProcessor<T extends ProcessorConstraint> = (
  input: T['input']
) => Promise<T['output']>;

// Conditional types for different operations
type OperationResult<T> = T extends string 
  ? { encoded: string; original: string }
  : T extends Buffer 
  ? { buffer: Buffer; size: number }
  : never;

// Utility types for component props
type RequiredProps<T> = {
  [K in keyof T]-?: T[K];
};

type OptionalProps<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;

// Example usage
interface ToolProps {
  title: string;
  description: string;
  onProcess: (input: string) => void;
  placeholder?: string;
  isLoading?: boolean;
}

type RequiredToolProps = RequiredProps<ToolProps>;
type FlexibleToolProps = OptionalProps<ToolProps, 'placeholder' | 'isLoading'>;
```

### Context and Provider Typing
```typescript
// Context type definitions
interface AppContextValue {
  user: User | null;
  setUser: (user: User | null) => void;
  preferences: UserPreferences;
  updatePreferences: (prefs: Partial<UserPreferences>) => void;
}

interface UIContextValue {
  sidebarOpen: boolean;
  setSidebarOpen: (open: boolean) => void;
  theme: 'light' | 'dark' | 'system';
  setTheme: (theme: 'light' | 'dark' | 'system') => void;
}

// Context creation with proper typing
const AppContext = createContext<AppContextValue | null>(null);
const UIContext = createContext<UIContextValue | null>(null);

// Custom hooks with type safety
function useAppContext(): AppContextValue {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error('useAppContext must be used within AppProvider');
  }
  return context;
}

function useUIContext(): UIContextValue {
  const context = useContext(UIContext);
  if (!context) {
    throw new Error('useUIContext must be used within UIProvider');
  }
  return context;
}
```

## 🎨 COMPONENT TYPE PATTERNS

### Higher-Order Component Typing
```typescript
// HOC with proper generic typing
function withErrorBoundary<P extends object>(
  Component: React.ComponentType<P>
): React.ComponentType<P> {
  const WrappedComponent = (props: P) => {
    return (
      <ErrorBoundary>
        <Component {...props} />
      </ErrorBoundary>
    );
  };

  WrappedComponent.displayName = `withErrorBoundary(${Component.displayName || Component.name})`;
  
  return WrappedComponent;
}

// Usage with proper typing
const SafeToolPage = withErrorBoundary<ToolPageProps>(ToolPage);
```

### Render Props Pattern
```typescript
// Render props with proper typing
interface DataFetcherProps<T> {
  url: string;
  children: (data: T | null, loading: boolean, error: string | null) => React.ReactNode;
}

function DataFetcher<T>({ url, children }: DataFetcherProps<T>) {
  const [data, setData] = useState<T | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);
        const response = await fetch(url);
        const result: T = await response.json();
        setData(result);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Fetch failed');
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [url]);

  return <>{children(data, loading, error)}</>;
}

// Usage
<DataFetcher<Integration[]> url="/api/tools">
  {(tools, loading, error) => {
    if (loading) return <div>Loading...</div>;
    if (error) return <div>Error: {error}</div>;
    return <ToolList tools={tools || []} />;
  }}
</DataFetcher>
```

## 🔍 TYPE VALIDATION AND GUARDS

### Runtime Type Validation
```typescript
// Type guard functions
function isString(value: unknown): value is string {
  return typeof value === 'string';
}

function isValidIntegration(obj: unknown): obj is Integration {
  return (
    typeof obj === 'object' &&
    obj !== null &&
    'id' in obj &&
    'name' in obj &&
    'description' in obj &&
    'category' in obj &&
    'tags' in obj &&
    'featured' in obj &&
    'path' in obj &&
    isString((obj as any).id) &&
    isString((obj as any).name) &&
    isString((obj as any).description) &&
    ['encoding', 'text', 'conversion', 'security'].includes((obj as any).category) &&
    Array.isArray((obj as any).tags) &&
    typeof (obj as any).featured === 'boolean' &&
    isString((obj as any).path)
  );
}

// Validation with error handling
function validateAndProcessIntegration(data: unknown): Integration {
  if (!isValidIntegration(data)) {
    throw new Error('Invalid integration data structure');
  }
  return data;
}
```

### Zod Integration (Optional but Recommended)
```typescript
import { z } from 'zod';

// Schema definitions
const IntegrationSchema = z.object({
  id: z.string(),
  name: z.string(),
  description: z.string(),
  category: z.enum(['encoding', 'text', 'conversion', 'security']),
  tags: z.array(z.string()),
  featured: z.boolean(),
  path: z.string()
});

const ApiResponseSchema = z.object({
  data: z.unknown(),
  status: z.enum(['success', 'error']),
  message: z.string().optional(),
  timestamp: z.number()
});

// Type inference from schema
type Integration = z.infer<typeof IntegrationSchema>;
type ApiResponse<T> = Omit<z.infer<typeof ApiResponseSchema>, 'data'> & { data: T };

// Validation function
function parseIntegration(data: unknown): Integration {
  return IntegrationSchema.parse(data);
}
```

## 📊 UTILITY TYPES

### Custom Utility Types
```typescript
// Deep readonly type
type DeepReadonly<T> = {
  readonly [P in keyof T]: T[P] extends object ? DeepReadonly<T[P]> : T[P];
};

// Non-empty array type
type NonEmptyArray<T> = [T, ...T[]];

// Exact type (no extra properties)
type Exact<T, U> = T extends U ? (U extends T ? T : never) : never;

// Function parameter types
type Parameters<T> = T extends (...args: infer P) => any ? P : never;

// Return type extraction
type ReturnType<T> = T extends (...args: any[]) => infer R ? R : any;

// Example usage
type ReadonlyIntegration = DeepReadonly<Integration>;
type ToolCategories = NonEmptyArray<ToolCategory>;
```

## 🧪 TESTING TYPE PATTERNS

### Test Utilities with Proper Typing
```typescript
// Mock function with proper typing
function createMockFunction<T extends (...args: any[]) => any>(
  implementation?: T
): jest.MockedFunction<T> {
  return jest.fn(implementation) as jest.MockedFunction<T>;
}

// Test data factory with typing
function createTestIntegration(overrides: Partial<Integration> = {}): Integration {
  return {
    id: 'test-tool',
    name: 'Test Tool',
    description: 'A test tool',
    category: 'encoding',
    tags: ['test'],
    featured: false,
    path: '/test/tool',
    ...overrides
  };
}

// Type-safe test assertions
function assertIsIntegration(obj: unknown): asserts obj is Integration {
  if (!isValidIntegration(obj)) {
    throw new Error('Object is not a valid Integration');
  }
}
```

## 🎯 TYPE SAFETY CHECKLIST

### Pre-commit Type Validation
- [ ] No `any` types used
- [ ] All component props have interfaces
- [ ] All functions have explicit return types
- [ ] All async operations are properly typed
- [ ] Event handlers use proper React event types
- [ ] Generic constraints are applied where needed
- [ ] Type guards are used for runtime validation
- [ ] Union types use discriminated unions where appropriate

### Build Validation Commands
```bash
# Type checking (MUST pass)
npx tsc --noEmit

# Strict type checking
npx tsc --noEmit --strict

# Type coverage analysis
npx type-coverage --detail
```

## 💡 BEST PRACTICES SUMMARY

### DO (Always)
1. Define interfaces before implementing components
2. Use generic constraints for reusable functions
3. Implement type guards for runtime validation
4. Use discriminated unions for complex state
5. Apply proper event typing for handlers
6. Use utility types for complex transformations
7. Implement proper error type handling
8. Use strict TypeScript configuration

### DON'T (Never)
1. Use `any` type (use `unknown` instead)
2. Skip interface definitions
3. Use loose type assertions without validation
4. Ignore TypeScript compilation errors
5. Use `@ts-ignore` without proper justification
6. Create overly complex type hierarchies
7. Skip return type annotations
8. Use implicit any in function parameters

---

**Type safety is not optional. It's the foundation of maintainable code.**

