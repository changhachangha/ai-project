This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/workflows/deploy.yml
.gitignore
.vooster/project.json
app/(main)/conversion/color-converter/layout.tsx
app/(main)/conversion/color-converter/page.tsx
app/(main)/conversion/timestamp-converter/layout.tsx
app/(main)/conversion/timestamp-converter/page.tsx
app/(main)/encoding/base32/ClientBase32Tool.tsx
app/(main)/encoding/base32/page.tsx
app/(main)/encoding/base64/Base64Logic.ts
app/(main)/encoding/base64/ClientBase64Tool.tsx
app/(main)/encoding/base64/page.tsx
app/(main)/encoding/binary/BinaryToolUI.tsx
app/(main)/encoding/binary/ClientBinaryTool.tsx
app/(main)/encoding/binary/page.tsx
app/(main)/encoding/components/SimpleCategoryFilter.tsx
app/(main)/encoding/hex/ClientHexTool.tsx
app/(main)/encoding/hex/page.tsx
app/(main)/encoding/html/page.tsx
app/(main)/encoding/layout.tsx
app/(main)/encoding/page.tsx
app/(main)/encoding/unicode/ClientUnicodeTool.tsx
app/(main)/encoding/unicode/page.tsx
app/(main)/encoding/url/ClientUrlTool.tsx
app/(main)/encoding/url/page.tsx
app/(main)/integrations/components/CategoryFilter.tsx
app/(main)/integrations/components/FeaturedIntegrations.tsx
app/(main)/integrations/components/IntegrationCard.tsx
app/(main)/integrations/components/IntegrationGrid.tsx
app/(main)/integrations/components/IntegrationModal.tsx
app/(main)/integrations/components/Pagination.tsx
app/(main)/integrations/components/SearchBar.tsx
app/(main)/integrations/components/SimpleCategoryFilter.tsx
app/(main)/integrations/components/SortOptions.tsx
app/(main)/integrations/loading.tsx
app/(main)/integrations/page.tsx
app/(main)/layout.tsx
app/(main)/security/layout.tsx
app/(main)/security/rsa-key-generator/page.tsx
app/(main)/security/rsa-key-generator/RsaKeyGeneratorClient.tsx
app/(main)/settings/page.tsx
app/(main)/text/csv-json-converter/ClientCsvJsonConverterTool.tsx
app/(main)/text/csv-json-converter/page.tsx
app/(main)/text/diff-checker/layout.tsx
app/(main)/text/diff-checker/page.tsx
app/(main)/text/json-formatter/layout.tsx
app/(main)/text/json-formatter/page.tsx
app/(main)/text/layout.tsx
app/(main)/text/markdown-editor/ClientMarkdownEditor.tsx
app/(main)/text/markdown-editor/page.tsx
app/(main)/text/regex-tester/page.tsx
app/api/diff/route.ts
app/data/conversion-tools.ts
app/data/encoding-tools.ts
app/data/integrations.ts
app/data/security-tools.ts
app/data/text-tools.ts
app/data/types.ts
app/globals.css
app/HomePageClient.tsx
app/layout.tsx
app/page.tsx
app/types/base32.d.ts
components.json
components/command-palette/CommandPalette.tsx
components/tools/ColorTool.tsx
components/tools/DiffTool.tsx
components/tools/EncodeTool.tsx
components/tools/JsonTool.tsx
components/tools/TimestampTool.tsx
components/ui/button.tsx
components/ui/card.tsx
components/ui/checkbox.tsx
components/ui/dialog.tsx
components/ui/input.tsx
components/ui/label.tsx
components/ui/select.tsx
components/ui/tabs.tsx
components/ui/textarea.tsx
eslint.config.mjs
hooks/useEncoding.ts
lib/context/SidebarContext.tsx
lib/store/settingsStore.ts
lib/store/userStore.ts
lib/tools/color.ts
lib/tools/diff.ts
lib/tools/encode.ts
lib/tools/json.ts
lib/tools/timestamp.ts
lib/types/tools.ts
lib/utils.ts
next.config.ts
package.json
postcss.config.mjs
public/file.svg
public/globe.svg
public/next.svg
public/sw.js
public/vercel.svg
public/window.svg
public/workbox-4754cb34.js
README.md
tailwind.config.ts
tsconfig.json
types/jsdiff.d.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="lib/context/SidebarContext.tsx">
// D:/ai-project/lib/context/SidebarContext.tsx
'use client';

import { createContext, useContext, useState, ReactNode } from 'react';

interface SidebarContextType {
  isSidebarOpen: boolean;
  setSidebarOpen: (isOpen: boolean) => void;
}

const SidebarContext = createContext<SidebarContextType | null>(null);

export function SidebarProvider({ children }: { children: ReactNode }) {
  const [isSidebarOpen, setSidebarOpen] = useState(false);

  return (
    <SidebarContext.Provider value={{ isSidebarOpen, setSidebarOpen }}>
      {children}
    </SidebarContext.Provider>
  );
}

export function useSidebar() {
  const context = useContext(SidebarContext);
  if (context === null) {
    throw new Error('useSidebar must be used within a SidebarProvider');
  }
  return context;
}
</file>

<file path=".github/workflows/deploy.yml">
name: Deploy to Vercel

on:
    push:
        branches:
            - main # or master, depending on your default branch

jobs:
    deploy:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Install Vercel CLI
              run: npm install --global vercel@latest

            - name: Pull Vercel Environment Information
              run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

            - name: Build Project Artifacts
              run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

            - name: Deploy to Vercel
              run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path=".vooster/project.json">
{
  "uid": "DIW2",
  "name": "개발시 필요한 툴들을 모아놓은 웹사이트",
  "description": "개발시 필요한 툴들을 모아놓은 웹사이트",
  "connectedAt": "2025-06-19T01:14:51.539Z"
}
</file>

<file path="app/(main)/conversion/color-converter/layout.tsx">
export default function ColorLayout({ children }: { children: React.ReactNode }) {
    return <div className='flex flex-col items-center justify-center min-h-screen py-2'>{children}</div>;
}
</file>

<file path="app/(main)/conversion/color-converter/page.tsx">
'use client';

import React, { useState, useCallback } from 'react';

const hexToRgb = (hex: string) => {
    const shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function (m, r, g, b) {
        return r + r + g + g + b + b;
    });
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result
        ? {
              r: parseInt(result[1], 16),
              g: parseInt(result[2], 16),
              b: parseInt(result[3], 16),
          }
        : null;
};

const rgbToHex = (r: number, g: number, b: number) => {
    return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
};

const rgbToHsl = (r: number, g: number, b: number) => {
    r /= 255;
    g /= 255;
    b /= 255;

    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let h = 0;
    let s = 0;
    const l = (max + min) / 2;

    if (max === min) {
        h = s = 0; // achromatic
    } else {
        const d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }
        h /= 6;
    }

    return {
        h: Math.round(h * 360),
        s: Math.round(s * 100),
        l: Math.round(l * 100),
    };
};

const hslToRgb = (h: number, s: number, l: number) => {
    h /= 360;
    s /= 100;
    l /= 100;

    let r, g, b;

    if (s === 0) {
        r = g = b = l; // achromatic
    } else {
        const hue2rgb = (p: number, q: number, t: number) => {
            if (t < 0) t += 1;
            if (t > 1) t -= 1;
            if (t < 1 / 6) return p + (q - p) * 6 * t;
            if (t < 1 / 2) return q;
            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
            return p;
        };

        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        const p = 2 * l - q;

        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
    }

    return {
        r: Math.round(r * 255),
        g: Math.round(g * 255),
        b: Math.round(b * 255),
    };
};

export default function ColorPage() {
    const [hex, setHex] = useState('');
    const [rgb, setRgb] = useState('');
    const [hsl, setHsl] = useState('');

    const convertColors = useCallback((source: string, value: string) => {
        let r = 0,
            g = 0,
            b = 0;
        let h = 0,
            s = 0,
            l = 0;
        let hexValue = '';
        let rgbValue = '';
        let hslValue = '';

        try {
            if (source === 'hex') {
                const rgb = hexToRgb(value);
                if (rgb) {
                    r = rgb.r;
                    g = rgb.g;
                    b = rgb.b;
                } else {
                    throw new Error('Invalid HEX color');
                }
            } else if (source === 'rgb') {
                const parts = value.match(/\d+/g)?.map(Number);
                if (parts && parts.length === 3) {
                    [r, g, b] = parts;
                } else {
                    throw new Error('Invalid RGB color. Format: R, G, B');
                }
            } else if (source === 'hsl') {
                const parts = value.match(/\d+/g)?.map(Number);
                if (parts && parts.length === 3) {
                    [h, s, l] = parts;
                    const rgbResult = hslToRgb(h, s, l);
                    r = rgbResult.r;
                    g = rgbResult.g;
                    b = rgbResult.b;
                } else {
                    throw new Error('Invalid HSL color. Format: H, S, L');
                }
            }

            // Convert to all formats
            if (source !== 'hex') hexValue = rgbToHex(r, g, b);
            else hexValue = value;

            if (source !== 'rgb') rgbValue = `${r}, ${g}, ${b}`;
            else rgbValue = value;

            if (source !== 'hsl') {
                const hslResult = rgbToHsl(r, g, b);
                hslValue = `${hslResult.h}, ${hslResult.s}, ${hslResult.l}`;
            } else hslValue = value;

            setHex(hexValue);
            setRgb(rgbValue);
            setHsl(hslValue);
        } catch (error: unknown) {
            console.error('Color conversion error:', error);
            // Optionally, display error to user
        }
    }, []);

    const handleHexChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const value = e.target.value;
        setHex(value);
        convertColors('hex', value);
    };

    const handleRgbChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const value = e.target.value;
        setRgb(value);
        convertColors('rgb', value);
    };

    const handleHslChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const value = e.target.value;
        setHsl(value);
        convertColors('hsl', value);
    };

    return (
        <div className='flex flex-col items-center justify-center min-h-screen py-2'>
            <h1 className='text-4xl font-bold mb-8'>Color Converter</h1>
            <div className='grid grid-cols-1 md:grid-cols-3 gap-4 w-full max-w-4xl'>
                <div className='flex flex-col'>
                    <label htmlFor='hexInput' className='mb-2 text-lg'>
                        HEX
                    </label>
                    <input
                        id='hexInput'
                        type='text'
                        className='p-2 border rounded-md'
                        placeholder='e.g., #FF0000 or FF0000'
                        value={hex}
                        onChange={handleHexChange}
                    />
                </div>
                <div className='flex flex-col'>
                    <label htmlFor='rgbInput' className='mb-2 text-lg'>
                        RGB
                    </label>
                    <input
                        id='rgbInput'
                        type='text'
                        className='p-2 border rounded-md'
                        placeholder='e.g., 255, 0, 0'
                        value={rgb}
                        onChange={handleRgbChange}
                    />
                </div>
                <div className='flex flex-col'>
                    <label htmlFor='hslInput' className='mb-2 text-lg'>
                        HSL
                    </label>
                    <input
                        id='hslInput'
                        type='text'
                        className='p-2 border rounded-md'
                        placeholder='e.g., 0, 100%, 50%'
                        value={hsl}
                        onChange={handleHslChange}
                    />
                </div>
            </div>
            <div
                className='mt-8 w-full max-w-4xl h-32 rounded-md border'
                style={{ backgroundColor: hex || rgb || hsl ? `rgb(${rgb.replace(/\s/g, '')})` : 'transparent' }}
            ></div>
        </div>
    );
}
</file>

<file path="app/(main)/conversion/timestamp-converter/layout.tsx">
export default function TimestampLayout({ children }: { children: React.ReactNode }) {
    return <div className='flex flex-col items-center justify-center min-h-screen py-2'>{children}</div>;
}
</file>

<file path="app/(main)/conversion/timestamp-converter/page.tsx">
'use client';

import React, { useState } from 'react';

export default function TimestampPage() {
    const [timestampInput, setTimestampInput] = useState('');
    const [dateTimeOutput, setDateTimeOutput] = useState('');
    const [dateTimeInput, setDateTimeInput] = useState('');
    const [timestampOutput, setTimestampOutput] = useState('');
    const [error, setError] = useState('');

    const convertTimestampToDateTime = () => {
        setError('');
        if (!timestampInput) {
            setDateTimeOutput('');
            return;
        }
        const timestamp = parseInt(timestampInput, 10);
        if (isNaN(timestamp)) {
            setError('Invalid timestamp. Please enter a number.');
            setDateTimeOutput('');
            return;
        }

        try {
            const date = new Date(timestamp * 1000); // Assuming Unix timestamp (seconds)
            setDateTimeOutput(date.toLocaleString());
        } catch (e: unknown) {
            setError(e instanceof Error ? e.message : String(e));
            setDateTimeOutput('');
        }
    };

    const convertDateTimeToTimestamp = () => {
        setError('');
        if (!dateTimeInput) {
            setTimestampOutput('');
            return;
        }

        try {
            const date = new Date(dateTimeInput);
            if (isNaN(date.getTime())) {
                setError('Invalid date/time format.');
                setTimestampOutput('');
                return;
            }
            setTimestampOutput(Math.floor(date.getTime() / 1000).toString());
        } catch (e: unknown) {
            setError(e instanceof Error ? e.message : String(e));
            setTimestampOutput('');
        }
    };

    return (
        <div className='flex flex-col items-center justify-center min-h-screen py-2'>
            <h1 className='text-4xl font-bold mb-8'>Timestamp Converter</h1>
            <div className='flex w-full max-w-4xl space-x-4 mb-8'>
                <div className='flex flex-col flex-1'>
                    <h2 className='text-2xl font-semibold mb-4'>Timestamp to Date/Time</h2>
                    <input
                        type='text'
                        className='w-full p-2 border rounded-md mb-2'
                        placeholder='Enter Unix Timestamp (seconds)'
                        value={timestampInput}
                        onChange={(e) => setTimestampInput(e.target.value)}
                    />
                    <button
                        className='px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600'
                        onClick={convertTimestampToDateTime}
                    >
                        Convert
                    </button>
                    <p className='mt-4 text-lg'>Result: {dateTimeOutput}</p>
                </div>
                <div className='flex flex-col flex-1'>
                    <h2 className='text-2xl font-semibold mb-4'>Date/Time to Timestamp</h2>
                    <input
                        type='text'
                        className='w-full p-2 border rounded-md mb-2'
                        placeholder='Enter Date/Time (e.g., YYYY-MM-DD HH:MM:SS)'
                        value={dateTimeInput}
                        onChange={(e) => setDateTimeInput(e.target.value)}
                    />
                    <button
                        className='px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600'
                        onClick={convertDateTimeToTimestamp}
                    >
                        Convert
                    </button>
                    <p className='mt-4 text-lg'>Result: {timestampOutput}</p>
                </div>
            </div>
            {error && <p className='text-red-500'>Error: {error}</p>}
        </div>
    );
}
</file>

<file path="app/(main)/encoding/base32/ClientBase32Tool.tsx">
'use client';

import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { useEncoding } from '@/hooks/useEncoding';
// --- 수정: 'rfc4648' 라이브러리에서 base32 객체를 import ---
import React, { useCallback } from 'react';

// rfc4648 라이브러리를 동적으로 import
interface Base32Codec {
    stringify: (data: Uint8Array, options?: { pad?: boolean }) => string;
    parse: (data: string) => Uint8Array;
}
let base32: Base32Codec | undefined;
if (typeof window !== 'undefined') {
    import('rfc4648').then((module) => {
        base32 = module.base32 as Base32Codec;
    });
}

export default function ClientBase32Tool() {
    const {
        input,
        setInput,
        output,
        mode,
        setMode,
        handleEncode,
        handleDecode,
        handleClear,
        handleCopy,
        swapInputOutput,
    } = useEncoding({
        // --- 수정: rfc4648 라이브러리의 API에 맞게 로직 변경 ---
        encodeFn: (text) => {
            if (typeof window === 'undefined' || !base32) {
                return '';
            }
            const textAsBytes = new TextEncoder().encode(text);
            // rfc4648의 stringify 메소드를 사용하여 인코딩
            return base32.stringify(textAsBytes, { pad: false });
        },
        decodeFn: (base32String) => {
            if (typeof window === 'undefined' || !base32) {
                return '';
            }
            // rfc4648의 parse 메소드를 사용하여 디코딩
            const bytes = base32.parse(base32String);
            return new TextDecoder().decode(bytes);
        },
    });

    const handleModeChange = useCallback(
        (newMode: 'encode' | 'decode') => {
            if (mode !== newMode) {
                swapInputOutput(); // 모드가 변경될 때만 값 교환
                setMode(newMode);
            }
        },
        [mode, setMode, swapInputOutput]
    );

    return (
        <div className='container mx-auto px-4 py-8'>
            <div className='grid grid-cols-1 md:grid-cols-2 gap-8'>
                <Card>
                    <CardContent className='p-6'>
                        <div className='flex justify-between items-center mb-4'>
                            <div className='space-x-2'>
                                <Button
                                    variant={mode === 'encode' ? 'default' : 'outline'}
                                    onClick={() => handleModeChange('encode')}
                                >
                                    인코딩
                                </Button>
                                <Button
                                    variant={mode === 'decode' ? 'default' : 'outline'}
                                    onClick={() => handleModeChange('decode')}
                                >
                                    디코딩
                                </Button>
                            </div>
                            <Button variant='outline' onClick={handleClear}>
                                초기화
                            </Button>
                        </div>
                        <Textarea
                            placeholder={
                                mode === 'encode'
                                    ? '인코딩할 텍스트를 입력하세요...'
                                    : '디코딩할 Base32 문자열을 입력하세요...'
                            }
                            value={input}
                            onChange={(e) => setInput(e.target.value)}
                            className='min-h-[200px] mb-4'
                        />
                        <Button className='w-full' onClick={mode === 'encode' ? handleEncode : handleDecode}>
                            {mode === 'encode' ? '인코딩' : '디코딩'}
                        </Button>
                    </CardContent>
                </Card>

                <Card>
                    <CardContent className='p-6'>
                        <div className='flex justify-between items-center mb-4'>
                            <h2 className='text-lg font-semibold'>결과</h2>
                            <Button variant='outline' onClick={handleCopy}>
                                복사
                            </Button>
                        </div>
                        <Textarea value={output} readOnly className='min-h-[200px]' />
                    </CardContent>
                </Card>
            </div>
        </div>
    );
}
</file>

<file path="app/(main)/encoding/base64/Base64Logic.ts">
const encodeBase64 = (text: string): string => {
    return btoa(unescape(encodeURIComponent(text)));
};

const decodeBase64 = (base64: string): string => {
    return decodeURIComponent(escape(atob(base64)));
};

const handleFileChangeLogic = (
    event: React.ChangeEvent<HTMLInputElement>,
    setOutput: (value: string) => void,
    setInput: (value: string) => void,
    setMode: (mode: 'encode' | 'decode') => void
) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
        const result = e.target?.result;
        if (typeof result === 'string') {
            const base64Data = result.split(',')[1];
            setOutput(base64Data);
            setInput(`파일: ${file.name} (${Math.round(file.size / 1024)} KB)`);
            setMode('encode');
        }
    };
    reader.onerror = () => {
        setOutput('파일을 읽는 중 오류가 발생했습니다.');
    };
    reader.readAsDataURL(file);
};

export { encodeBase64, decodeBase64, handleFileChangeLogic };
</file>

<file path="app/(main)/encoding/base64/ClientBase64Tool.tsx">
'use client';

import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { useEncoding } from '@/hooks/useEncoding';
import { Upload } from 'lucide-react';
import React, { useRef } from 'react';
import { encodeBase64, decodeBase64, handleFileChangeLogic } from './Base64Logic';

export default function ClientBase64Tool() {
    const fileInputRef = useRef<HTMLInputElement>(null);

    const { input, setInput, output, setOutput, mode, setMode, handleEncode, handleDecode, handleClear, handleCopy } =
        useEncoding({
            encodeFn: encodeBase64,
            decodeFn: decodeBase64,
        });

    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        handleFileChangeLogic(event, setOutput, setInput, setMode);
    };

    const customClear = () => {
        handleClear();
        if (fileInputRef.current) {
            fileInputRef.current.value = '';
        }
    };

    const handleUploadButtonClick = () => {
        fileInputRef.current?.click();
    };

    return (
        <div className='container mx-auto px-4 py-8'>
            <div className='grid grid-cols-1 md:grid-cols-2 gap-8'>
                <Card>
                    <CardContent className='p-6'>
                        <div className='flex justify-between items-center mb-4'>
                            <div className='space-x-2'>
                                <Button
                                    variant={mode === 'encode' ? 'default' : 'outline'}
                                    onClick={() => setMode('encode')}
                                >
                                    인코딩
                                </Button>
                                <Button
                                    variant={mode === 'decode' ? 'default' : 'outline'}
                                    onClick={() => setMode('decode')}
                                >
                                    디코딩
                                </Button>
                            </div>
                            <Button variant='outline' onClick={customClear}>
                                초기화
                            </Button>
                        </div>
                        <Textarea
                            placeholder={
                                mode === 'encode'
                                    ? '인코딩할 텍스트를 입력하거나 파일을 업로드하세요...'
                                    : '디코딩할 Base64 문자열을 입력하세요...'
                            }
                            value={input}
                            onChange={(e) => setInput(e.target.value)}
                            className='min-h-[200px] mb-4'
                        />
                        <div className='flex w-full gap-2'>
                            <Button className='flex-1' onClick={mode === 'encode' ? handleEncode : handleDecode}>
                                {mode === 'encode' ? '텍스트 인코딩' : '디코딩'}
                            </Button>

                            <Button variant='outline' className='flex-1' onClick={handleUploadButtonClick}>
                                <Upload className='mr-2 h-4 w-4' /> 파일 업로드
                            </Button>
                        </div>
                        <input
                            id='file-upload'
                            type='file'
                            ref={fileInputRef}
                            className='hidden'
                            onChange={handleFileChange}
                        />
                    </CardContent>
                </Card>

                <Card>
                    <CardContent className='p-6'>
                        <div className='flex justify-between items-center mb-4'>
                            <h2 className='text-lg font-semibold'>결과</h2>
                            <Button variant='outline' onClick={handleCopy}>
                                복사
                            </Button>
                        </div>
                        <Textarea value={output} readOnly className='min-h-[200px]' />
                    </CardContent>
                </Card>
            </div>
        </div>
    );
}
</file>

<file path="app/(main)/encoding/binary/BinaryToolUI.tsx">
'use client';

import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { useState } from 'react';

type BaseType = '2' | '8' | '10' | '16';

const baseLabels: Record<BaseType, string> = {
    '2': '2진수',
    '8': '8진수',
    '10': '10진수',
    '16': '16진수',
};

export default function BinaryToolUI() {
    const [input, setInput] = useState('');
    const [output, setOutput] = useState('');
    const [fromBase, setFromBase] = useState<BaseType>('10');
    const [toBase, setToBase] = useState<BaseType>('2');

    const handleConvert = () => {
        try {
            // 입력값을 10진수로 변환
            const decimal = parseInt(input, parseInt(fromBase));
            if (isNaN(decimal)) {
                throw new Error('Invalid number');
            }

            // 목표 진수로 변환
            let result = decimal.toString(parseInt(toBase));
            if (toBase === '16') {
                result = result.toUpperCase();
            }

            setOutput(result);
        } catch {
            setOutput('변환 중 오류가 발생했습니다. 유효한 숫자를 입력해주세요.');
        }
    };

    const handleClear = () => {
        setInput('');
        setOutput('');
    };

    const handleCopy = () => {
        if (typeof window === 'undefined') {
            // 브라우저 환경이 아님
            return;
        }

        const nav = window.navigator;
        if (!nav || !nav.clipboard) {
            console.warn('클립보드 API를 사용할 수 없습니다. 복사할 수 없습니다.');
            return;
        }

        if (typeof nav.clipboard.writeText === 'function') {
            nav.clipboard.writeText(output);
        } else {
            console.warn('클립보드 API의 writeText 함수를 사용할 수 없습니다.');
        }
    };

    return (
        <div className='container mx-auto px-4 py-8'>
            <div className='grid grid-cols-1 md:grid-cols-2 gap-8'>
                <Card>
                    <CardContent className='p-6'>
                        <div className='flex justify-between items-center mb-4'>
                            <div className='flex items-center gap-4'>
                                <Select value={fromBase} onValueChange={(value: BaseType) => setFromBase(value)}>
                                    <SelectTrigger className='w-32'>
                                        <SelectValue placeholder='From' />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {Object.entries(baseLabels).map(([value, label]) => (
                                            <SelectItem key={value} value={value}>
                                                {label}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                                <span>→</span>
                                <Select value={toBase} onValueChange={(value: BaseType) => setToBase(value)}>
                                    <SelectTrigger className='w-32'>
                                        <SelectValue placeholder='To' />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {Object.entries(baseLabels).map(([value, label]) => (
                                            <SelectItem key={value} value={value}>
                                                {label}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>
                            <Button variant='outline' onClick={handleClear}>
                                초기화
                            </Button>
                        </div>
                        <Textarea
                            placeholder={`${baseLabels[fromBase]}로 된 숫자를 입력하세요...`}
                            value={input}
                            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setInput(e.target.value)}
                            className='min-h-[200px] mb-4 font-mono'
                        />
                        <Button className='w-full' onClick={handleConvert}>
                            변환
                        </Button>
                    </CardContent>
                </Card>

                <Card>
                    <CardContent className='p-6'>
                        <div className='flex justify-between items-center mb-4'>
                            <h2 className='text-lg font-semibold'>결과 ({baseLabels[toBase]})</h2>
                            <Button variant='outline' onClick={handleCopy}>
                                복사
                            </Button>
                        </div>
                        <Textarea value={output} readOnly className='min-h-[200px] font-mono' />
                    </CardContent>
                </Card>
            </div>
        </div>
    );
}
</file>

<file path="app/(main)/encoding/binary/ClientBinaryTool.tsx">
'use client';

import dynamic from 'next/dynamic';

const BinaryToolUI = dynamic(() => import('./BinaryToolUI'), { ssr: false });

export default function ClientBinaryTool() {
    return <BinaryToolUI />;
}
</file>

<file path="app/(main)/encoding/components/SimpleCategoryFilter.tsx">
'use client';

import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';

type SimpleCategoryFilterProps = {
  categories: string[];
  selectedCategory: string;
  onSelectCategory: (category: string) => void;
};

export default function SimpleCategoryFilter({ 
  categories, 
  selectedCategory, 
  onSelectCategory 
}: SimpleCategoryFilterProps) {
  return (
    <div className="flex flex-wrap gap-2">
      {categories.map((category) => (
        <Button
          key={category}
          variant={selectedCategory === category ? "default" : "outline"}
          size="sm"
          className={cn(
            "transition-colors",
            selectedCategory === category 
              ? "bg-primary text-primary-foreground" 
              : "hover:bg-accent"
          )}
          onClick={() => onSelectCategory(category)}
        >
          {category}
        </Button>
      ))}
    </div>
  );
}
</file>

<file path="app/(main)/encoding/hex/ClientHexTool.tsx">
'use client';

import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { useState } from 'react';

export default function ClientHexTool() {
    const [input, setInput] = useState('');
    const [output, setOutput] = useState('');
    const [mode, setMode] = useState<'encode' | 'decode'>('encode');

    const handleEncode = () => {
        try {
            const encoded = Array.from(input)
                .map((char) => char.charCodeAt(0).toString(16).padStart(2, '0'))
                .join('');
            setOutput(encoded.toUpperCase());
        } catch {
            setOutput('인코딩 중 오류가 발생했습니다. 유효한 텍스트를 입력해주세요.');
        }
    };

    const handleDecode = () => {
        try {
            const cleanHex = input.replace(/\s+/g, '');
            if (!/^[0-9A-Fa-f]*$/.test(cleanHex)) {
                throw new Error('Invalid hex string');
            }
            const decoded =
                cleanHex
                    .match(/.{1,2}/g)
                    ?.map((byte) => String.fromCharCode(parseInt(byte, 16)))
                    .join('') || '';
            setOutput(decoded);
        } catch {
            setOutput('디코딩 중 오류가 발생했습니다. 유효한 16진수 문자열을 입력해주세요.');
        }
    };

    const handleClear = () => {
        setInput('');
        setOutput('');
    };

    const handleCopy = () => {
        if (typeof window === 'undefined') {
            // 브라우저 환경이 아님
            return;
        }

        const nav = window.navigator;
        if (!nav || !nav.clipboard) {
            console.warn('클립보드 API를 사용할 수 없습니다. 복사할 수 없습니다.');
            return;
        }

        if (output && output !== '') {
            if (typeof nav.clipboard.writeText === 'function') {
                nav.clipboard.writeText(output);
            } else {
                console.warn('클립보드 API의 writeText 함수를 사용할 수 없습니다.');
            }
        }
    };

    return (
        <div className='container mx-auto px-4 py-8'>
            <div className='grid grid-cols-1 md:grid-cols-2 gap-8'>
                <Card>
                    <CardContent className='p-6'>
                        <div className='flex justify-between items-center mb-4'>
                            <div className='space-x-2'>
                                <Button
                                    variant={mode === 'encode' ? 'default' : 'outline'}
                                    onClick={() => setMode('encode')}
                                >
                                    텍스트 → Hex
                                </Button>
                                <Button
                                    variant={mode === 'decode' ? 'default' : 'outline'}
                                    onClick={() => setMode('decode')}
                                >
                                    Hex → 텍스트
                                </Button>
                            </div>
                            <Button variant='outline' onClick={handleClear}>
                                초기화
                            </Button>
                        </div>
                        <Textarea
                            placeholder={
                                mode === 'encode'
                                    ? '16진수로 변환할 텍스트를 입력하세요...'
                                    : '텍스트로 변환할 16진수를 입력하세요...'
                            }
                            value={input}
                            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setInput(e.target.value)}
                            className='min-h-[200px] mb-4 font-mono'
                        />
                        <Button className='w-full' onClick={mode === 'encode' ? handleEncode : handleDecode}>
                            변환
                        </Button>
                    </CardContent>
                </Card>

                <Card>
                    <CardContent className='p-6'>
                        <div className='flex justify-between items-center mb-4'>
                            <h2 className='text-lg font-semibold'>결과</h2>
                            <Button variant='outline' onClick={handleCopy}>
                                복사
                            </Button>
                        </div>
                        <Textarea value={output} readOnly className='min-h-[200px] font-mono' />
                    </CardContent>
                </Card>
            </div>
        </div>
    );
}
</file>

<file path="app/(main)/encoding/unicode/ClientUnicodeTool.tsx">
'use client';

import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { useState } from 'react';

export default function ClientUnicodeTool() {
    const [input, setInput] = useState('');
    const [output, setOutput] = useState('');
    const [mode, setMode] = useState<'encode' | 'decode'>('encode');

    const handleEncode = () => {
        if (typeof window === 'undefined') {
            return;
        }
        try {
            const encoded = Array.from(input)
                .map((char) => {
                    const hex = char.charCodeAt(0).toString(16).toUpperCase().padStart(4, '0');
                    return `\\u${hex}`;
                })
                .join('');
            setOutput(encoded);
        } catch {
            setOutput('인코딩 중 오류가 발생했습니다. 유효한 텍스트를 입력해주세요.');
        }
    };

    const handleDecode = () => {
        if (typeof window === 'undefined') {
            return;
        }
        try {
            const decoded = input.replace(/\\u([0-9a-fA-F]{4})/g, (_, hex) => String.fromCharCode(parseInt(hex, 16)));
            setOutput(decoded);
        } catch {
            setOutput('디코딩 중 오류가 발생했습니다. 유효한 유니코드 이스케이프 시퀀스를 입력해주세요.');
        }
    };

    const handleClear = () => {
        setInput('');
        setOutput('');
    };

    const handleCopy = () => {
        navigator.clipboard.writeText(output);
    };

    return (
        <div className='container mx-auto px-4 py-8'>
            <div className='grid grid-cols-1 md:grid-cols-2 gap-8'>
                <Card>
                    <CardContent className='p-6'>
                        <div className='flex justify-between items-center mb-4'>
                            <div className='space-x-2'>
                                <Button
                                    variant={mode === 'encode' ? 'default' : 'outline'}
                                    onClick={() => setMode('encode')}
                                >
                                    텍스트 → Unicode
                                </Button>
                                <Button
                                    variant={mode === 'decode' ? 'default' : 'outline'}
                                    onClick={() => setMode('decode')}
                                >
                                    Unicode → 텍스트
                                </Button>
                            </div>
                            <Button variant='outline' onClick={handleClear}>
                                초기화
                            </Button>
                        </div>
                        <Textarea
                            placeholder={
                                mode === 'encode'
                                    ? '유니코드로 변환할 텍스트를 입력하세요...'
                                    : '텍스트로 변환할 유니코드를 입력하세요... (예: \u0041\u0042)'
                            }
                            value={input}
                            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setInput(e.target.value)}
                            className='min-h-[200px] mb-4 font-mono'
                        />
                        <Button className='w-full' onClick={mode === 'encode' ? handleEncode : handleDecode}>
                            변환
                        </Button>
                    </CardContent>
                </Card>

                <Card>
                    <CardContent className='p-6'>
                        <div className='flex justify-between items-center mb-4'>
                            <h2 className='text-lg font-semibold'>결과</h2>
                            <Button variant='outline' onClick={handleCopy}>
                                복사
                            </Button>
                        </div>
                        <Textarea value={output} readOnly className='min-h-[200px] font-mono' />
                    </CardContent>
                </Card>
            </div>
        </div>
    );
}
</file>

<file path="app/(main)/encoding/url/ClientUrlTool.tsx">
'use client';

import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { useEncoding } from '@/hooks/useEncoding';
import { useEffect, useState } from 'react';
import { Checkbox } from '@/components/ui/checkbox';
import { Label } from '@/components/ui/label';

export default function ClientUrlTool() {
    const [isRealtime, setIsRealtime] = useState(true);

    const { input, setInput, output, setOutput, mode, setMode, handleEncode, handleDecode, handleClear, handleCopy } =
        useEncoding({
            encodeFn: (input) => encodeURIComponent(input),
            decodeFn: (input) => decodeURIComponent(input),
        });

    useEffect(() => {
        if (typeof window === 'undefined') {
            return;
        }
        if (isRealtime) {
            try {
                if (input === '') {
                    setOutput('');
                    return;
                }
                if (mode === 'encode') {
                    setOutput(encodeURIComponent(input));
                } else {
                    setOutput(decodeURIComponent(input));
                }
            } catch {
                setOutput('유효하지 않은 입력입니다.');
            }
        }
    }, [input, mode, isRealtime, setOutput]);

    return (
        <div className='container mx-auto px-4 py-8'>
            <div className='grid grid-cols-1 md:grid-cols-2 gap-8'>
                <Card>
                    <CardContent className='p-6'>
                        <div className='flex justify-between items-center mb-4'>
                            <div className='space-x-2'>
                                <Button
                                    variant={mode === 'encode' ? 'default' : 'outline'}
                                    onClick={() => setMode('encode')}
                                >
                                    인코딩
                                </Button>
                                <Button
                                    variant={mode === 'decode' ? 'default' : 'outline'}
                                    onClick={() => setMode('decode')}
                                >
                                    디코딩
                                </Button>
                            </div>
                            <Button variant='outline' onClick={handleClear}>
                                초기화
                            </Button>
                        </div>
                        <Textarea
                            placeholder={
                                mode === 'encode'
                                    ? 'URL 인코딩할 텍스트를 입력하세요...'
                                    : 'URL 디코딩할 문자열을 입력하세요...'
                            }
                            value={input}
                            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setInput(e.target.value)}
                            className='min-h-[200px] mb-4 font-mono'
                        />

                        <div className='flex justify-between items-center mt-4'>
                            <div className='flex items-center space-x-2'>
                                <Checkbox
                                    id='realtime-checkbox'
                                    checked={isRealtime}
                                    onCheckedChange={(checked: unknown) => setIsRealtime(Boolean(checked))}
                                />
                                <Label
                                    htmlFor='realtime-checkbox'
                                    className='text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'
                                >
                                    실시간 변환
                                </Label>
                            </div>
                            {!isRealtime && (
                                <Button onClick={mode === 'encode' ? handleEncode : handleDecode}>
                                    {mode === 'encode' ? '인코딩' : '디코딩'}
                                </Button>
                            )}
                        </div>
                    </CardContent>
                </Card>

                <Card>
                    <CardContent className='p-6'>
                        <div className='flex justify-between items-center mb-4'>
                            <h2 className='text-lg font-semibold'>결과</h2>
                            <Button variant='outline' onClick={handleCopy}>
                                복사
                            </Button>
                        </div>
                        <Textarea value={output} readOnly className='min-h-[200px] font-mono' />
                    </CardContent>
                </Card>
            </div>
        </div>
    );
}
</file>

<file path="app/(main)/integrations/components/Pagination.tsx">
import { Button } from "@/components/ui/button"
import { ChevronLeft, ChevronRight } from "lucide-react"

type PaginationProps = {
  currentPage: number
  totalPages: number
  onPageChange: (page: number) => void
}

export default function Pagination({ currentPage, totalPages, onPageChange }: PaginationProps) {
  return (
    <div className="flex justify-center items-center space-x-2">
      <Button variant="outline" size="icon" onClick={() => onPageChange(currentPage - 1)} disabled={currentPage === 1}>
        <ChevronLeft className="h-4 w-4" />
      </Button>
      <span className="text-sm">
        Page {currentPage} of {totalPages}
      </span>
      <Button
        variant="outline"
        size="icon"
        onClick={() => onPageChange(currentPage + 1)}
        disabled={currentPage === totalPages}
      >
        <ChevronRight className="h-4 w-4" />
      </Button>
    </div>
  )
}
</file>

<file path="app/(main)/integrations/components/SearchBar.tsx">
import { Input } from "@/components/ui/input"
import { Search } from "lucide-react"

type SearchBarProps = {
  onSearch: (query: string) => void
}

export default function SearchBar({ onSearch }: SearchBarProps) {
  return (
    <div className="relative mb-4">
      <Input
        type="text"
        placeholder="Search integrations..."
        className="w-full h-10 pl-10 pr-4"
        onChange={(e) => onSearch(e.target.value)}
      />
      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
    </div>
  )
}
</file>

<file path="app/(main)/integrations/components/SimpleCategoryFilter.tsx">
'use client';

import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';

type SimpleCategoryFilterProps = {
    categories: string[];
    selectedCategory: string;
    onSelectCategory: (category: string) => void;
};

export default function SimpleCategoryFilter({
    categories,
    selectedCategory,
    onSelectCategory,
}: SimpleCategoryFilterProps) {
    return (
        <div className="flex flex-wrap gap-2">
            {categories.map((category) => (
                <Button
                    key={category}
                    variant={selectedCategory === category ? 'default' : 'outline'}
                    size="sm"
                    className={cn(
                        'transition-colors',
                        selectedCategory === category ? 'bg-primary text-primary-foreground' : 'hover:bg-accent'
                    )}
                    onClick={() => onSelectCategory(category)}
                >
                    {category}
                </Button>
            ))}
        </div>
    );
}
</file>

<file path="app/(main)/integrations/components/SortOptions.tsx">
"use client"

import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

type SortOption = {
  value: string
  label: string
}

type SortOptionsProps = {
  options: SortOption[]
  selectedOption: string
  onSelectOption: (value: string) => void
}

export default function SortOptions({ options, selectedOption, onSelectOption }: SortOptionsProps) {
  return (
    <div className="flex items-center gap-2">
      <span className="text-sm text-gray-500">Sort by:</span>
      <Select value={selectedOption} onValueChange={onSelectOption}>
        <SelectTrigger className="w-[180px] h-9">
          <SelectValue placeholder="Sort by" />
        </SelectTrigger>
        <SelectContent>
          {options.map((option) => (
            <SelectItem key={option.value} value={option.value}>
              {option.label}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
    </div>
  )
}
</file>

<file path="app/(main)/security/layout.tsx">
// 파일 경로: app/(main)/security/layout.tsx

'use client';

import { Button } from '@/components/ui/button';
import { allTools } from '@/app/data/integrations';
import { ArrowLeft } from 'lucide-react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { useMemo } from 'react';

export default function SecurityToolLayout({ children }: { children: React.ReactNode }) {
    const pathname = usePathname();

    const currentTool = useMemo(() => {
        const toolId = pathname.split('/').pop();
        return allTools.find((tool) => tool.id === toolId);
    }, [pathname]);

    const Icon = currentTool?.icon;

    return (
        <div className="container mx-auto px-4 py-8">
            {currentTool && Icon && (
                <div className="flex justify-between items-center mb-8">
                    <div className="flex items-center gap-3">
                        <div
                            className="w-12 h-12 rounded-full flex items-center justify-center"
                            style={{ backgroundColor: `${currentTool.color}20` }}
                        >
                            <Icon className="w-6 h-6" style={{ color: currentTool.color }} />
                        </div>
                        <h1 className="text-3xl font-bold">{currentTool.name}</h1>
                    </div>

                    <Link href="/" passHref>
                        <Button variant="outline">
                            <ArrowLeft className="mr-2 h-4 w-4" />
                            모든 도구 보기
                        </Button>
                    </Link>
                </div>
            )}

            {children}
        </div>
    );
}
</file>

<file path="app/(main)/security/rsa-key-generator/RsaKeyGeneratorClient.tsx">
'use client';

import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { useState } from 'react';
import { Loader2, Copy } from 'lucide-react';

export default function RsaKeyGeneratorClient() {
    const [publicKey, setPublicKey] = useState('');
    const [privateKey, setPrivateKey] = useState('');
    const [isLoading, setIsLoading] = useState(false);

    const generateKeys = async () => {
        setIsLoading(true);
        setPublicKey('');
        setPrivateKey('');

        // ArrayBuffer를 PEM 형식 문자열로 변환하는 함수
        function arrayBufferToPem(buffer: ArrayBuffer, label: string) {
            const base64 = btoa(String.fromCharCode(...new Uint8Array(buffer)));
            const pem = `-----BEGIN ${label}-----\n${base64.match(/.{1,64}/g)?.join('\n')}\n-----END ${label}-----`;
            return pem;
        }

        try {
            // 빌드 시 서버 환경에서 crypto.subtle이 없어서 발생하는 오류를 방지
            if (typeof window === 'undefined' || !window.crypto || !window.crypto.subtle) {
                throw new Error('Web Crypto API는 브라우저 환경에서만 지원됩니다.');
            }

            const keyPair = await window.crypto.subtle.generateKey(
                {
                    name: 'RSA-OAEP',
                    modulusLength: 2048,
                    publicExponent: new Uint8Array([1, 0, 1]),
                    hash: 'SHA-256',
                },
                true, // export 가능 여부
                ['encrypt', 'decrypt']
            );

            const spki = await window.crypto.subtle.exportKey('spki', keyPair.publicKey);
            const pkcs8 = await window.crypto.subtle.exportKey('pkcs8', keyPair.privateKey);

            setPublicKey(arrayBufferToPem(spki, 'PUBLIC KEY'));
            setPrivateKey(arrayBufferToPem(pkcs8, 'PRIVATE KEY'));
        } catch (error: unknown) {
            console.error(error);
            const errorMessage = error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.';
            setPublicKey(`키 생성 중 오류가 발생했습니다: ${errorMessage}`);
            setPrivateKey(`키 생성 중 오류가 발생했습니다: ${errorMessage}`);
        } finally {
            setIsLoading(false);
        }
    };

    const handleCopy = (text: string) => {
        if (text) navigator.clipboard.writeText(text);
    };

    return (
        <div className='space-y-6'>
            <Card>
                <CardContent className='p-6 text-center'>
                    <Button onClick={generateKeys} disabled={isLoading} size='lg'>
                        {isLoading ? <Loader2 className='mr-2 h-5 w-5 animate-spin' /> : null}
                        2048비트 RSA 키 페어 생성
                    </Button>
                </CardContent>
            </Card>

            <div className='grid grid-cols-1 md:grid-cols-2 gap-8'>
                <Card>
                    <CardContent className='p-6 space-y-2'>
                        <div className='flex justify-between items-center'>
                            <h2 className='text-lg font-semibold'>Public Key (공개키)</h2>
                            <Button variant='outline' size='sm' onClick={() => handleCopy(publicKey)}>
                                <Copy className='mr-2 h-4 w-4' /> 복사
                            </Button>
                        </div>
                        <Textarea
                            readOnly
                            value={publicKey}
                            className='min-h-[300px] font-mono'
                            placeholder='공개키가 여기에 생성됩니다.'
                        />
                    </CardContent>
                </Card>
                <Card>
                    <CardContent className='p-6 space-y-2'>
                        <div className='flex justify-between items-center'>
                            <h2 className='text-lg font-semibold'>Private Key (개인키)</h2>
                            <Button variant='outline' size='sm' onClick={() => handleCopy(privateKey)}>
                                <Copy className='mr-2 h-4 w-4' /> 복사
                            </Button>
                        </div>
                        <Textarea
                            readOnly
                            value={privateKey}
                            className='min-h-[300px] font-mono'
                            placeholder='개인키가 여기에 생성됩니다.'
                        />
                    </CardContent>
                </Card>
            </div>
        </div>
    );
}
</file>

<file path="app/(main)/settings/page.tsx">
'use client';

import React from 'react';
import { useSettingsStore } from '@/lib/store/settingsStore';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';

const SettingsPage: React.FC = () => {
    const {
        theme,
        fontSize,
        dateFormat,
        jsonIndentation,
        toggleTheme,
        setFontSize,
        setDateFormat,
        setJsonIndentation,
    } = useSettingsStore();

    return (
        <div className='flex flex-col space-y-8 p-8'>
            <h1 className='text-3xl font-bold'>Settings</h1>

            <section className='space-y-4'>
                <h2 className='text-2xl font-semibold'>Theme</h2>
                <div className='flex items-center space-x-4'>
                    <Label htmlFor='theme-select'>Select Theme:</Label>
                    <Select onValueChange={(value: 'light' | 'dark') => toggleTheme(value)} defaultValue={theme}>
                        <SelectTrigger className='w-[180px]'>
                            <SelectValue placeholder='Select a theme' />
                        </SelectTrigger>
                        <SelectContent>
                            <SelectItem value='light'>Light</SelectItem>
                            <SelectItem value='dark'>Dark</SelectItem>
                        </SelectContent>
                    </Select>
                    <Button onClick={() => toggleTheme()}>Toggle Theme</Button>
                </div>
            </section>

            <section className='space-y-4'>
                <h2 className='text-2xl font-semibold'>Font Size</h2>
                <div className='flex items-center space-x-4'>
                    <Label htmlFor='font-size-select'>Select Font Size:</Label>
                    <Select onValueChange={(value: 'sm' | 'md' | 'lg') => setFontSize(value)} defaultValue={fontSize}>
                        <SelectTrigger className='w-[180px]'>
                            <SelectValue placeholder='Select font size' />
                        </SelectTrigger>
                        <SelectContent>
                            <SelectItem value='sm'>Small</SelectItem>
                            <SelectItem value='md'>Medium</SelectItem>
                            <SelectItem value='lg'>Large</SelectItem>
                        </SelectContent>
                    </Select>
                </div>
            </section>

            <section className='space-y-4'>
                <h2 className='text-2xl font-semibold'>Date Format</h2>
                <div className='flex items-center space-x-4'>
                    <Label htmlFor='date-format-select'>Select Date Format:</Label>
                    <Select
                        onValueChange={(value: 'YYYY-MM-DD' | 'MM/DD/YYYY') => setDateFormat(value)}
                        defaultValue={dateFormat}
                    >
                        <SelectTrigger className='w-[180px]'>
                            <SelectValue placeholder='Select date format' />
                        </SelectTrigger>
                        <SelectContent>
                            <SelectItem value='YYYY-MM-DD'>YYYY-MM-DD</SelectItem>
                            <SelectItem value='MM/DD/YYYY'>MM/DD/YYYY</SelectItem>
                        </SelectContent>
                    </Select>
                </div>
            </section>

            <section className='space-y-4'>
                <h2 className='text-2xl font-semibold'>JSON Indentation</h2>
                <div className='flex items-center space-x-4'>
                    <Label htmlFor='json-indentation-select'>Select JSON Indentation:</Label>
                    <Select
                        onValueChange={(value: string) => {
                            if (value === 'tab') {
                                setJsonIndentation('tab');
                            } else {
                                setJsonIndentation(parseInt(value));
                            }
                        }}
                        defaultValue={jsonIndentation.toString()}
                    >
                        <SelectTrigger className='w-[180px]'>
                            <SelectValue placeholder='Select indentation' />
                        </SelectTrigger>
                        <SelectContent>
                            <SelectItem value='2'>2 Spaces</SelectItem>
                            <SelectItem value='4'>4 Spaces</SelectItem>
                            <SelectItem value='tab'>Tab</SelectItem>
                        </SelectContent>
                    </Select>
                </div>
            </section>
        </div>
    );
};

export default SettingsPage;
</file>

<file path="app/(main)/text/csv-json-converter/ClientCsvJsonConverterTool.tsx">
'use client';

import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { useState } from 'react';

export default function ClientCsvJsonConverterTool() {
    const [csv, setCsv] = useState('id,name,age\n1,Alice,30\n2,Bob,25');
    const [json, setJson] = useState('');
    const [error, setError] = useState('');

    const convertCsvToJson = () => {
        setError('');
        if (typeof window === 'undefined') {
            return;
        }
        try {
            if (!csv.trim()) {
                setError('CSV 입력이 비어 있습니다. 유효한 CSV 데이터를 입력해주세요.');
                return;
            }

            const lines = csv.trim().split('\n');
            if (lines.length === 0) {
                setError('CSV 입력에 유효한 데이터가 없습니다.');
                return;
            }

            const headers = lines[0].split(',').map((h) => h.trim());
            if (headers.some((h) => h === '')) {
                setError('CSV 헤더에 빈 값이 포함되어 있습니다. 모든 헤더에 유효한 이름을 지정해주세요.');
                return;
            }

            const result = lines.slice(1).map((line, lineIndex) => {
                const data = line.split(',');
                if (data.length !== headers.length) {
                    setError(`CSV 데이터의 ${lineIndex + 2}번째 줄에 헤더와 열의 개수가 일치하지 않습니다.`);
                    throw new Error('Data mismatch'); // Early exit to prevent further processing
                }
                return headers.reduce((obj, nextKey, index) => {
                    obj[nextKey] = data[index].trim();
                    return obj;
                }, {} as Record<string, string>);
            });
            setJson(JSON.stringify(result, null, 2));
        } catch (e: unknown) {
            if (e instanceof Error && e.message === 'Data mismatch') {
                // Specific error already set
            } else {
                setError('CSV를 JSON으로 변환하는 중 알 수 없는 오류가 발생했습니다. CSV 형식을 확인해주세요.');
            }
        }
    };

    const convertJsonToCsv = () => {
        setError('');
        if (typeof window === 'undefined') {
            return;
        }
        try {
            const data = JSON.parse(json);
            if (!Array.isArray(data)) {
                setError('JSON 입력이 유효한 배열이 아닙니다.');
                return;
            }
            if (data.length === 0) {
                setError('JSON 배열이 비어 있습니다. 변환할 데이터가 없습니다.');
                return;
            }

            const headers = Object.keys(data[0]);
            let result = headers.join(',') + '\n';
            result += data
                .map((row) =>
                    headers
                        .map((header) => {
                            // Ensure all rows have the same keys as the first row's headers
                            if (row[header] === undefined) {
                                throw new Error(`JSON 데이터에 일치하지 않는 키가 있습니다: '${header}'`);
                            }
                            return row[header];
                        })
                        .join(',')
                )
                .join('\n');
            setCsv(result);
        } catch (e: unknown) {
            if (e instanceof SyntaxError) {
                setError('JSON 구문 오류가 발생했습니다. 유효한 JSON 형식을 입력해주세요.');
            } else if (e instanceof Error && e.message.includes('JSON 데이터에 일치하지 않는 키가 있습니다')) {
                setError(e.message);
            } else {
                setError('JSON을 CSV로 변환하는 중 알 수 없는 오류가 발생했습니다.');
            }
        }
    };

    return (
        <div className='space-y-4'>
            <div className='grid grid-cols-1 lg:grid-cols-2 gap-8 items-start'>
                <Card>
                    <CardContent className='p-6'>
                        <h2 className='text-lg font-semibold mb-2'>CSV</h2>
                        <Textarea
                            placeholder='CSV 데이터를 입력하세요...'
                            value={csv}
                            onChange={(e) => setCsv(e.target.value)}
                            className='min-h-[250px] font-mono'
                        />
                        <Button onClick={convertCsvToJson} className='w-full mt-4'>
                            JSON으로 변환 →
                        </Button>
                    </CardContent>
                </Card>
                <Card>
                    <CardContent className='p-6'>
                        <h2 className='text-lg font-semibold mb-2'>JSON</h2>
                        <Textarea
                            placeholder='JSON 데이터를 입력하세요...'
                            value={json}
                            onChange={(e) => setJson(e.target.value)}
                            className='min-h-[250px] font-mono'
                        />
                        <Button onClick={convertJsonToCsv} className='w-full mt-4'>
                            ← CSV로 변환
                        </Button>
                    </CardContent>
                </Card>
            </div>
            {error && (
                <Card className='border-destructive'>
                    <CardContent className='p-4 text-destructive'>{error}</CardContent>
                </Card>
            )}
        </div>
    );
}
</file>

<file path="app/(main)/text/diff-checker/layout.tsx">
export default function TextDiffLayout({ children }: { children: React.ReactNode }) {
    return <div className='flex flex-col items-center justify-center min-h-screen py-2'>{children}</div>;
}
</file>

<file path="app/(main)/text/diff-checker/page.tsx">
'use client';

import React, { useState } from 'react';

export default function TextDiffPage() {
    const [originalText, setOriginalText] = useState('');
    const [newText, setNewText] = useState('');
    const [diffOutput, setDiffOutput] = useState<string[]>([]);

    const compareTexts = () => {
        const originalLines = originalText.split('\n');
        const newLines = newText.split('\n');

        const diffResult: string[] = [];

        // Simple line-by-line comparison
        let i = 0,
            j = 0;
        while (i < originalLines.length || j < newLines.length) {
            if (i < originalLines.length && j < newLines.length) {
                if (originalLines[i] === newLines[j]) {
                    diffResult.push(`  ${originalLines[i]}`); // Unchanged
                    i++;
                    j++;
                } else {
                    // Look ahead to find matches and determine if it's an addition or deletion
                    let originalFound = false;
                    for (let k = j; k < newLines.length; k++) {
                        if (originalLines[i] === newLines[k]) {
                            originalFound = true;
                            break;
                        }
                    }

                    let newFound = false;
                    for (let k = i; k < originalLines.length; k++) {
                        if (newLines[j] === originalLines[k]) {
                            newFound = true;
                            break;
                        }
                    }

                    if (!originalFound && newFound) {
                        diffResult.push(`- ${originalLines[i]}`); // Deletion
                        i++;
                    } else if (originalFound && !newFound) {
                        diffResult.push(`+ ${newLines[j]}`); // Addition
                        j++;
                    } else {
                        // No clear match, treat as both deletion and addition
                        diffResult.push(`- ${originalLines[i]}`); // Deletion
                        diffResult.push(`+ ${newLines[j]}`); // Addition
                        i++;
                        j++;
                    }
                }
            } else if (i < originalLines.length) {
                diffResult.push(`- ${originalLines[i]}`); // Remaining deletions
                i++;
            } else if (j < newLines.length) {
                diffResult.push(`+ ${newLines[j]}`); // Remaining additions
                j++;
            }
        }
        setDiffOutput(diffResult);
    };

    return (
        <div className='flex flex-col items-center justify-center min-h-screen py-2'>
            <h1 className='text-4xl font-bold mb-8'>Text Diff Tool</h1>
            <div className='flex w-full max-w-6xl space-x-4'>
                <div className='flex flex-col flex-1'>
                    <h2 className='text-2xl font-semibold mb-4'>Original Text</h2>
                    <textarea
                        className='w-full h-96 p-2 border rounded-md resize-none font-mono text-sm'
                        placeholder='Enter original text here...'
                        value={originalText}
                        onChange={(e) => setOriginalText(e.target.value)}
                    ></textarea>
                </div>
                <div className='flex flex-col flex-1'>
                    <h2 className='text-2xl font-semibold mb-4'>New Text</h2>
                    <textarea
                        className='w-full h-96 p-2 border rounded-md resize-none font-mono text-sm'
                        placeholder='Enter new text here...'
                        value={newText}
                        onChange={(e) => setNewText(e.target.value)}
                    ></textarea>
                </div>
            </div>
            <button
                className='mt-8 px-6 py-3 bg-blue-500 text-white rounded-md hover:bg-blue-600 text-xl font-semibold'
                onClick={compareTexts}
            >
                Compare Texts
            </button>
            {diffOutput.length > 0 && (
                <div className='mt-8 w-full max-w-6xl bg-gray-100 p-4 rounded-md font-mono text-sm overflow-auto max-h-[500px]'>
                    <h2 className='text-2xl font-semibold mb-4'>Diff Result</h2>
                    <pre>
                        {diffOutput.map((line, index) => (
                            <p
                                key={index}
                                className={`
                                ${line.startsWith('+') ? 'text-green-700 bg-green-100' : ''}
                                ${line.startsWith('-') ? 'text-red-700 bg-red-100' : ''}
                            `}
                            >
                                {line}
                            </p>
                        ))}
                    </pre>
                </div>
            )}
        </div>
    );
}
</file>

<file path="app/(main)/text/json-formatter/layout.tsx">
export default function JsonLayout({ children }: { children: React.ReactNode }) {
    return <div className='flex flex-col items-center justify-center min-h-screen py-2'>{children}</div>;
}
</file>

<file path="app/(main)/text/json-formatter/page.tsx">
'use client';

import React, { useState } from 'react';

export default function JsonPage() {
    const [jsonInput, setJsonInput] = useState('');
    const [jsonOutput, setJsonOutput] = useState('');
    const [error, setError] = useState('');

    const formatJson = () => {
        try {
            const parsedJson = JSON.parse(jsonInput);
            setJsonOutput(JSON.stringify(parsedJson, null, 4));
            setError('');
        } catch (e: unknown) {
            setError(e instanceof Error ? e.message : String(e));
            setJsonOutput('');
        }
    };

    return (
        <div className='flex flex-col items-center justify-center min-h-screen py-2'>
            <h1 className='text-4xl font-bold mb-8'>JSON Formatter</h1>
            <div className='flex w-full max-w-4xl space-x-4'>
                <div className='flex flex-col flex-1'>
                    <textarea
                        className='w-full h-96 p-2 border rounded-md resize-none'
                        placeholder='Enter JSON here...'
                        value={jsonInput}
                        onChange={(e) => setJsonInput(e.target.value)}
                    ></textarea>
                    <button
                        className='mt-4 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600'
                        onClick={formatJson}
                    >
                        Format JSON
                    </button>
                </div>
                <div className='flex flex-col flex-1'>
                    <textarea
                        className='w-full h-96 p-2 border rounded-md bg-gray-100 resize-none'
                        readOnly
                        value={jsonOutput}
                    ></textarea>
                    {error && <p className='text-red-500 mt-2'>{error}</p>}
                </div>
            </div>
        </div>
    );
}
</file>

<file path="app/(main)/text/layout.tsx">
// 파일 경로: app/(main)/text/layout.tsx

'use client';

import { Button } from '@/components/ui/button';
import { allTools } from '@/app/data/integrations';
import { ArrowLeft } from 'lucide-react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { useMemo } from 'react';

export default function TextToolLayout({ children }: { children: React.ReactNode }) {
    const pathname = usePathname();

    const currentTool = useMemo(() => {
        const toolId = pathname.split('/').pop();
        return allTools.find((tool) => tool.id === toolId);
    }, [pathname]);

    const Icon = currentTool?.icon;

    return (
        <div className="container mx-auto px-4 py-8">
            {currentTool && Icon && (
                <div className="flex justify-between items-center mb-8">
                    <div className="flex items-center gap-3">
                        <div
                            className="w-12 h-12 rounded-full flex items-center justify-center"
                            style={{ backgroundColor: `${currentTool.color}20` }}
                        >
                            <Icon className="w-6 h-6" style={{ color: currentTool.color }} />
                        </div>
                        <h1 className="text-3xl font-bold">{currentTool.name}</h1>
                    </div>

                    <Link href="/" passHref>
                        <Button variant="outline">
                            <ArrowLeft className="mr-2 h-4 w-4" />
                            모든 도구 보기
                        </Button>
                    </Link>
                </div>
            )}

            {children}
        </div>
    );
}
</file>

<file path="app/(main)/text/markdown-editor/ClientMarkdownEditor.tsx">
'use client';

import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent } from '@/components/ui/card';
import { useState, useMemo } from 'react';
import { marked } from 'marked';

export default function ClientMarkdownEditor() {
    const [markdown, setMarkdown] = useState('# 안녕하세요!\n\n이곳에 마크다운을 작성해보세요.');

    const renderedHtml = useMemo(() => {
        try {
            return marked.parse(markdown) as string;
        } catch {
            return '<p><strong>marked</strong> 라이브러리를 설치해주세요: <code>npm install marked</code></p>';
        }
    }, [markdown]);

    return (
        <div className='grid grid-cols-1 md:grid-cols-2 gap-8 h-[calc(100vh-200px)]'>
            <div className='flex flex-col'>
                <h2 className='text-lg font-semibold mb-2'>Markdown 입력</h2>
                <Textarea
                    placeholder='마크다운을 입력하세요...'
                    value={markdown}
                    onChange={(e) => setMarkdown(e.target.value)}
                    className='flex-grow font-mono resize-none'
                />
            </div>
            <div className='flex flex-col'>
                <h2 className='text-lg font-semibold mb-2'>미리보기</h2>
                <Card className='flex-grow overflow-auto'>
                    <CardContent className='p-6'>
                        <div
                            className='prose dark:prose-invert max-w-none'
                            dangerouslySetInnerHTML={{ __html: renderedHtml }}
                        />
                    </CardContent>
                </Card>
            </div>
        </div>
    );
}
</file>

<file path="app/(main)/text/regex-tester/page.tsx">
'use client';

import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent } from '@/components/ui/card';
import { useState, useMemo } from 'react';

export default function RegexTesterTool() {
    const [regexStr, setRegexStr] = useState('');
    const [testStr, setTestStr] = useState('');
    const [flags, setFlags] = useState('g');

    const { highlightedText, matchCount, error } = useMemo(() => {
        if (!regexStr) {
            return { highlightedText: testStr, matchCount: 0, error: null };
        }

        try {
            const regex = new RegExp(regexStr, flags);
            let count = 0;
            const highlighted = testStr.replace(regex, (match) => {
                count++;
                return `<mark>${match}</mark>`;
            });
            return { highlightedText: highlighted, matchCount: count, error: null };
        } catch (e) {
            // --- 수정: 'any' 타입 대신 'unknown' 또는 'Error' 타입으로 처리 ---
            const errorMessage = e instanceof Error ? e.message : String(e);
            return { highlightedText: testStr, matchCount: 0, error: errorMessage };
        }
    }, [regexStr, testStr, flags]);

    return (
        <div className="space-y-6">
            <Card>
                <CardContent className="p-6">
                    <h2 className="text-lg font-semibold mb-2">정규표현식</h2>
                    <div className="flex items-center gap-2">
                        <span className="font-mono text-muted-foreground">/</span>
                        <Input
                            placeholder="표현식을 입력하세요"
                            value={regexStr}
                            onChange={(e) => setRegexStr(e.target.value)}
                            className="font-mono flex-1"
                        />
                        <span className="font-mono text-muted-foreground">/</span>
                        <Input
                            placeholder="flags (g, i, m)"
                            value={flags}
                            onChange={(e) => setFlags(e.target.value)}
                            className="font-mono w-24"
                        />
                    </div>
                    {error && <p className="text-sm text-destructive mt-2">{error}</p>}
                </CardContent>
            </Card>

            <Card>
                <CardContent className="p-6">
                    <h2 className="text-lg font-semibold mb-2">테스트 문자열</h2>
                    <Textarea
                        placeholder="정규표현식을 테스트할 문자열을 입력하세요..."
                        value={testStr}
                        onChange={(e) => setTestStr(e.target.value)}
                        className="min-h-[200px] font-mono"
                    />
                </CardContent>
            </Card>

            <Card>
                <CardContent className="p-6">
                    <h2 className="text-lg font-semibold mb-2">결과 ({matchCount}개 일치)</h2>
                    <div
                        className="p-4 rounded-md bg-secondary min-h-[150px] font-mono text-sm whitespace-pre-wrap"
                        dangerouslySetInnerHTML={{ __html: highlightedText.replace(/\n/g, '<br />') }}
                    />
                </CardContent>
            </Card>
        </div>
    );
}
</file>

<file path="app/api/diff/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { processDiff } from '@/lib/tools/diff';
import { DiffToolInput } from '@/lib/types/tools';

export async function POST(req: NextRequest) {
    try {
        const { originalText, newText, diffType } = await req.json();

        if (typeof originalText !== 'string' || typeof newText !== 'string') {
            return NextResponse.json(
                { error: 'Invalid input: originalText and newText must be strings.' },
                { status: 400 }
            );
        }

        if (!['chars', 'words', 'lines'].includes(diffType)) {
            return NextResponse.json(
                { error: "Invalid diffType. Must be 'chars', 'words', or 'lines'." },
                { status: 400 }
            );
        }

        const input: DiffToolInput = { originalText, newText };
        const result = processDiff(input, diffType);

        return NextResponse.json(result);
    } catch (error: unknown) {
        return NextResponse.json(
            { error: error instanceof Error ? error.message : 'An unknown error occurred during diff processing.' },
            { status: 500 }
        );
    }
}
</file>

<file path="app/data/conversion-tools.ts">
import { Clock, Palette } from 'lucide-react';
import type { Integration } from './types';

export const conversionTools: Integration[] = [
    {
        id: 'timestamp-converter',
        name: '타임스탬프 변환기',
        description: 'UTC 타임스탬프를 읽기 쉬운 날짜와 시간으로 변환합니다.',
        category: '시간/날짜',
        icon: Clock,
        color: '#607D8B',
    },
    {
        id: 'color-converter',
        name: '색상 변환기',
        description: 'RGB, HEX, HSL 등 다양한 색상 형식 간 변환을 수행합니다.',
        category: '색상',
        icon: Palette,
        color: '#FF5722',
    },
];
</file>

<file path="app/HomePageClient.tsx">
'use client';

import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useEffect, useMemo, useState } from 'react';
import type { Integration } from './data/types';
import { useRouter } from 'next/navigation';
import { allTools } from './data/integrations';
import FeaturedIntegrations from '@/app/(main)/integrations/components/FeaturedIntegrations';
import IntegrationGrid from '@/app/(main)/integrations/components/IntegrationGrid';
import Pagination from '@/app/(main)/integrations/components/Pagination';
import SearchBar from '@/app/(main)/integrations/components/SearchBar';
import SortOptions from '@/app/(main)/integrations/components/SortOptions';
import { Menu } from 'lucide-react';
import { Button } from '@/components/ui/button';
import dynamic from 'next/dynamic';
import { useSidebar } from '@/lib/context/SidebarContext';

const MotionH1 = dynamic(() => import('framer-motion').then((mod) => mod.motion.h1), { ssr: false });
const MotionDiv = dynamic(() => import('framer-motion').then((mod) => mod.motion.div), { ssr: false });

const getPathForCategory = (category: string) => {
    switch (category) {
        case '텍스트 처리':
            return 'text';
        case '보안/암호화':
            return 'security';
        default:
            return 'encoding';
    }
};

const ITEMS_PER_PAGE = 30;

const sortOptions = [
    { value: 'name-asc', label: 'Name (A-Z)' },
    { value: 'name-desc', label: 'Name (Z-A)' },
    { value: 'category', label: 'Category' },
];

export default function HomePageClient() {
    const router = useRouter();
    const [searchQuery, setSearchQuery] = useState('');
    const [currentPage, setCurrentPage] = useState(1);
    const [sortOption, setSortOption] = useState('name-asc');
    const [favorites, setFavorites] = useState<string[]>([]);
    const { setSidebarOpen } = useSidebar();

    useEffect(() => {
        const savedFavorites = localStorage.getItem('favoriteIntegrations');
        if (savedFavorites) {
            setFavorites(JSON.parse(savedFavorites));
        }
    }, []);

    useEffect(() => {
        localStorage.setItem('favoriteIntegrations', JSON.stringify(favorites));
    }, [favorites]);

    const toggleFavorite = (id: string) => {
        setFavorites((prev) => {
            if (prev.includes(id)) {
                return prev.filter((favId) => favId !== id);
            } else {
                return [...prev, id];
            }
        });
    };

    const sortedAndFilteredTools = useMemo(() => {
        const filtered = allTools.filter((integration) => {
            const searchMatch =
                integration.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                integration.description.toLowerCase().includes(searchQuery.toLowerCase());
            return searchMatch;
        });

        return filtered.sort((a, b) => {
            switch (sortOption) {
                case 'name-asc':
                    return a.name.localeCompare(b.name);
                case 'name-desc':
                    return b.name.localeCompare(a.name);
                case 'category':
                    return a.category.localeCompare(b.category);
                default:
                    return 0;
            }
        });
    }, [searchQuery, sortOption]);

    const favoriteIntegrations = useMemo(() => {
        return allTools.filter((integration) => favorites.includes(integration.id));
    }, [favorites]);

    const totalPages = Math.ceil(sortedAndFilteredTools.length / ITEMS_PER_PAGE);
    const paginatedIntegrations = sortedAndFilteredTools.slice(
        (currentPage - 1) * ITEMS_PER_PAGE,
        currentPage * ITEMS_PER_PAGE
    );

    const handleSelectIntegration = (integration: Integration) => {
        const path = `/${getPathForCategory(integration.category)}/${integration.id}`;
        router.push(path);
    };

    return (
        <div className='flex h-screen bg-gray-100 overflow-hidden'>
            <main className='flex-1 flex flex-col overflow-y-auto'>
                <div className='flex-1 p-4 md:p-6 space-y-4'>
                    <header className='flex items-center gap-4'>
                        <Button
                            variant='outline'
                            size='icon'
                            className='md:hidden'
                            onClick={() => setSidebarOpen(true)}
                        >
                            <Menu className='h-5 w-5' />
                        </Button>
                        <MotionH1
                            className='text-2xl font-bold'
                            initial={{ opacity: 0, y: -20 }}
                            animate={{ opacity: 1, y: 0 }}
                            transition={{ duration: 0.5 }}
                        >
                            Integrations & Tools
                        </MotionH1>
                    </header>

                    <MotionDiv
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        transition={{ delay: 0.2, duration: 0.5 }}
                    >
                        <FeaturedIntegrations integrations={allTools.slice(0, 10)} onSelect={handleSelectIntegration} />
                    </MotionDiv>

                    <div className='flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4'>
                        <SearchBar
                            onSearch={(query) => {
                                setSearchQuery(query);
                                setCurrentPage(1);
                            }}
                        />
                        <div className='flex items-center gap-4'>
                            <SortOptions
                                options={sortOptions}
                                selectedOption={sortOption}
                                onSelectOption={setSortOption}
                            />
                        </div>
                    </div>

                    <Tabs defaultValue='all' className='w-full'>
                        <TabsList>
                            <TabsTrigger value='all'>All Items</TabsTrigger>
                            <TabsTrigger value='favorites'>Favorites ({favoriteIntegrations.length})</TabsTrigger>
                        </TabsList>
                        <TabsContent value='all' className='mt-4'>
                            <div className='overflow-auto'>
                                <IntegrationGrid
                                    integrations={paginatedIntegrations}
                                    onSelectIntegration={handleSelectIntegration}
                                    favorites={favorites}
                                    onToggleFavorite={toggleFavorite}
                                />
                                <div className='mt-6'>
                                    <Pagination
                                        currentPage={currentPage}
                                        totalPages={totalPages}
                                        onPageChange={setCurrentPage}
                                    />
                                </div>
                            </div>
                        </TabsContent>
                        <TabsContent value='favorites' className='mt-4'>
                            {favoriteIntegrations.length > 0 ? (
                                <IntegrationGrid
                                    integrations={favoriteIntegrations}
                                    onSelectIntegration={handleSelectIntegration}
                                    favorites={favorites}
                                    onToggleFavorite={toggleFavorite}
                                />
                            ) : (
                                <div className='text-center py-10'>
                                    <p className='text-gray-500'>No favorite items yet.</p>
                                    <p className='text-sm text-gray-400 mt-2'>
                                        Click the heart icon on any item to add it to your favorites.
                                    </p>
                                </div>
                            )}
                        </TabsContent>
                    </Tabs>
                </div>
            </main>
        </div>
    );
}
</file>

<file path="app/types/base32.d.ts">
declare module 'base32' {
  export function encode(input: string): string;
  export function decode(input: string): string;
}
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="components/command-palette/CommandPalette.tsx">
import React, { useCallback, useEffect, useState } from 'react';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { useRouter } from 'next/navigation';

interface CommandPaletteProps {
    isOpen: boolean;
    onClose: () => void;
    togglePalette: () => void;
}

const CommandPalette: React.FC<CommandPaletteProps> = ({ isOpen, onClose, togglePalette }) => {
    const [searchTerm, setSearchTerm] = useState('');
    const router = useRouter();
    // Dummy list of tools for now
    const tools = [
        { id: 'json', name: 'JSON Formatter' },
        { id: 'encode', name: 'Encode / Decode Tool' },
        { id: 'timestamp', name: 'Timestamp Converter' },
        { id: 'color', name: 'Color Converter' },
        { id: 'diff', name: 'Text Diff Tool' },
    ];

    const filteredTools = tools.filter((tool) => tool.name.toLowerCase().includes(searchTerm.toLowerCase()));

    const handleToolSelect = (toolId: string) => {
        router.push(`/(main)/tools/${toolId}`);
        onClose();
    };

    const handleKeyDown = useCallback(
        (event: KeyboardEvent) => {
            if ((event.metaKey || event.ctrlKey) && event.key === 'k') {
                event.preventDefault();
                togglePalette();
            }
        },
        [togglePalette]
    );

    useEffect(() => {
        document.addEventListener('keydown', handleKeyDown);
        return () => {
            document.removeEventListener('keydown', handleKeyDown);
        };
    }, [handleKeyDown]);

    return (
        <Dialog open={isOpen} onOpenChange={onClose}>
            <DialogContent className='sm:max-w-[425px]'>
                <DialogHeader>
                    <DialogTitle>Command Palette</DialogTitle>
                    <DialogDescription>Search for a tool or action.</DialogDescription>
                </DialogHeader>
                <Input
                    placeholder='Search tools...'
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className='col-span-3'
                />
                <div className='grid gap-4 py-4'>
                    {filteredTools.length > 0 ? (
                        filteredTools.map((tool) => (
                            <div
                                key={tool.id}
                                className='p-2 border rounded-md cursor-pointer hover:bg-muted'
                                onClick={() => handleToolSelect(tool.id)}
                            >
                                {tool.name}
                            </div>
                        ))
                    ) : (
                        <p className='text-center text-muted-foreground'>No tools found.</p>
                    )}
                </div>
            </DialogContent>
        </Dialog>
    );
};

export default CommandPalette;
</file>

<file path="components/tools/ColorTool.tsx">
import React, { useState } from 'react';
import { ColorToolInput, ColorToolOutput } from '@/lib/types/tools';
import { processColor } from '@/lib/tools/color';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';

const ColorTool: React.FC = () => {
    const [colorInput, setColorInput] = useState<string>('');
    const [colorOutput, setColorOutput] = useState<ColorToolOutput | null>(null);

    const handleProcess = () => {
        const input: ColorToolInput = { color: colorInput };
        const result = processColor(input);
        setColorOutput(result);
    };

    return (
        <div className='flex flex-col space-y-4 p-4'>
            <h2 className='text-2xl font-bold'>Color Converter</h2>

            <Input
                placeholder='Enter color (e.g., #RRGGBB, rgb(R,G,B), hsl(H,S,L))...'
                value={colorInput}
                onChange={(e) => setColorInput(e.target.value)}
            />

            <Button onClick={handleProcess}>Convert Color</Button>

            {colorOutput && (
                <div className='border p-4 rounded-md bg-card text-card-foreground'>
                    {colorOutput.errorMessage ? (
                        <div className='text-destructive'>
                            <h3 className='font-semibold'>Error:</h3>
                            <p>{colorOutput.errorMessage}</p>
                        </div>
                    ) : (
                        <div className='space-y-2'>
                            <p>
                                <strong>Hex:</strong> {colorOutput.hex}
                            </p>
                            <p>
                                <strong>RGB:</strong> {colorOutput.rgb}
                            </p>
                            <p>
                                <strong>HSL:</strong> {colorOutput.hsl}
                            </p>
                            {colorOutput.hex && (
                                <div
                                    className='w-full h-10 rounded-md mt-4 border'
                                    style={{ backgroundColor: colorOutput.hex }}
                                ></div>
                            )}
                        </div>
                    )}
                </div>
            )}
        </div>
    );
};

export default ColorTool;
</file>

<file path="components/tools/DiffTool.tsx">
import React, { useState } from 'react';
import { DiffToolOutput } from '@/lib/types/tools';
// import { processDiff } from '@/lib/tools/diff'; // Removed local processing
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

const DiffTool: React.FC = () => {
    const [originalText, setOriginalText] = useState<string>('');
    const [newText, setNewText] = useState<string>('');
    const [diffType, setDiffType] = useState<'chars' | 'words' | 'lines'>('lines');
    const [diffOutput, setDiffOutput] = useState<DiffToolOutput | null>(null);
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);

    const handleProcess = async () => {
        setIsLoading(true);
        setError(null);
        setDiffOutput(null);

        try {
            const response = await fetch('/api/diff', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ originalText, newText, diffType }),
            });

            const data: DiffToolOutput = await response.json();

            if (!response.ok) {
                throw new Error(data.errorMessage || 'Failed to process diff.');
            }

            setDiffOutput(data);
        } catch (err: unknown) {
            setError(err instanceof Error ? err.message : 'An unknown error occurred.');
            setDiffOutput({
                diffResult: '',
                errorMessage: err instanceof Error ? err.message : 'An unknown error occurred.',
            });
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className='flex flex-col space-y-4 p-4'>
            <h2 className='text-2xl font-bold'>Text Diff Tool</h2>

            <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>
                <Textarea
                    placeholder='Enter original text...'
                    value={originalText}
                    onChange={(e) => setOriginalText(e.target.value)}
                    className='min-h-[150px]'
                />
                <Textarea
                    placeholder='Enter new text...'
                    value={newText}
                    onChange={(e) => setNewText(e.target.value)}
                    className='min-h-[150px]'
                />
            </div>

            <Select onValueChange={(value: 'chars' | 'words' | 'lines') => setDiffType(value)} defaultValue={diffType}>
                <SelectTrigger className='w-[180px]'>
                    <SelectValue placeholder='Select diff type' />
                </SelectTrigger>
                <SelectContent>
                    <SelectItem value='lines'>Lines</SelectItem>
                    <SelectItem value='words'>Words</SelectItem>
                    <SelectItem value='chars'>Characters</SelectItem>
                </SelectContent>
            </Select>

            <Button onClick={handleProcess} disabled={isLoading}>
                {isLoading ? 'Processing...' : 'Generate Diff'}
            </Button>

            {error && (
                <div className='border p-4 rounded-md bg-destructive text-destructive-foreground'>
                    <h3 className='font-semibold'>Error:</h3>
                    <p>{error}</p>
                </div>
            )}

            {diffOutput && !error && (
                <div className='border p-4 rounded-md bg-card text-card-foreground'>
                    <div dangerouslySetInnerHTML={{ __html: diffOutput.diffResult }} />
                </div>
            )}
        </div>
    );
};

export default DiffTool;
</file>

<file path="components/tools/EncodeTool.tsx">
import React, { useState } from 'react';
import { EncodeToolInput, DecodeToolInput } from '@/lib/types/tools';
import { processEncode, processDecode } from '@/lib/tools/encode';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

const EncodeTool: React.FC = () => {
    const [inputText, setInputText] = useState<string>('');
    const [outputText, setOutputText] = useState<string>('');
    const [encodingType, setEncodingType] = useState<'base64' | 'url' | 'html'>('base64');
    const [isEncoding, setIsEncoding] = useState<boolean>(true);

    const handleProcess = () => {
        if (isEncoding) {
            const input: EncodeToolInput = { text: inputText, encodingType };
            const result = processEncode(input);
            setOutputText(result.encodedText || result.errorMessage || '');
        } else {
            const input: DecodeToolInput = { text: inputText, encodingType };
            const result = processDecode(input);
            setOutputText(result.decodedText || result.errorMessage || '');
        }
    };

    return (
        <div className='flex flex-col space-y-4 p-4'>
            <h2 className='text-2xl font-bold'>Encode / Decode Tool</h2>

            <div className='flex space-x-4'>
                <Button onClick={() => setIsEncoding(true)} variant={isEncoding ? 'default' : 'outline'}>
                    Encode
                </Button>
                <Button onClick={() => setIsEncoding(false)} variant={!isEncoding ? 'default' : 'outline'}>
                    Decode
                </Button>
            </div>

            <Select
                onValueChange={(value: 'base64' | 'url' | 'html') => setEncodingType(value)}
                defaultValue={encodingType}
            >
                <SelectTrigger className='w-[180px]'>
                    <SelectValue placeholder='Select type' />
                </SelectTrigger>
                <SelectContent>
                    <SelectItem value='base64'>Base64</SelectItem>
                    <SelectItem value='url'>URL</SelectItem>
                    <SelectItem value='html'>HTML</SelectItem>
                </SelectContent>
            </Select>

            <Textarea
                placeholder='Enter text here...'
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                className='min-h-[200px]'
            />
            <Button onClick={handleProcess}>{isEncoding ? 'Encode' : 'Decode'}</Button>
            <Textarea placeholder='Result...' value={outputText} readOnly className='min-h-[200px] bg-muted/50' />
        </div>
    );
};

export default EncodeTool;
</file>

<file path="components/tools/JsonTool.tsx">
import React, { useState } from 'react';
import { JsonToolInput, JsonToolOutput, JsonToolOptions } from '@/lib/types/tools';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { processJson } from '@/lib/tools/json';

const JsonTool: React.FC = () => {
    const [jsonInput, setJsonInput] = useState<string>('');
    const [jsonOutput, setJsonOutput] = useState<JsonToolOutput | null>(null);

    const handleProcess = () => {
        try {
            const parsedInput: JsonToolInput = { jsonString: jsonInput };
            const options: JsonToolOptions = { indentation: 2, minify: false, sortKeys: false };
            const result = processJson(parsedInput, options);
            setJsonOutput(result);
        } catch (error: unknown) {
            setJsonOutput({
                formattedJson: '',
                isValid: false,
                errorMessage: error instanceof Error ? error.message : 'An unknown error occurred.',
            });
        }
    };

    return (
        <div className='flex flex-col space-y-4 p-4'>
            <h2 className='text-2xl font-bold'>JSON Formatter & Validator</h2>
            <Textarea
                placeholder='Enter JSON here...'
                value={jsonInput}
                onChange={(e) => setJsonInput(e.target.value)}
                className='min-h-[200px]'
            />
            <Button onClick={handleProcess}>Process JSON</Button>
            {jsonOutput && (
                <div className='border p-4 rounded-md bg-card text-card-foreground'>
                    {jsonOutput.isValid ? (
                        <pre className='whitespace-pre-wrap break-all'>{jsonOutput.formattedJson}</pre>
                    ) : (
                        <div className='text-destructive'>
                            <h3 className='font-semibold'>Error:</h3>
                            <p>{jsonOutput.errorMessage || 'Invalid JSON'}</p>
                        </div>
                    )}
                </div>
            )}
        </div>
    );
};

export default JsonTool;
</file>

<file path="components/tools/TimestampTool.tsx">
import React, { useState } from 'react';
import { TimestampToolInput, TimestampToolOptions, TimestampToolOutput } from '@/lib/types/tools';
import { processTimestamp } from '@/lib/tools/timestamp';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

const TimestampTool: React.FC = () => {
    const [timestampInput, setTimestampInput] = useState<string>('');
    const [format, setFormat] = useState<string>('YYYY-MM-DD HH:mm:ss');
    const [timezone, setTimezone] = useState<string>('Asia/Seoul');
    const [timestampOutput, setTimestampOutput] = useState<TimestampToolOutput | null>(null);

    const handleProcess = () => {
        const input: TimestampToolInput = { timestamp: timestampInput };
        const options: TimestampToolOptions = { format, timezone };
        const result = processTimestamp(input, options);
        setTimestampOutput(result);
    };

    // Example timezones - a real app would have a more comprehensive list
    const timezones = [
        { label: 'Seoul', value: 'Asia/Seoul' },
        { label: 'New York', value: 'America/New_York' },
        { label: 'London', value: 'Europe/London' },
        { label: 'UTC', value: 'UTC' },
    ];

    // Example formats - a real app would have more options
    const formats = [
        { label: 'YYYY-MM-DD HH:mm:ss', value: 'YYYY-MM-DD HH:mm:ss' },
        { label: 'MM/DD/YYYY h:mm:ss A', value: 'MM/DD/YYYY h:mm:ss A' },
        { label: 'Unix Timestamp', value: 'X' }, // Unix timestamp (seconds)
        { label: 'Unix Millisecond Timestamp', value: 'x' }, // Unix timestamp (milliseconds)
    ];

    return (
        <div className='flex flex-col space-y-4 p-4'>
            <h2 className='text-2xl font-bold'>Timestamp Converter</h2>

            <Textarea
                placeholder='Enter timestamp or date string...'
                value={timestampInput}
                onChange={(e) => setTimestampInput(e.target.value)}
                className='min-h-[100px]'
            />

            <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>
                <Select onValueChange={setFormat} defaultValue={format}>
                    <SelectTrigger>
                        <SelectValue placeholder='Select format' />
                    </SelectTrigger>
                    <SelectContent>
                        {formats.map((f) => (
                            <SelectItem key={f.value} value={f.value}>
                                {f.label}
                            </SelectItem>
                        ))}
                    </SelectContent>
                </Select>

                <Select onValueChange={setTimezone} defaultValue={timezone}>
                    <SelectTrigger>
                        <SelectValue placeholder='Select timezone' />
                    </SelectTrigger>
                    <SelectContent>
                        {timezones.map((tz) => (
                            <SelectItem key={tz.value} value={tz.value}>
                                {tz.label}
                            </SelectItem>
                        ))}
                    </SelectContent>
                </Select>
            </div>

            <Button onClick={handleProcess}>Convert Timestamp</Button>

            {timestampOutput && (
                <div className='border p-4 rounded-md bg-card text-card-foreground'>
                    {timestampOutput.errorMessage ? (
                        <div className='text-destructive'>
                            <h3 className='font-semibold'>Error:</h3>
                            <p>{timestampOutput.errorMessage}</p>
                        </div>
                    ) : (
                        <>
                            <p>
                                <strong>Human Readable:</strong> {timestampOutput.humanReadableDate}
                            </p>
                            <p>
                                <strong>Unix Timestamp:</strong> {timestampOutput.unixTimestamp}
                            </p>
                        </>
                    )}
                </div>
            )}
        </div>
    );
};

export default TimestampTool;
</file>

<file path="components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }
</file>

<file path="components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}
</file>

<file path="components/ui/checkbox.tsx">
// 파일: components/ui/checkbox.tsx (새 파일)

'use client';

import * as React from 'react';
import * as CheckboxPrimitive from '@radix-ui/react-checkbox';
import { Check } from 'lucide-react';

import { cn } from '@/lib/utils';

const Checkbox = React.forwardRef<
    React.ElementRef<typeof CheckboxPrimitive.Root>,
    React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
    <CheckboxPrimitive.Root
        ref={ref}
        className={cn(
            'peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',
            className
        )}
        {...props}
    >
        <CheckboxPrimitive.Indicator className={cn('flex items-center justify-center text-current')}>
            <Check className="h-4 w-4" />
        </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;

export { Checkbox };
</file>

<file path="components/ui/dialog.tsx">
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  showCloseButton = true,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content> & {
  showCloseButton?: boolean
}) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        {showCloseButton && (
          <DialogPrimitive.Close
            data-slot="dialog-close"
            className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4"
          >
            <XIcon />
            <span className="sr-only">Close</span>
          </DialogPrimitive.Close>
        )}
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}
</file>

<file path="components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }
</file>

<file path="components/ui/label.tsx">
// 파일 경로: components/ui/label.tsx

'use client';

import * as React from 'react';
import * as LabelPrimitive from '@radix-ui/react-label';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from '@/lib/utils';

const labelVariants = cva('text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70');

const Label = React.forwardRef<
    React.ElementRef<typeof LabelPrimitive.Root>,
    React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> & VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
    <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };
</file>

<file path="components/ui/select.tsx">
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default"
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  )
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}
</file>

<file path="components/ui/tabs.tsx">
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="components/ui/textarea.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}

export { Textarea }
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="lib/store/settingsStore.ts">
import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';

interface SettingsState {
    theme: 'light' | 'dark';
    fontSize: 'sm' | 'md' | 'lg';
    dateFormat: 'YYYY-MM-DD' | 'MM/DD/YYYY';
    jsonIndentation: number | 'tab';
    toggleTheme: (theme?: 'light' | 'dark') => void;
    setFontSize: (size: 'sm' | 'md' | 'lg') => void;
    setDateFormat: (format: 'YYYY-MM-DD' | 'MM/DD/YYYY') => void;
    setJsonIndentation: (indentation: number | 'tab') => void;
}

export const useSettingsStore = create<SettingsState>()(
    persist(
        (set) => ({
            theme: 'dark',
            fontSize: 'md',
            dateFormat: 'YYYY-MM-DD',
            jsonIndentation: 2,
            toggleTheme: (theme) =>
                set((state) => ({
                    theme: theme || (state.theme === 'dark' ? 'light' : 'dark'),
                })),
            setFontSize: (size) => set({ fontSize: size }),
            setDateFormat: (format) => set({ dateFormat: format }),
            setJsonIndentation: (indentation) => set({ jsonIndentation: indentation }),
        }),
        {
            name: 'user-settings', // unique name
            storage: createJSONStorage(() => localStorage), // (optional) by default the 'localStorage' is used
        }
    )
);
</file>

<file path="lib/store/userStore.ts">
import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';

interface UserState {
    isDarkMode: boolean;
    toggleDarkMode: () => void;
}

export const useUserStore = create<UserState>()(
    persist(
        (set) => ({
            isDarkMode: false,
            toggleDarkMode: () => set((state) => ({ isDarkMode: !state.isDarkMode })),
        }),
        {
            name: 'user-storage', // unique name
            storage: createJSONStorage(() => localStorage), // (optional) by default, 'localStorage' is used
        }
    )
);
</file>

<file path="lib/tools/color.ts">
import { ColorToolInput, ColorToolOutput } from '@/lib/types/tools';

export const processColor = (input: ColorToolInput): ColorToolOutput => {
    try {
        let hex = '';
        let rgb = '';
        let hsl = '';

        const color = input.color.toLowerCase().trim();

        // Helper to convert HSL to RGB
        const hslToRgb = (h: number, s: number, l: number) => {
            s /= 100;
            l /= 100;
            const c = (1 - Math.abs(2 * l - 1)) * s;
            const x = c * (1 - Math.abs(((h / 60) % 2) - 1));
            const m = l - c / 2;
            let r = 0;
            let g = 0;
            let b = 0;

            if (0 <= h && h < 60) {
                r = c;
                g = x;
                b = 0;
            } else if (60 <= h && h < 120) {
                r = x;
                g = c;
                b = 0;
            } else if (120 <= h && h < 180) {
                r = 0;
                g = c;
                b = x;
            } else if (180 <= h && h < 240) {
                r = 0;
                g = x;
                b = c;
            } else if (240 <= h && h < 300) {
                r = x;
                g = 0;
                b = c;
            } else if (300 <= h && h < 360) {
                r = c;
                g = 0;
                b = x;
            }
            r = Math.round((r + m) * 255);
            g = Math.round((g + m) * 255);
            b = Math.round((b + m) * 255);
            return `rgb(${r},${g},${b})`;
        };

        // Helper to convert RGB to HSL
        const rgbToHsl = (r: number, g: number, b: number) => {
            r /= 255;
            g /= 255;
            b /= 255;
            const max = Math.max(r, g, b);
            const min = Math.min(r, g, b);
            let h = 0;
            let s = 0;
            const l = (max + min) / 2;

            if (max === min) {
                h = s = 0; // achromatic
            } else {
                const d = max - min;
                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                switch (max) {
                    case r:
                        h = (g - b) / d + (g < b ? 6 : 0);
                        break;
                    case g:
                        h = (b - r) / d + 2;
                        break;
                    case b:
                        h = (r - g) / d + 4;
                        break;
                }
                h /= 6;
            }

            return `hsl(${Math.round(h * 360)},${Math.round(s * 100)}%,${Math.round(l * 100)}%)`;
        };

        // Helper to convert RGB to Hex
        const rgbToHex = (r: number, g: number, b: number) => {
            return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}`;
        };

        if (color.startsWith('#')) {
            // Hex to RGB/HSL
            const hexValue = color.slice(1);
            const r = parseInt(hexValue.substring(0, 2), 16);
            const g = parseInt(hexValue.substring(2, 4), 16);
            const b = parseInt(hexValue.substring(4, 6), 16);
            hex = color;
            rgb = `rgb(${r},${g},${b})`;
            hsl = rgbToHsl(r, g, b);
        } else if (color.startsWith('rgb(')) {
            // RGB to Hex/HSL
            const matches = color.match(/rgb\((\d+),\s*(\d+),\s*(\d+)\)/);
            if (!matches) throw new Error('Invalid RGB format');
            const r = parseInt(matches[1]);
            const g = parseInt(matches[2]);
            const b = parseInt(matches[3]);
            rgb = color;
            hex = rgbToHex(r, g, b);
            hsl = rgbToHsl(r, g, b);
        } else if (color.startsWith('hsl(')) {
            // HSL to RGB/Hex
            const matches = color.match(/hsl\((\d+),\s*(\d+)%,\s*(\d+)%\)/);
            if (!matches) throw new Error('Invalid HSL format');
            const h = parseInt(matches[1]);
            const s = parseInt(matches[2]);
            const l = parseInt(matches[3]);
            hsl = color;
            rgb = hslToRgb(h, s, l);
            const rgbMatches = rgb.match(/rgb\((\d+),\s*(\d+),\s*(\d+)\)/);
            if (!rgbMatches) throw new Error('Invalid RGB conversion from HSL');
            hex = rgbToHex(parseInt(rgbMatches[1]), parseInt(rgbMatches[2]), parseInt(rgbMatches[3]));
        } else {
            throw new Error('Unsupported color format. Please use Hex, RGB, or HSL.');
        }

        return { hex, rgb, hsl };
    } catch (error: unknown) {
        return {
            hex: '',
            rgb: '',
            hsl: '',
            errorMessage: error instanceof Error ? error.message : 'Color conversion error.',
        };
    }
};
</file>

<file path="lib/tools/diff.ts">
import { DiffToolInput, DiffToolOutput } from '@/lib/types/tools';
import { diffChars, diffLines, diffWords, Change } from 'jsdiff';

export const processDiff = (input: DiffToolInput, type: 'chars' | 'words' | 'lines'): DiffToolOutput => {
    let diffResult = '';
    let changes;

    switch (type) {
        case 'chars':
            changes = diffChars(input.originalText, input.newText);
            break;
        case 'words':
            changes = diffWords(input.originalText, input.newText);
            break;
        case 'lines':
            changes = diffLines(input.originalText, input.newText);
            break;
        default:
            changes = diffLines(input.originalText, input.newText);
    }

    changes.forEach((part: Change) => {
        const color = part.added ? 'green' : part.removed ? 'red' : 'grey';
        diffResult += `<span style="color:${color};">${part.value}</span>`;
    });

    return { diffResult };
};
</file>

<file path="lib/tools/encode.ts">
import { EncodeToolInput, EncodeToolOutput, DecodeToolInput, DecodeToolOutput } from '@/lib/types/tools';

// Function to encode a Unicode string to Base64
const base64EncodeUnicode = (str: string): string => {
    // First, encode the string to UTF-8 bytes
    const utf8Bytes = new TextEncoder().encode(str);
    // Convert the Uint8Array to a binary string suitable for btoa
    const binaryString = String.fromCharCode(...utf8Bytes);
    // Encode the binary string to Base64
    return btoa(binaryString);
};

// Function to decode a Base64 string to Unicode
const base64DecodeUnicode = (base64: string): string => {
    // Decode the Base64 string to a binary string
    const binaryString = atob(base64);
    // Convert the binary string to a Uint8Array
    const utf8Bytes = Uint8Array.from(binaryString, (m) => m.codePointAt(0)!);
    // Decode the Uint8Array to a Unicode string
    return new TextDecoder().decode(utf8Bytes);
};

export const processEncode = (input: EncodeToolInput): EncodeToolOutput => {
    try {
        let encodedText = '';
        switch (input.encodingType) {
            case 'base64':
                encodedText = base64EncodeUnicode(input.text);
                break;
            case 'url':
                encodedText = encodeURIComponent(input.text);
                break;
            case 'html':
                encodedText = input.text
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/"/g, '&quot;')
                    .replace(/'/g, '&#039;');
                break;
            default:
                encodedText = input.text;
        }
        return { encodedText };
    } catch (error: unknown) {
        return { encodedText: '', errorMessage: error instanceof Error ? error.message : 'Encoding error.' };
    }
};

export const processDecode = (input: DecodeToolInput): DecodeToolOutput => {
    try {
        let decodedText = '';
        switch (input.encodingType) {
            case 'base64':
                decodedText = base64DecodeUnicode(input.text);
                break;
            case 'url':
                decodedText = decodeURIComponent(input.text);
                break;
            case 'html':
                const doc = new DOMParser().parseFromString(input.text, 'text/html');
                decodedText = doc.documentElement.textContent || '';
                break;
            default:
                decodedText = input.text;
        }
        return { decodedText };
    } catch (error: unknown) {
        return { decodedText: '', errorMessage: error instanceof Error ? error.message : 'Decoding error.' };
    }
};
</file>

<file path="lib/tools/json.ts">
import { JsonToolInput, JsonToolOptions, JsonToolOutput } from '@/lib/types/tools';

type JsonValue = string | number | boolean | null | JSONObject | JSONArray;
interface JSONObject {
    [key: string]: JsonValue;
}
type JSONArray = JsonValue[];

const sortObjectKeysRecursive = (obj: JsonValue): JsonValue => {
    if (typeof obj !== 'object' || obj === null) {
        return obj;
    }

    if (Array.isArray(obj)) {
        return obj.map(sortObjectKeysRecursive) as JSONArray;
    }

    const sortedKeys = Object.keys(obj).sort();
    const newObj: JSONObject = {};
    for (const key of sortedKeys) {
        newObj[key] = sortObjectKeysRecursive((obj as JSONObject)[key]);
    }
    return newObj;
};

export const processJson = (input: JsonToolInput, options: JsonToolOptions): JsonToolOutput => {
    try {
        let parsed: JsonValue = JSON.parse(input.jsonString);

        if (options.sortKeys) {
            parsed = sortObjectKeysRecursive(parsed);
        }

        let formattedJson = '';

        if (options.minify) {
            formattedJson = JSON.stringify(parsed);
        } else {
            const space = options.indentation === 'tab' ? '\t' : options.indentation;
            formattedJson = JSON.stringify(parsed, null, space);
        }

        return { formattedJson, isValid: true };
    } catch (error: unknown) {
        return {
            formattedJson: '',
            isValid: false,
            errorMessage: error instanceof Error ? error.message : 'Invalid JSON format.',
        };
    }
};
</file>

<file path="lib/tools/timestamp.ts">
import { TimestampToolInput, TimestampToolOptions, TimestampToolOutput } from '@/lib/types/tools';
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';
import timezone from 'dayjs/plugin/timezone';

dayjs.extend(utc);
dayjs.extend(timezone);

export const processTimestamp = (input: TimestampToolInput, options?: TimestampToolOptions): TimestampToolOutput => {
    try {
        let date;
        if (typeof input.timestamp === 'number') {
            date = dayjs.unix(input.timestamp);
        } else {
            date = dayjs(input.timestamp);
        }

        if (!date.isValid()) {
            throw new Error('Invalid timestamp or date string.');
        }

        const format = options?.format || 'YYYY-MM-DD HH:mm:ss';
        const tz = options?.timezone || dayjs.tz.guess();

        const humanReadableDate = date.tz(tz).format(format);
        const unixTimestamp = date.unix();

        return { humanReadableDate, unixTimestamp };
    } catch (error: unknown) {
        return {
            humanReadableDate: '',
            unixTimestamp: 0,
            errorMessage: error instanceof Error ? error.message : 'Timestamp processing error.',
        };
    }
};
</file>

<file path="lib/types/tools.ts">
export interface JsonToolInput {
    jsonString: string;
}

export interface JsonToolOptions {
    indentation: number | 'tab';
    minify: boolean;
    sortKeys: boolean;
}

export interface JsonToolOutput {
    formattedJson: string;
    isValid: boolean;
    errorMessage?: string;
}

export interface EncodeToolInput {
    text: string;
    encodingType: 'base64' | 'url' | 'html';
}

export interface EncodeToolOutput {
    encodedText: string;
    errorMessage?: string;
}

export interface DecodeToolInput {
    text: string;
    encodingType: 'base64' | 'url' | 'html';
}

export interface DecodeToolOutput {
    decodedText: string;
    errorMessage?: string;
}

export interface TimestampToolInput {
    timestamp: number | string; // Unix timestamp or date string
}

export interface TimestampToolOptions {
    format: string; // e.g., 'YYYY-MM-DD HH:mm:ss'
    timezone: string; // e.g., 'Asia/Seoul'
}

export interface TimestampToolOutput {
    humanReadableDate: string;
    unixTimestamp: number;
    errorMessage?: string;
}

export interface ColorToolInput {
    color: string; // e.g., '#FF0000', 'rgb(255,0,0)', 'hsl(0,100%,50%)'
}

export interface ColorToolOutput {
    hex: string;
    rgb: string;
    hsl: string;
    errorMessage?: string;
}

export interface DiffToolInput {
    originalText: string;
    newText: string;
}

export interface DiffToolOutput {
    diffResult: string; // e.g., a unified diff format
    errorMessage?: string;
}
</file>

<file path="lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/sw.js">
if(!self.define){let e,s={};const n=(n,i)=>(n=new URL(n+".js",i).href,s[n]||new Promise(s=>{if("document"in self){const e=document.createElement("script");e.src=n,e.onload=s,document.head.appendChild(e)}else e=n,importScripts(n),s()}).then(()=>{let e=s[n];if(!e)throw new Error(`Module ${n} didn’t register its module`);return e}));self.define=(i,a)=>{const t=e||("document"in self?document.currentScript.src:"")||location.href;if(s[t])return;let c={};const r=e=>n(e,t),u={module:{uri:t},exports:c,require:r};s[t]=Promise.all(i.map(e=>u[e]||r(e))).then(e=>(a(...e),c))}}define(["./workbox-4754cb34"],function(e){"use strict";importScripts(),self.skipWaiting(),e.clientsClaim(),e.precacheAndRoute([{url:"/_next/app-build-manifest.json",revision:"94a91820d0af10a755d6e2e526546c3c"},{url:"/_next/static/SzVNxEsjdlZf4SJmAAuJ2/_buildManifest.js",revision:"f041d7e06319944b4cca9a2002f340d3"},{url:"/_next/static/SzVNxEsjdlZf4SJmAAuJ2/_ssgManifest.js",revision:"b6652df95db52feb4daf4eca35380933"},{url:"/_next/static/chunks/1297.5be2f94998fc934e.js",revision:"5be2f94998fc934e"},{url:"/_next/static/chunks/1684-07a767bd1e1c86fb.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/2671-2041ea5b394c404a.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/2688-03d86ab64ef84bee.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/3352-4384b71ee400a4cf.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/3362.4df5e4075f12e617.js",revision:"4df5e4075f12e617"},{url:"/_next/static/chunks/3539-08a1503bd0316593.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/3768.2386fe6644fc41d1.js",revision:"2386fe6644fc41d1"},{url:"/_next/static/chunks/4277-91e3818841fcc608.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/472.2c08b965bd9148e2.js",revision:"2c08b965bd9148e2"},{url:"/_next/static/chunks/4bd1b696-ccc0dfb01357ef36.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/5147.1e28237c1d594bfe.js",revision:"1e28237c1d594bfe"},{url:"/_next/static/chunks/5327-681144abbce46d9c.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/5413.5929d96c0d60d546.js",revision:"5929d96c0d60d546"},{url:"/_next/static/chunks/5653.0700ad3347f6c366.js",revision:"0700ad3347f6c366"},{url:"/_next/static/chunks/5709.055552b756ee5a51.js",revision:"055552b756ee5a51"},{url:"/_next/static/chunks/6260.4ea75a67dec5815d.js",revision:"4ea75a67dec5815d"},{url:"/_next/static/chunks/6545-8830763b39f96f9b.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/6767.6e9de477b95fdf39.js",revision:"6e9de477b95fdf39"},{url:"/_next/static/chunks/6972.0170103cbc2cbf28.js",revision:"0170103cbc2cbf28"},{url:"/_next/static/chunks/7368.515e7d7048fdd7f8.js",revision:"515e7d7048fdd7f8"},{url:"/_next/static/chunks/7985.fb28d2599fd8c960.js",revision:"fb28d2599fd8c960"},{url:"/_next/static/chunks/8947.073a9bfd7f3f488b.js",revision:"073a9bfd7f3f488b"},{url:"/_next/static/chunks/9017.20c0f48f02dd3569.js",revision:"20c0f48f02dd3569"},{url:"/_next/static/chunks/9143.2596263c650634f4.js",revision:"2596263c650634f4"},{url:"/_next/static/chunks/9341.3ca6eb08eac1d97b.js",revision:"3ca6eb08eac1d97b"},{url:"/_next/static/chunks/9585-a6d28ee2ad6f68ec.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/conversion/color-converter/layout-1ecc15bfa1e39c16.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/conversion/color-converter/page-8a54334f32df73a4.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/conversion/timestamp-converter/layout-dff82a7a41ef4ea7.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/conversion/timestamp-converter/page-94194f2e15fba7ad.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/encoding/base32/page-275237ea196a5709.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/encoding/base64/page-ff87d571dff2bdef.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/encoding/binary/page-92d9ede46dc396af.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/encoding/hex/page-87657055acda6a94.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/encoding/html/page-035aeafbf38d94c9.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/encoding/layout-eb639d9554085013.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/encoding/page-07e8b186cc5e721b.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/encoding/unicode/page-61967926f917781e.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/encoding/url/page-2b94a275f0795a81.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/integrations/loading-0fdb777175b332b7.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/integrations/page-f2b40b067fa23053.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/layout-4fa321cb3ea1758f.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/security/layout-44718dd55f23ac32.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/security/rsa-key-generator/page-298bcd84bf6a2b52.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/settings/page-8a7cddcf53c823fe.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/text/csv-json-converter/page-7139b0d151c9ba39.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/text/diff-checker/layout-a04bc908c78ed676.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/text/diff-checker/page-c26a43439895f182.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/text/json-formatter/layout-f30d89aa50ed79f0.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/text/json-formatter/page-5cbc50ef144532b0.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/text/layout-1d53a7cd22e28a1e.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/text/markdown-editor/page-8ac4194d9b4faf2e.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/(main)/text/regex-tester/page-3f2c547347520cf7.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/_not-found/page-26babafd3b6441f1.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/api/diff/route-8b09b835afadc456.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/layout-5a6ee4105d586f55.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/app/page-12e9696122d05c79.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/framework-82b67a6346ddd02b.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/main-7405b2bb800d1987.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/main-app-ec1a4753fe8e584a.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/pages/_app-0b0b6e26a728d49c.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/pages/_error-f94192b14105bd76.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/chunks/polyfills-42372ed130431b0a.js",revision:"846118c33b2c0e922d7b3a7676f81f6f"},{url:"/_next/static/chunks/webpack-19fa300bbb62b5d0.js",revision:"SzVNxEsjdlZf4SJmAAuJ2"},{url:"/_next/static/css/948ec04188f85ddf.css",revision:"948ec04188f85ddf"},{url:"/_next/static/media/26a46d62cd723877-s.woff2",revision:"befd9c0fdfa3d8a645d5f95717ed6420"},{url:"/_next/static/media/55c55f0601d81cf3-s.woff2",revision:"43828e14271c77b87e3ed582dbff9f74"},{url:"/_next/static/media/581909926a08bbc8-s.woff2",revision:"f0b86e7c24f455280b8df606b89af891"},{url:"/_next/static/media/8e9860b6e62d6359-s.woff2",revision:"01ba6c2a184b8cba08b0d57167664d75"},{url:"/_next/static/media/97e0cb1ae144a2a9-s.woff2",revision:"e360c61c5bd8d90639fd4503c829c2dc"},{url:"/_next/static/media/df0a9ae256c0569c-s.woff2",revision:"d54db44de5ccb18886ece2fda72bdfe0"},{url:"/_next/static/media/e4af272ccee01ff0-s.p.woff2",revision:"65850a373e258f1c897a2b3d75eb74de"},{url:"/favicon.ico",revision:"7215ee9c7d9dc229d2921a40e899ec5f"},{url:"/file.svg",revision:"d09f95206c3fa0bb9bd9fefabfd0ea71"},{url:"/globe.svg",revision:"2aaafa6a49b6563925fe440891e32717"},{url:"/next.svg",revision:"8e061864f388b47f33a1c3780831193e"},{url:"/vercel.svg",revision:"c0af2f507b369b085b35ef4bbe3bcf1e"},{url:"/window.svg",revision:"a2760511c65806022ad20adf74370ff3"}],{ignoreURLParametersMatching:[]}),e.cleanupOutdatedCaches(),e.registerRoute("/",new e.NetworkFirst({cacheName:"start-url",plugins:[{cacheWillUpdate:async({request:e,response:s,event:n,state:i})=>s&&"opaqueredirect"===s.type?new Response(s.body,{status:200,statusText:"OK",headers:s.headers}):s}]}),"GET"),e.registerRoute(/^https:\/\/fonts\.(?:gstatic)\.com\/.*/i,new e.CacheFirst({cacheName:"google-fonts-webfonts",plugins:[new e.ExpirationPlugin({maxEntries:4,maxAgeSeconds:31536e3})]}),"GET"),e.registerRoute(/^https:\/\/fonts\.(?:googleapis)\.com\/.*/i,new e.StaleWhileRevalidate({cacheName:"google-fonts-stylesheets",plugins:[new e.ExpirationPlugin({maxEntries:4,maxAgeSeconds:604800})]}),"GET"),e.registerRoute(/\.(?:eot|otf|ttc|ttf|woff|woff2|font.css)$/i,new e.StaleWhileRevalidate({cacheName:"static-font-assets",plugins:[new e.ExpirationPlugin({maxEntries:4,maxAgeSeconds:604800})]}),"GET"),e.registerRoute(/\.(?:jpg|jpeg|gif|png|svg|ico|webp)$/i,new e.StaleWhileRevalidate({cacheName:"static-image-assets",plugins:[new e.ExpirationPlugin({maxEntries:64,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\/_next\/image\?url=.+$/i,new e.StaleWhileRevalidate({cacheName:"next-image",plugins:[new e.ExpirationPlugin({maxEntries:64,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\.(?:mp3|wav|ogg)$/i,new e.CacheFirst({cacheName:"static-audio-assets",plugins:[new e.RangeRequestsPlugin,new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\.(?:mp4)$/i,new e.CacheFirst({cacheName:"static-video-assets",plugins:[new e.RangeRequestsPlugin,new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\.(?:js)$/i,new e.StaleWhileRevalidate({cacheName:"static-js-assets",plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\.(?:css|less)$/i,new e.StaleWhileRevalidate({cacheName:"static-style-assets",plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\/_next\/data\/.+\/.+\.json$/i,new e.StaleWhileRevalidate({cacheName:"next-data",plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(/\.(?:json|xml|csv)$/i,new e.NetworkFirst({cacheName:"static-data-assets",plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(({url:e})=>{if(!(self.origin===e.origin))return!1;const s=e.pathname;return!s.startsWith("/api/auth/")&&!!s.startsWith("/api/")},new e.NetworkFirst({cacheName:"apis",networkTimeoutSeconds:10,plugins:[new e.ExpirationPlugin({maxEntries:16,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(({url:e})=>{if(!(self.origin===e.origin))return!1;return!e.pathname.startsWith("/api/")},new e.NetworkFirst({cacheName:"others",networkTimeoutSeconds:10,plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:86400})]}),"GET"),e.registerRoute(({url:e})=>!(self.origin===e.origin),new e.NetworkFirst({cacheName:"cross-origin",networkTimeoutSeconds:10,plugins:[new e.ExpirationPlugin({maxEntries:32,maxAgeSeconds:3600})]}),"GET")});
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="public/workbox-4754cb34.js">
define(["exports"],function(t){"use strict";try{self["workbox:core:6.5.4"]&&_()}catch(t){}const e=(t,...e)=>{let s=t;return e.length>0&&(s+=` :: ${JSON.stringify(e)}`),s};class s extends Error{constructor(t,s){super(e(t,s)),this.name=t,this.details=s}}try{self["workbox:routing:6.5.4"]&&_()}catch(t){}const n=t=>t&&"object"==typeof t?t:{handle:t};class r{constructor(t,e,s="GET"){this.handler=n(e),this.match=t,this.method=s}setCatchHandler(t){this.catchHandler=n(t)}}class i extends r{constructor(t,e,s){super(({url:e})=>{const s=t.exec(e.href);if(s&&(e.origin===location.origin||0===s.index))return s.slice(1)},e,s)}}class a{constructor(){this.t=new Map,this.i=new Map}get routes(){return this.t}addFetchListener(){self.addEventListener("fetch",t=>{const{request:e}=t,s=this.handleRequest({request:e,event:t});s&&t.respondWith(s)})}addCacheListener(){self.addEventListener("message",t=>{if(t.data&&"CACHE_URLS"===t.data.type){const{payload:e}=t.data,s=Promise.all(e.urlsToCache.map(e=>{"string"==typeof e&&(e=[e]);const s=new Request(...e);return this.handleRequest({request:s,event:t})}));t.waitUntil(s),t.ports&&t.ports[0]&&s.then(()=>t.ports[0].postMessage(!0))}})}handleRequest({request:t,event:e}){const s=new URL(t.url,location.href);if(!s.protocol.startsWith("http"))return;const n=s.origin===location.origin,{params:r,route:i}=this.findMatchingRoute({event:e,request:t,sameOrigin:n,url:s});let a=i&&i.handler;const o=t.method;if(!a&&this.i.has(o)&&(a=this.i.get(o)),!a)return;let c;try{c=a.handle({url:s,request:t,event:e,params:r})}catch(t){c=Promise.reject(t)}const h=i&&i.catchHandler;return c instanceof Promise&&(this.o||h)&&(c=c.catch(async n=>{if(h)try{return await h.handle({url:s,request:t,event:e,params:r})}catch(t){t instanceof Error&&(n=t)}if(this.o)return this.o.handle({url:s,request:t,event:e});throw n})),c}findMatchingRoute({url:t,sameOrigin:e,request:s,event:n}){const r=this.t.get(s.method)||[];for(const i of r){let r;const a=i.match({url:t,sameOrigin:e,request:s,event:n});if(a)return r=a,(Array.isArray(r)&&0===r.length||a.constructor===Object&&0===Object.keys(a).length||"boolean"==typeof a)&&(r=void 0),{route:i,params:r}}return{}}setDefaultHandler(t,e="GET"){this.i.set(e,n(t))}setCatchHandler(t){this.o=n(t)}registerRoute(t){this.t.has(t.method)||this.t.set(t.method,[]),this.t.get(t.method).push(t)}unregisterRoute(t){if(!this.t.has(t.method))throw new s("unregister-route-but-not-found-with-method",{method:t.method});const e=this.t.get(t.method).indexOf(t);if(!(e>-1))throw new s("unregister-route-route-not-registered");this.t.get(t.method).splice(e,1)}}let o;const c=()=>(o||(o=new a,o.addFetchListener(),o.addCacheListener()),o);function h(t,e,n){let a;if("string"==typeof t){const s=new URL(t,location.href);a=new r(({url:t})=>t.href===s.href,e,n)}else if(t instanceof RegExp)a=new i(t,e,n);else if("function"==typeof t)a=new r(t,e,n);else{if(!(t instanceof r))throw new s("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});a=t}return c().registerRoute(a),a}try{self["workbox:strategies:6.5.4"]&&_()}catch(t){}const u={cacheWillUpdate:async({response:t})=>200===t.status||0===t.status?t:null},l={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},f=t=>[l.prefix,t,l.suffix].filter(t=>t&&t.length>0).join("-"),w=t=>t||f(l.precache),d=t=>t||f(l.runtime);function p(t,e){const s=new URL(t);for(const t of e)s.searchParams.delete(t);return s.href}class y{constructor(){this.promise=new Promise((t,e)=>{this.resolve=t,this.reject=e})}}const g=new Set;function m(t){return"string"==typeof t?new Request(t):t}class v{constructor(t,e){this.h={},Object.assign(this,e),this.event=e.event,this.u=t,this.l=new y,this.p=[],this.m=[...t.plugins],this.v=new Map;for(const t of this.m)this.v.set(t,{});this.event.waitUntil(this.l.promise)}async fetch(t){const{event:e}=this;let n=m(t);if("navigate"===n.mode&&e instanceof FetchEvent&&e.preloadResponse){const t=await e.preloadResponse;if(t)return t}const r=this.hasCallback("fetchDidFail")?n.clone():null;try{for(const t of this.iterateCallbacks("requestWillFetch"))n=await t({request:n.clone(),event:e})}catch(t){if(t instanceof Error)throw new s("plugin-error-request-will-fetch",{thrownErrorMessage:t.message})}const i=n.clone();try{let t;t=await fetch(n,"navigate"===n.mode?void 0:this.u.fetchOptions);for(const s of this.iterateCallbacks("fetchDidSucceed"))t=await s({event:e,request:i,response:t});return t}catch(t){throw r&&await this.runCallbacks("fetchDidFail",{error:t,event:e,originalRequest:r.clone(),request:i.clone()}),t}}async fetchAndCachePut(t){const e=await this.fetch(t),s=e.clone();return this.waitUntil(this.cachePut(t,s)),e}async cacheMatch(t){const e=m(t);let s;const{cacheName:n,matchOptions:r}=this.u,i=await this.getCacheKey(e,"read"),a=Object.assign(Object.assign({},r),{cacheName:n});s=await caches.match(i,a);for(const t of this.iterateCallbacks("cachedResponseWillBeUsed"))s=await t({cacheName:n,matchOptions:r,cachedResponse:s,request:i,event:this.event})||void 0;return s}async cachePut(t,e){const n=m(t);var r;await(r=0,new Promise(t=>setTimeout(t,r)));const i=await this.getCacheKey(n,"write");if(!e)throw new s("cache-put-with-no-response",{url:(a=i.url,new URL(String(a),location.href).href.replace(new RegExp(`^${location.origin}`),""))});var a;const o=await this.R(e);if(!o)return!1;const{cacheName:c,matchOptions:h}=this.u,u=await self.caches.open(c),l=this.hasCallback("cacheDidUpdate"),f=l?await async function(t,e,s,n){const r=p(e.url,s);if(e.url===r)return t.match(e,n);const i=Object.assign(Object.assign({},n),{ignoreSearch:!0}),a=await t.keys(e,i);for(const e of a)if(r===p(e.url,s))return t.match(e,n)}(u,i.clone(),["__WB_REVISION__"],h):null;try{await u.put(i,l?o.clone():o)}catch(t){if(t instanceof Error)throw"QuotaExceededError"===t.name&&await async function(){for(const t of g)await t()}(),t}for(const t of this.iterateCallbacks("cacheDidUpdate"))await t({cacheName:c,oldResponse:f,newResponse:o.clone(),request:i,event:this.event});return!0}async getCacheKey(t,e){const s=`${t.url} | ${e}`;if(!this.h[s]){let n=t;for(const t of this.iterateCallbacks("cacheKeyWillBeUsed"))n=m(await t({mode:e,request:n,event:this.event,params:this.params}));this.h[s]=n}return this.h[s]}hasCallback(t){for(const e of this.u.plugins)if(t in e)return!0;return!1}async runCallbacks(t,e){for(const s of this.iterateCallbacks(t))await s(e)}*iterateCallbacks(t){for(const e of this.u.plugins)if("function"==typeof e[t]){const s=this.v.get(e),n=n=>{const r=Object.assign(Object.assign({},n),{state:s});return e[t](r)};yield n}}waitUntil(t){return this.p.push(t),t}async doneWaiting(){let t;for(;t=this.p.shift();)await t}destroy(){this.l.resolve(null)}async R(t){let e=t,s=!1;for(const t of this.iterateCallbacks("cacheWillUpdate"))if(e=await t({request:this.request,response:e,event:this.event})||void 0,s=!0,!e)break;return s||e&&200!==e.status&&(e=void 0),e}}class R{constructor(t={}){this.cacheName=d(t.cacheName),this.plugins=t.plugins||[],this.fetchOptions=t.fetchOptions,this.matchOptions=t.matchOptions}handle(t){const[e]=this.handleAll(t);return e}handleAll(t){t instanceof FetchEvent&&(t={event:t,request:t.request});const e=t.event,s="string"==typeof t.request?new Request(t.request):t.request,n="params"in t?t.params:void 0,r=new v(this,{event:e,request:s,params:n}),i=this.q(r,s,e);return[i,this.D(i,r,s,e)]}async q(t,e,n){let r;await t.runCallbacks("handlerWillStart",{event:n,request:e});try{if(r=await this.U(e,t),!r||"error"===r.type)throw new s("no-response",{url:e.url})}catch(s){if(s instanceof Error)for(const i of t.iterateCallbacks("handlerDidError"))if(r=await i({error:s,event:n,request:e}),r)break;if(!r)throw s}for(const s of t.iterateCallbacks("handlerWillRespond"))r=await s({event:n,request:e,response:r});return r}async D(t,e,s,n){let r,i;try{r=await t}catch(i){}try{await e.runCallbacks("handlerDidRespond",{event:n,request:s,response:r}),await e.doneWaiting()}catch(t){t instanceof Error&&(i=t)}if(await e.runCallbacks("handlerDidComplete",{event:n,request:s,response:r,error:i}),e.destroy(),i)throw i}}function b(t){t.then(()=>{})}function q(){return q=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var s=arguments[e];for(var n in s)({}).hasOwnProperty.call(s,n)&&(t[n]=s[n])}return t},q.apply(null,arguments)}let D,U;const x=new WeakMap,L=new WeakMap,I=new WeakMap,C=new WeakMap,E=new WeakMap;let N={get(t,e,s){if(t instanceof IDBTransaction){if("done"===e)return L.get(t);if("objectStoreNames"===e)return t.objectStoreNames||I.get(t);if("store"===e)return s.objectStoreNames[1]?void 0:s.objectStore(s.objectStoreNames[0])}return k(t[e])},set:(t,e,s)=>(t[e]=s,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function O(t){return t!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(U||(U=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(B(this),e),k(x.get(this))}:function(...e){return k(t.apply(B(this),e))}:function(e,...s){const n=t.call(B(this),e,...s);return I.set(n,e.sort?e.sort():[e]),k(n)}}function T(t){return"function"==typeof t?O(t):(t instanceof IDBTransaction&&function(t){if(L.has(t))return;const e=new Promise((e,s)=>{const n=()=>{t.removeEventListener("complete",r),t.removeEventListener("error",i),t.removeEventListener("abort",i)},r=()=>{e(),n()},i=()=>{s(t.error||new DOMException("AbortError","AbortError")),n()};t.addEventListener("complete",r),t.addEventListener("error",i),t.addEventListener("abort",i)});L.set(t,e)}(t),e=t,(D||(D=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some(t=>e instanceof t)?new Proxy(t,N):t);var e}function k(t){if(t instanceof IDBRequest)return function(t){const e=new Promise((e,s)=>{const n=()=>{t.removeEventListener("success",r),t.removeEventListener("error",i)},r=()=>{e(k(t.result)),n()},i=()=>{s(t.error),n()};t.addEventListener("success",r),t.addEventListener("error",i)});return e.then(e=>{e instanceof IDBCursor&&x.set(e,t)}).catch(()=>{}),E.set(e,t),e}(t);if(C.has(t))return C.get(t);const e=T(t);return e!==t&&(C.set(t,e),E.set(e,t)),e}const B=t=>E.get(t);const P=["get","getKey","getAll","getAllKeys","count"],M=["put","add","delete","clear"],W=new Map;function j(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(W.get(e))return W.get(e);const s=e.replace(/FromIndex$/,""),n=e!==s,r=M.includes(s);if(!(s in(n?IDBIndex:IDBObjectStore).prototype)||!r&&!P.includes(s))return;const i=async function(t,...e){const i=this.transaction(t,r?"readwrite":"readonly");let a=i.store;return n&&(a=a.index(e.shift())),(await Promise.all([a[s](...e),r&&i.done]))[0]};return W.set(e,i),i}N=(t=>q({},t,{get:(e,s,n)=>j(e,s)||t.get(e,s,n),has:(e,s)=>!!j(e,s)||t.has(e,s)}))(N);try{self["workbox:expiration:6.5.4"]&&_()}catch(t){}const S="cache-entries",K=t=>{const e=new URL(t,location.href);return e.hash="",e.href};class A{constructor(t){this._=null,this.L=t}I(t){const e=t.createObjectStore(S,{keyPath:"id"});e.createIndex("cacheName","cacheName",{unique:!1}),e.createIndex("timestamp","timestamp",{unique:!1})}C(t){this.I(t),this.L&&function(t,{blocked:e}={}){const s=indexedDB.deleteDatabase(t);e&&s.addEventListener("blocked",t=>e(t.oldVersion,t)),k(s).then(()=>{})}(this.L)}async setTimestamp(t,e){const s={url:t=K(t),timestamp:e,cacheName:this.L,id:this.N(t)},n=(await this.getDb()).transaction(S,"readwrite",{durability:"relaxed"});await n.store.put(s),await n.done}async getTimestamp(t){const e=await this.getDb(),s=await e.get(S,this.N(t));return null==s?void 0:s.timestamp}async expireEntries(t,e){const s=await this.getDb();let n=await s.transaction(S).store.index("timestamp").openCursor(null,"prev");const r=[];let i=0;for(;n;){const s=n.value;s.cacheName===this.L&&(t&&s.timestamp<t||e&&i>=e?r.push(n.value):i++),n=await n.continue()}const a=[];for(const t of r)await s.delete(S,t.id),a.push(t.url);return a}N(t){return this.L+"|"+K(t)}async getDb(){return this._||(this._=await function(t,e,{blocked:s,upgrade:n,blocking:r,terminated:i}={}){const a=indexedDB.open(t,e),o=k(a);return n&&a.addEventListener("upgradeneeded",t=>{n(k(a.result),t.oldVersion,t.newVersion,k(a.transaction),t)}),s&&a.addEventListener("blocked",t=>s(t.oldVersion,t.newVersion,t)),o.then(t=>{i&&t.addEventListener("close",()=>i()),r&&t.addEventListener("versionchange",t=>r(t.oldVersion,t.newVersion,t))}).catch(()=>{}),o}("workbox-expiration",1,{upgrade:this.C.bind(this)})),this._}}class F{constructor(t,e={}){this.O=!1,this.T=!1,this.k=e.maxEntries,this.B=e.maxAgeSeconds,this.P=e.matchOptions,this.L=t,this.M=new A(t)}async expireEntries(){if(this.O)return void(this.T=!0);this.O=!0;const t=this.B?Date.now()-1e3*this.B:0,e=await this.M.expireEntries(t,this.k),s=await self.caches.open(this.L);for(const t of e)await s.delete(t,this.P);this.O=!1,this.T&&(this.T=!1,b(this.expireEntries()))}async updateTimestamp(t){await this.M.setTimestamp(t,Date.now())}async isURLExpired(t){if(this.B){const e=await this.M.getTimestamp(t),s=Date.now()-1e3*this.B;return void 0===e||e<s}return!1}async delete(){this.T=!1,await this.M.expireEntries(1/0)}}try{self["workbox:range-requests:6.5.4"]&&_()}catch(t){}async function H(t,e){try{if(206===e.status)return e;const n=t.headers.get("range");if(!n)throw new s("no-range-header");const r=function(t){const e=t.trim().toLowerCase();if(!e.startsWith("bytes="))throw new s("unit-must-be-bytes",{normalizedRangeHeader:e});if(e.includes(","))throw new s("single-range-only",{normalizedRangeHeader:e});const n=/(\d*)-(\d*)/.exec(e);if(!n||!n[1]&&!n[2])throw new s("invalid-range-values",{normalizedRangeHeader:e});return{start:""===n[1]?void 0:Number(n[1]),end:""===n[2]?void 0:Number(n[2])}}(n),i=await e.blob(),a=function(t,e,n){const r=t.size;if(n&&n>r||e&&e<0)throw new s("range-not-satisfiable",{size:r,end:n,start:e});let i,a;return void 0!==e&&void 0!==n?(i=e,a=n+1):void 0!==e&&void 0===n?(i=e,a=r):void 0!==n&&void 0===e&&(i=r-n,a=r),{start:i,end:a}}(i,r.start,r.end),o=i.slice(a.start,a.end),c=o.size,h=new Response(o,{status:206,statusText:"Partial Content",headers:e.headers});return h.headers.set("Content-Length",String(c)),h.headers.set("Content-Range",`bytes ${a.start}-${a.end-1}/${i.size}`),h}catch(t){return new Response("",{status:416,statusText:"Range Not Satisfiable"})}}function $(t,e){const s=e();return t.waitUntil(s),s}try{self["workbox:precaching:6.5.4"]&&_()}catch(t){}function z(t){if(!t)throw new s("add-to-cache-list-unexpected-type",{entry:t});if("string"==typeof t){const e=new URL(t,location.href);return{cacheKey:e.href,url:e.href}}const{revision:e,url:n}=t;if(!n)throw new s("add-to-cache-list-unexpected-type",{entry:t});if(!e){const t=new URL(n,location.href);return{cacheKey:t.href,url:t.href}}const r=new URL(n,location.href),i=new URL(n,location.href);return r.searchParams.set("__WB_REVISION__",e),{cacheKey:r.href,url:i.href}}class G{constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:t,state:e})=>{e&&(e.originalRequest=t)},this.cachedResponseWillBeUsed=async({event:t,state:e,cachedResponse:s})=>{if("install"===t.type&&e&&e.originalRequest&&e.originalRequest instanceof Request){const t=e.originalRequest.url;s?this.notUpdatedURLs.push(t):this.updatedURLs.push(t)}return s}}}class V{constructor({precacheController:t}){this.cacheKeyWillBeUsed=async({request:t,params:e})=>{const s=(null==e?void 0:e.cacheKey)||this.W.getCacheKeyForURL(t.url);return s?new Request(s,{headers:t.headers}):t},this.W=t}}let J,Q;async function X(t,e){let n=null;if(t.url){n=new URL(t.url).origin}if(n!==self.location.origin)throw new s("cross-origin-copy-response",{origin:n});const r=t.clone(),i={headers:new Headers(r.headers),status:r.status,statusText:r.statusText},a=e?e(i):i,o=function(){if(void 0===J){const t=new Response("");if("body"in t)try{new Response(t.body),J=!0}catch(t){J=!1}J=!1}return J}()?r.body:await r.blob();return new Response(o,a)}class Y extends R{constructor(t={}){t.cacheName=w(t.cacheName),super(t),this.j=!1!==t.fallbackToNetwork,this.plugins.push(Y.copyRedirectedCacheableResponsesPlugin)}async U(t,e){const s=await e.cacheMatch(t);return s||(e.event&&"install"===e.event.type?await this.S(t,e):await this.K(t,e))}async K(t,e){let n;const r=e.params||{};if(!this.j)throw new s("missing-precache-entry",{cacheName:this.cacheName,url:t.url});{const s=r.integrity,i=t.integrity,a=!i||i===s;n=await e.fetch(new Request(t,{integrity:"no-cors"!==t.mode?i||s:void 0})),s&&a&&"no-cors"!==t.mode&&(this.A(),await e.cachePut(t,n.clone()))}return n}async S(t,e){this.A();const n=await e.fetch(t);if(!await e.cachePut(t,n.clone()))throw new s("bad-precaching-response",{url:t.url,status:n.status});return n}A(){let t=null,e=0;for(const[s,n]of this.plugins.entries())n!==Y.copyRedirectedCacheableResponsesPlugin&&(n===Y.defaultPrecacheCacheabilityPlugin&&(t=s),n.cacheWillUpdate&&e++);0===e?this.plugins.push(Y.defaultPrecacheCacheabilityPlugin):e>1&&null!==t&&this.plugins.splice(t,1)}}Y.defaultPrecacheCacheabilityPlugin={cacheWillUpdate:async({response:t})=>!t||t.status>=400?null:t},Y.copyRedirectedCacheableResponsesPlugin={cacheWillUpdate:async({response:t})=>t.redirected?await X(t):t};class Z{constructor({cacheName:t,plugins:e=[],fallbackToNetwork:s=!0}={}){this.F=new Map,this.H=new Map,this.$=new Map,this.u=new Y({cacheName:w(t),plugins:[...e,new V({precacheController:this})],fallbackToNetwork:s}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this.u}precache(t){this.addToCacheList(t),this.G||(self.addEventListener("install",this.install),self.addEventListener("activate",this.activate),this.G=!0)}addToCacheList(t){const e=[];for(const n of t){"string"==typeof n?e.push(n):n&&void 0===n.revision&&e.push(n.url);const{cacheKey:t,url:r}=z(n),i="string"!=typeof n&&n.revision?"reload":"default";if(this.F.has(r)&&this.F.get(r)!==t)throw new s("add-to-cache-list-conflicting-entries",{firstEntry:this.F.get(r),secondEntry:t});if("string"!=typeof n&&n.integrity){if(this.$.has(t)&&this.$.get(t)!==n.integrity)throw new s("add-to-cache-list-conflicting-integrities",{url:r});this.$.set(t,n.integrity)}if(this.F.set(r,t),this.H.set(r,i),e.length>0){const t=`Workbox is precaching URLs without revision info: ${e.join(", ")}\nThis is generally NOT safe. Learn more at https://bit.ly/wb-precache`;console.warn(t)}}}install(t){return $(t,async()=>{const e=new G;this.strategy.plugins.push(e);for(const[e,s]of this.F){const n=this.$.get(s),r=this.H.get(e),i=new Request(e,{integrity:n,cache:r,credentials:"same-origin"});await Promise.all(this.strategy.handleAll({params:{cacheKey:s},request:i,event:t}))}const{updatedURLs:s,notUpdatedURLs:n}=e;return{updatedURLs:s,notUpdatedURLs:n}})}activate(t){return $(t,async()=>{const t=await self.caches.open(this.strategy.cacheName),e=await t.keys(),s=new Set(this.F.values()),n=[];for(const r of e)s.has(r.url)||(await t.delete(r),n.push(r.url));return{deletedURLs:n}})}getURLsToCacheKeys(){return this.F}getCachedURLs(){return[...this.F.keys()]}getCacheKeyForURL(t){const e=new URL(t,location.href);return this.F.get(e.href)}getIntegrityForCacheKey(t){return this.$.get(t)}async matchPrecache(t){const e=t instanceof Request?t.url:t,s=this.getCacheKeyForURL(e);if(s){return(await self.caches.open(this.strategy.cacheName)).match(s)}}createHandlerBoundToURL(t){const e=this.getCacheKeyForURL(t);if(!e)throw new s("non-precached-url",{url:t});return s=>(s.request=new Request(t),s.params=Object.assign({cacheKey:e},s.params),this.strategy.handle(s))}}const tt=()=>(Q||(Q=new Z),Q);class et extends r{constructor(t,e){super(({request:s})=>{const n=t.getURLsToCacheKeys();for(const r of function*(t,{ignoreURLParametersMatching:e=[/^utm_/,/^fbclid$/],directoryIndex:s="index.html",cleanURLs:n=!0,urlManipulation:r}={}){const i=new URL(t,location.href);i.hash="",yield i.href;const a=function(t,e=[]){for(const s of[...t.searchParams.keys()])e.some(t=>t.test(s))&&t.searchParams.delete(s);return t}(i,e);if(yield a.href,s&&a.pathname.endsWith("/")){const t=new URL(a.href);t.pathname+=s,yield t.href}if(n){const t=new URL(a.href);t.pathname+=".html",yield t.href}if(r){const t=r({url:i});for(const e of t)yield e.href}}(s.url,e)){const e=n.get(r);if(e){return{cacheKey:e,integrity:t.getIntegrityForCacheKey(e)}}}},t.strategy)}}t.CacheFirst=class extends R{async U(t,e){let n,r=await e.cacheMatch(t);if(!r)try{r=await e.fetchAndCachePut(t)}catch(t){t instanceof Error&&(n=t)}if(!r)throw new s("no-response",{url:t.url,error:n});return r}},t.ExpirationPlugin=class{constructor(t={}){this.cachedResponseWillBeUsed=async({event:t,request:e,cacheName:s,cachedResponse:n})=>{if(!n)return null;const r=this.V(n),i=this.J(s);b(i.expireEntries());const a=i.updateTimestamp(e.url);if(t)try{t.waitUntil(a)}catch(t){}return r?n:null},this.cacheDidUpdate=async({cacheName:t,request:e})=>{const s=this.J(t);await s.updateTimestamp(e.url),await s.expireEntries()},this.X=t,this.B=t.maxAgeSeconds,this.Y=new Map,t.purgeOnQuotaError&&function(t){g.add(t)}(()=>this.deleteCacheAndMetadata())}J(t){if(t===d())throw new s("expire-custom-caches-only");let e=this.Y.get(t);return e||(e=new F(t,this.X),this.Y.set(t,e)),e}V(t){if(!this.B)return!0;const e=this.Z(t);if(null===e)return!0;return e>=Date.now()-1e3*this.B}Z(t){if(!t.headers.has("date"))return null;const e=t.headers.get("date"),s=new Date(e).getTime();return isNaN(s)?null:s}async deleteCacheAndMetadata(){for(const[t,e]of this.Y)await self.caches.delete(t),await e.delete();this.Y=new Map}},t.NetworkFirst=class extends R{constructor(t={}){super(t),this.plugins.some(t=>"cacheWillUpdate"in t)||this.plugins.unshift(u),this.tt=t.networkTimeoutSeconds||0}async U(t,e){const n=[],r=[];let i;if(this.tt){const{id:s,promise:a}=this.et({request:t,logs:n,handler:e});i=s,r.push(a)}const a=this.st({timeoutId:i,request:t,logs:n,handler:e});r.push(a);const o=await e.waitUntil((async()=>await e.waitUntil(Promise.race(r))||await a)());if(!o)throw new s("no-response",{url:t.url});return o}et({request:t,logs:e,handler:s}){let n;return{promise:new Promise(e=>{n=setTimeout(async()=>{e(await s.cacheMatch(t))},1e3*this.tt)}),id:n}}async st({timeoutId:t,request:e,logs:s,handler:n}){let r,i;try{i=await n.fetchAndCachePut(e)}catch(t){t instanceof Error&&(r=t)}return t&&clearTimeout(t),!r&&i||(i=await n.cacheMatch(e)),i}},t.RangeRequestsPlugin=class{constructor(){this.cachedResponseWillBeUsed=async({request:t,cachedResponse:e})=>e&&t.headers.has("range")?await H(t,e):e}},t.StaleWhileRevalidate=class extends R{constructor(t={}){super(t),this.plugins.some(t=>"cacheWillUpdate"in t)||this.plugins.unshift(u)}async U(t,e){const n=e.fetchAndCachePut(t).catch(()=>{});e.waitUntil(n);let r,i=await e.cacheMatch(t);if(i);else try{i=await n}catch(t){t instanceof Error&&(r=t)}if(!i)throw new s("no-response",{url:t.url,error:r});return i}},t.cleanupOutdatedCaches=function(){self.addEventListener("activate",t=>{const e=w();t.waitUntil((async(t,e="-precache-")=>{const s=(await self.caches.keys()).filter(s=>s.includes(e)&&s.includes(self.registration.scope)&&s!==t);return await Promise.all(s.map(t=>self.caches.delete(t))),s})(e).then(t=>{}))})},t.clientsClaim=function(){self.addEventListener("activate",()=>self.clients.claim())},t.precacheAndRoute=function(t,e){!function(t){tt().precache(t)}(t),function(t){const e=tt();h(new et(e,t))}(e)},t.registerRoute=h});
</file>

<file path="tailwind.config.ts">
import type { Config } from 'tailwindcss';
import tailwindcssAnimate from 'tailwindcss-animate';

const config: Config = {
    darkMode: 'class',
    content: [
        './pages/**/*.{js,ts,jsx,tsx,mdx}',
        './components/**/*.{js,ts,jsx,tsx,mdx}',
        './app/**/*.{js,ts,jsx,tsx,mdx}',
        './src/**/*.{js,ts,jsx,tsx,mdx}',
    ],
    theme: {
        extend: {
            colors: {
                border: 'hsl(var(--border))',
                input: 'hsl(var(--input))',
                ring: 'hsl(var(--ring))',
                background: 'hsl(var(--background))',
                foreground: 'hsl(var(--foreground))',
                primary: {
                    DEFAULT: 'hsl(var(--primary))',
                    foreground: 'hsl(var(--primary-foreground))',
                },
                secondary: {
                    DEFAULT: 'hsl(var(--secondary))',
                    foreground: 'hsl(var(--secondary-foreground))',
                },
                destructive: {
                    DEFAULT: 'hsl(var(--destructive))',
                    foreground: 'hsl(var(--destructive-foreground))',
                },
                muted: {
                    DEFAULT: 'hsl(var(--muted))',
                    foreground: 'hsl(var(--muted-foreground))',
                },
                accent: {
                    DEFAULT: 'hsl(var(--accent))',
                    foreground: 'hsl(var(--accent-foreground))',
                },
                popover: {
                    DEFAULT: 'hsl(var(--popover))',
                    foreground: 'hsl(var(--popover-foreground))',
                },
                card: {
                    DEFAULT: 'hsl(var(--card))',
                    foreground: 'hsl(var(--card-foreground))',
                },
            },
            borderRadius: {
                lg: 'var(--radius)',
                md: 'calc(var(--radius) - 2px)',
                sm: 'calc(var(--radius) - 4px)',
            },
            keyframes: {
                'accordion-down': {
                    from: { height: '0' },
                    to: { height: 'var(--radix-accordion-content-height)' },
                },
                'accordion-up': {
                    from: { height: 'var(--radix-accordion-content-height)' },
                    to: { height: '0' },
                },
            },
            animation: {
                'accordion-down': 'accordion-down 0.2s ease-out',
                'accordion-up': 'accordion-up 0.2s ease-out',
            },
        },
    },
    plugins: [tailwindcssAnimate],
};

export default config;
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="types/jsdiff.d.ts">
declare module 'jsdiff' {
    export function diffChars(oldStr: string, newStr: string): Change[];
    export function diffLines(oldStr: string, newStr: string): Change[];
    export function diffWords(oldStr: string, newStr: string): Change[];

    interface Change {
        value: string;
        added?: boolean;
        removed?: boolean;
        // count?: number; // Not directly used in the provided code, but often part of diff output
    }
}
</file>

<file path="app/(main)/encoding/layout.tsx">
// app/(main)/encoding/layout.tsx

'use client';

import { Button } from '@/components/ui/button';
// --- 수정: 'encodingTools' 대신 'allTools'를 import ---
import { allTools } from '@/app/data/integrations';
import { ArrowLeft } from 'lucide-react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { useMemo } from 'react';

export default function EncodingToolLayout({ children }: { children: React.ReactNode }) {
    const pathname = usePathname();

    // --- 수정: 검색 대상을 allTools로 변경 ---
    const currentTool = useMemo(() => {
        const toolId = pathname.split('/').pop();
        return allTools.find((tool) => tool.id === toolId);
    }, [pathname]);

    const Icon = currentTool?.icon;

    return (
        <div className="container mx-auto px-4 py-8">
            {currentTool && Icon && (
                <div className="flex justify-between items-center mb-8">
                    <div className="flex items-center gap-3">
                        <div
                            className="w-12 h-12 rounded-full flex items-center justify-center"
                            style={{ backgroundColor: `${currentTool.color}20` }}
                        >
                            <Icon className="w-6 h-6" style={{ color: currentTool.color }} />
                        </div>
                        <h1 className="text-3xl font-bold">{currentTool.name}</h1>
                    </div>

                    <Link href="/" passHref>
                        <Button variant="outline">
                            <ArrowLeft className="mr-2 h-4 w-4" />
                            모든 도구 보기
                        </Button>
                    </Link>
                </div>
            )}

            {children}
        </div>
    );
}
</file>

<file path="app/(main)/encoding/page.tsx">
'use client';

import { useState } from 'react';
import { encodingTools } from '../../data/encoding-tools';
import type { Integration } from '../../data/types';
import SimpleCategoryFilter from './components/SimpleCategoryFilter';
import IntegrationGrid from '../integrations/components/IntegrationGrid';
import SearchBar from '../integrations/components/SearchBar';

const categories = ['베이스 인코딩', 'URL/텍스트 처리', '진수 변환'];

export default function EncodingTools() {
    const [selectedCategory, setSelectedCategory] = useState<string>('전체');
    const [searchQuery, setSearchQuery] = useState<string>('');
    const [favorites, setFavorites] = useState<string[]>([]);

    const filteredTools = encodingTools.filter((tool) => {
        const matchesCategory = selectedCategory === '전체' || tool.category === selectedCategory;
        const matchesSearch =
            tool.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
            tool.description.toLowerCase().includes(searchQuery.toLowerCase());
        return matchesCategory && matchesSearch;
    });

    const handleSearch = (query: string) => {
        setSearchQuery(query);
    };

    const handleSelectIntegration = (integration: Integration) => {
        window.location.href = `/encoding/${integration.id}`;
    };

    const handleToggleFavorite = (id: string) => {
        setFavorites((prev) => (prev.includes(id) ? prev.filter((fid) => fid !== id) : [...prev, id]));
    };

    return (
        <div className="container mx-auto px-4 py-8">
            <h1 className="text-3xl font-bold mb-8">인코딩/디코딩 도구</h1>

            <div className="flex flex-col md:flex-row gap-4 mb-8">
                <div className="w-full md:w-64">
                    <SimpleCategoryFilter
                        categories={['전체', ...categories]}
                        selectedCategory={selectedCategory}
                        onSelectCategory={setSelectedCategory}
                    />
                </div>
                <div className="flex-1">
                    <SearchBar onSearch={handleSearch} />
                </div>
            </div>

            <IntegrationGrid
                integrations={filteredTools}
                onSelectIntegration={handleSelectIntegration}
                favorites={favorites}
                onToggleFavorite={handleToggleFavorite}
            />
        </div>
    );
}
</file>

<file path="app/(main)/integrations/components/FeaturedIntegrations.tsx">
'use client';

import { Button } from '@/components/ui/button';
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { useRef } from 'react';
import type { Integration } from '../../../data/types';

type FeaturedIntegrationsProps = {
  integrations: Integration[];
  onSelect: (integration: Integration) => void;
};

export default function FeaturedIntegrations({
  integrations,
  onSelect,
}: FeaturedIntegrationsProps) {
  const scrollContainerRef = useRef<HTMLDivElement>(null);

  const scroll = (direction: 'left' | 'right') => {
    if (scrollContainerRef.current) {
      const scrollAmount = 300;
      const currentScroll = scrollContainerRef.current.scrollLeft;

      scrollContainerRef.current.scrollTo({
        left:
          direction === 'left'
            ? currentScroll - scrollAmount
            : currentScroll + scrollAmount,
        behavior: 'smooth',
      });
    }
  };

  return (
    <div className="relative">
      <h2 className="text-lg font-semibold mb-4">Featured Integrations</h2>

      <div className="absolute top-0 right-0 flex space-x-2">
        <Button variant="outline" size="icon" onClick={() => scroll('left')}>
          <ChevronLeft className="h-4 w-4" />
        </Button>
        <Button variant="outline" size="icon" onClick={() => scroll('right')}>
          <ChevronRight className="h-4 w-4" />
        </Button>
      </div>

      <div
        ref={scrollContainerRef}
        className="flex space-x-4 overflow-x-auto pb-4 scrollbar-hide"
        style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}>
        {integrations.slice(0, 10).map((integration) => (
          <div
            key={integration.id}
            className="flex-shrink-0 w-[250px] bg-white rounded-lg shadow-md p-4 cursor-pointer hover:shadow-lg transition-all duration-300"
            onClick={() => onSelect(integration)}>
            <div className="flex items-center space-x-3 mb-3">
              <div
                className="w-10 h-10 rounded-full flex items-center justify-center"
                style={{ backgroundColor: `${integration.color}20` }}>
                {integration.icon && (
                  <integration.icon 
                    className="w-5 h-5"
                    style={{ color: integration.color }}
                  />
                )}
              </div>
              <h3 className="font-medium">{integration.name}</h3>
            </div>
            <p className="text-xs text-gray-500 line-clamp-2 mb-3">
              {integration.description}
            </p>
            <span className="text-xs bg-gray-100 px-2 py-1 rounded-full">
              {integration.category}
            </span>
          </div>
        ))}
      </div>
    </div>
  );
}
</file>

<file path="app/(main)/integrations/components/IntegrationGrid.tsx">
"use client"

import { motion } from "framer-motion"
import type { Integration } from "../../../data/types"
import IntegrationCard from "./IntegrationCard"

type IntegrationGridProps = {
  integrations: Integration[]
  onSelectIntegration: (integration: Integration) => void
  favorites: string[]
  onToggleFavorite: (id: string) => void
}

export default function IntegrationGrid({
  integrations,
  onSelectIntegration,
  favorites,
  onToggleFavorite,
}: IntegrationGridProps) {
  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
      {integrations.map((integration, index) => (
        <motion.div
          key={integration.id}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: index * 0.05, duration: 0.3 }}
        >
          <IntegrationCard
            integration={integration}
            onSelect={onSelectIntegration}
            isFavorite={favorites.includes(integration.id)}
            onToggleFavorite={onToggleFavorite}
          />
        </motion.div>
      ))}
    </div>
  )
}
</file>

<file path="app/(main)/integrations/loading.tsx">
import { Loader } from 'lucide-react';

export default function Loading() {
    return (
        <div className="flex justify-center items-center h-full">
            <Loader className="w-12 h-12 animate-spin text-primary" />
        </div>
    );
}
</file>

<file path="app/(main)/security/rsa-key-generator/page.tsx">
// app/(main)/encoding/rsa-key-generator/page.tsx

'use client';

import dynamic from 'next/dynamic';

// 클라이언트 컴포넌트를 동적으로 로드하고 SSR을 비활성화합니다.
const DynamicRsaKeyGeneratorClient = dynamic(() => import('./RsaKeyGeneratorClient'), {
    ssr: false,
});

export default function RsaKeyGeneratorTool() {
    return <DynamicRsaKeyGeneratorClient />;
}
</file>

<file path="app/(main)/text/csv-json-converter/page.tsx">
'use client';

import dynamic from 'next/dynamic';

const DynamicClientCsvJsonConverterTool = dynamic(() => import('./ClientCsvJsonConverterTool'), {
    ssr: false, // 서버 측 렌더링 비활성화
    loading: () => <p>로딩 중...</p>, // 로딩 컴포넌트 추가
});

export default function CsvJsonConverterTool() {
    return <DynamicClientCsvJsonConverterTool />;
}
</file>

<file path="app/(main)/text/markdown-editor/page.tsx">
'use client';

import dynamic from 'next/dynamic';

// 클라이언트 컴포넌트를 동적으로 로드하고 SSR을 비활성화합니다.
const DynamicClientMarkdownEditor = dynamic(() => import('./ClientMarkdownEditor'), {
    ssr: false, // 서버 측 렌더링 비활성화
});

export default function MarkdownEditorTool() {
    return <DynamicClientMarkdownEditor />;
}
</file>

<file path="app/data/encoding-tools.ts">
import {
  Binary,
  FileCode,
  FileText,
  Globe,
  Hash,
  Key,
  Type,
} from 'lucide-react';
// 수정된 부분: Integration 타입을 types.ts에서 가져옵니다.
import type { Integration } from './types';

export const encodingTools: Integration[] = [
  {
    id: 'base64',
    name: 'Base64 인코더/디코더',
    description: '텍스트와 바이너리 데이터를 Base64로 변환하고 디코딩합니다.',
    category: '베이스 인코딩',
    icon: FileCode,
    color: '#4CAF50',
  },
  {
    id: 'base32',
    name: 'Base32 인코더/디코더',
    description: '데이터를 Base32 형식으로 변환하고 디코딩합니다.',
    category: '베이스 인코딩',
    icon: Key,
    color: '#2196F3',
  },
  {
    id: 'hex',
    name: 'Hex(Base16) 변환기',
    description: '데이터를 16진수로 변환하고 디코딩합니다.',
    category: '베이스 인코딩',
    icon: Hash,
    color: '#9C27B0',
  },
  {
    id: 'url',
    name: 'URL 인코더/디코더',
    description: 'URL 안전한 형식으로 문자열을 변환합니다.',
    category: 'URL/텍스트 처리',
    icon: Globe,
    color: '#FF9800',
  },
  {
    id: 'html',
    name: 'HTML 인코더/디코더',
    description: 'HTML 엔티티로 특수문자를 변환합니다.',
    category: 'URL/텍스트 처리',
    icon: FileText,
    color: '#F44336',
  },
  {
    id: 'unicode',
    name: 'Unicode 변환기',
    description: '유니코드 문자와 코드포인트 간 변환을 수행합니다.',
    category: 'URL/텍스트 처리',
    icon: Type,
    color: '#3F51B5',
  },
  {
    id: 'binary',
    name: '진수 변환기',
    description: '2진수, 8진수, 10진수, 16진수 간 변환을 수행합니다.',
    category: '진수 변환',
    icon: Binary,
    color: '#607D8B',
  },
];
</file>

<file path="app/data/security-tools.ts">
// app/data/security-tools.ts
import { Key } from 'lucide-react';
import type { Integration } from './types';

export const securityTools: Integration[] = [
    {
        id: 'rsa-key-generator',
        name: 'RSA 키 생성기',
        description: '공개키/비공개키 쌍을 생성합니다.',
        category: '보안/암호화',
        icon: Key,
        color: '#34495E',
    },
];
</file>

<file path="app/data/text-tools.ts">
// app/data/text-tools.ts
import { FileJson, GitCompare, Regex, FileText, Table } from 'lucide-react';
import type { Integration } from './types';

export const textTools: Integration[] = [
    {
        id: 'json-formatter',
        name: 'JSON 포매터/검증기',
        description: 'JSON 데이터를 정리하고 유효성을 검사합니다.',
        category: '텍스트 처리',
        icon: FileJson,
        color: '#FF6B6B',
    },
    {
        id: 'diff-checker',
        name: 'Diff 도구',
        description: '두 텍스트의 차이점을 비교하고 시각화합니다.',
        category: '텍스트 처리',
        icon: GitCompare,
        color: '#45B7D1',
    },
    {
        id: 'regex-tester',
        name: '정규표현식 테스터',
        description: '정규표현식을 실시간으로 테스트하고 매치 결과를 확인합니다.',
        category: '텍스트 처리',
        icon: Regex,
        color: '#96CEB4',
    },
    {
        id: 'markdown-editor',
        name: 'Markdown 에디터',
        description: '실시간 미리보기가 있는 마크다운 편집기입니다.',
        category: '텍스트 처리',
        icon: FileText,
        color: '#DDA0DD',
    },
    {
        id: 'csv-json-converter',
        name: 'CSV ↔️ JSON 변환기',
        description: 'CSV와 JSON 형식 간 데이터를 변환합니다.',
        category: '텍스트 처리',
        icon: Table,
        color: '#FFB6C1',
    },
];
</file>

<file path="app/data/types.ts">
import type { LucideIcon } from 'lucide-react';

// 두 파일에서 공통으로 사용하던 타입을 이 파일에 정의합니다.
export type Integration = {
  id: string;
  name: string;
  description: string;
  category: string;
  icon: LucideIcon;
  color: string;
};
</file>

<file path="app/globals.css">
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="app/(main)/encoding/base32/page.tsx">
'use client';

import dynamic from 'next/dynamic';

const ClientBase32Tool = dynamic(() => import('./ClientBase32Tool'), { ssr: false });

export default function Base32Page() {
    return <ClientBase32Tool />;
}
</file>

<file path="app/(main)/encoding/html/page.tsx">
'use client';

import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { useState } from 'react';

const htmlEntities: { [key: string]: string } = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '/': '&#x2F;',
    '`': '&#x60;',
    '=': '&#x3D;',
};

export default function HtmlTool() {
    const [input, setInput] = useState('');
    const [output, setOutput] = useState('');
    const [mode, setMode] = useState<'encode' | 'decode'>('encode');

    const handleEncode = () => {
        try {
            const encoded = input.replace(/[&<>"'`=\/]/g, (char) => htmlEntities[char]);
            setOutput(encoded);
        } catch {
            setOutput('인코딩 중 오류가 발생했습니다. 유효한 텍스트를 입력해주세요.');
        }
    };

    const handleDecode = () => {
        try {
            const textarea = document.createElement('textarea');
            textarea.innerHTML = input;
            const decoded = textarea.value;
            setOutput(decoded);
        } catch {
            setOutput('디코딩 중 오류가 발생했습니다. 유효한 HTML 엔티티를 입력해주세요.');
        }
    };

    const handleClear = () => {
        setInput('');
        setOutput('');
    };

    const handleCopy = () => {
        navigator.clipboard.writeText(output);
    };

    return (
        <div className="container mx-auto px-4 py-8">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <Card>
                    <CardContent className="p-6">
                        <div className="flex justify-between items-center mb-4">
                            <div className="space-x-2">
                                <Button
                                    variant={mode === 'encode' ? 'default' : 'outline'}
                                    onClick={() => setMode('encode')}
                                >
                                    인코딩
                                </Button>
                                <Button
                                    variant={mode === 'decode' ? 'default' : 'outline'}
                                    onClick={() => setMode('decode')}
                                >
                                    디코딩
                                </Button>
                            </div>
                            <Button variant="outline" onClick={handleClear}>
                                초기화
                            </Button>
                        </div>
                        <Textarea
                            placeholder={
                                mode === 'encode'
                                    ? 'HTML 인코딩할 텍스트를 입력하세요...'
                                    : 'HTML 디코딩할 문자열을 입력하세요...'
                            }
                            value={input}
                            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setInput(e.target.value)}
                            className="min-h-[200px] mb-4 font-mono"
                        />
                        <Button className="w-full" onClick={mode === 'encode' ? handleEncode : handleDecode}>
                            {mode === 'encode' ? '인코딩' : '디코딩'}
                        </Button>
                    </CardContent>
                </Card>

                <Card>
                    <CardContent className="p-6">
                        <div className="flex justify-between items-center mb-4">
                            <h2 className="text-lg font-semibold">결과</h2>
                            <Button variant="outline" onClick={handleCopy}>
                                복사
                            </Button>
                        </div>
                        <Textarea value={output} readOnly className="min-h-[200px] font-mono" />
                    </CardContent>
                </Card>
            </div>
        </div>
    );
}
</file>

<file path="app/(main)/integrations/components/CategoryFilter.tsx">
// app/(main)/integrations/components/CategoryFilter.tsx

'use client';

import type { Integration } from '@/app/data/types';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';
import { AnimatePresence, motion } from 'framer-motion';
import { ChevronDown, X } from 'lucide-react';
import { usePathname, useRouter } from 'next/navigation';
import { useState, useMemo, useCallback, useEffect } from 'react';

// --- 추가: 카테고리 이름을 URL 경로로 변환하는 헬퍼 함수 ---
const getPathForCategory = (category: string) => {
    switch (category) {
        case '텍스트 처리':
            return 'text';
        case '보안/암호화':
            return 'security';
        default:
            return 'encoding';
    }
};

type CategoryFilterProps = {
    groupedTools: {
        category: string;
        tools: Integration[];
    }[];
    isOpen: boolean;
    onClose: () => void;
};

export default function CategoryFilter({ groupedTools, isOpen, onClose }: CategoryFilterProps) {
    const router = useRouter();
    const pathname = usePathname();

    useEffect(() => {
        console.log('CategoryFilter mounted');
        return () => console.log('CategoryFilter unmounted');
    }, []);

    useEffect(() => {
        console.log('CategoryFilter isOpen changed:', isOpen);
    }, [isOpen]);

    const [openCategory, setOpenCategory] = useState<string | null>(() => {
        const currentTool = groupedTools.flatMap((g) => g.tools).find((t) => pathname.includes(`/${t.id}`));
        return currentTool?.category || null;
    });

    const handleLinkClick = useCallback(
        (tool: Integration) => {
            // --- 수정: 동적 경로 생성 ---
            const path = `/${getPathForCategory(tool.category)}/${tool.id}`;
            router.push(path);
            onClose();
        },
        [router, onClose, pathname]
    );

    const SidebarContent = useMemo(() => {
        const InnerSidebarContent = () => (
            <>
                <div className='flex justify-between items-center p-4 md:hidden'>
                    <h2 className='text-lg font-semibold'>Tools</h2>
                    <Button variant='ghost' size='icon' onClick={onClose}>
                        <X className='h-5 w-5' />
                    </Button>
                </div>
                <h2 className='text-lg font-semibold mb-2 px-4 pt-4 hidden md:block'>Tools</h2>
                <div className='flex-1 overflow-auto space-y-1 p-4 md:p-0 md:px-4'>
                    {groupedTools.map(({ category, tools }) => (
                        <div key={category}>
                            <Button
                                variant='ghost'
                                className='w-full justify-between text-sm font-semibold py-1 px-2 h-auto'
                                onClick={() => setOpenCategory((prev) => (prev === category ? null : category))}
                            >
                                {category}
                                <ChevronDown
                                    className={cn(
                                        'h-4 w-4 transition-transform',
                                        openCategory === category && 'rotate-180'
                                    )}
                                />
                            </Button>

                            <AnimatePresence>
                                {openCategory === category && (
                                    <motion.div
                                        key='content'
                                        initial={{ opacity: 0, height: 0 }}
                                        animate={{ opacity: 1, height: 'auto' }}
                                        exit={{ opacity: 0, height: 0 }}
                                        transition={{ duration: 0.3, ease: 'easeInOut' }}
                                        className='pl-4 mt-1 space-y-1 border-l-2 ml-3 overflow-hidden'
                                    >
                                        {tools.map((tool) => (
                                            <Button
                                                key={tool.id}
                                                variant='ghost'
                                                size='sm'
                                                className={cn(
                                                    'w-full justify-start font-normal text-muted-foreground hover:bg-accent',
                                                    pathname.endsWith(`/${tool.id}`) &&
                                                        'bg-primary text-primary-foreground font-semibold hover:bg-primary/90'
                                                )}
                                                // --- 수정: tool 객체 전체를 전달 ---
                                                onClick={() => handleLinkClick(tool)}
                                            >
                                                {tool.name}
                                            </Button>
                                        ))}
                                    </motion.div>
                                )}
                            </AnimatePresence>
                        </div>
                    ))}
                </div>
            </>
        );
        InnerSidebarContent.displayName = 'SidebarContent';
        return InnerSidebarContent;
    }, [onClose, groupedTools, openCategory, setOpenCategory, handleLinkClick, pathname]);

    return (
        <>
            <AnimatePresence>
                {isOpen && (
                    <motion.div
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                        className='fixed inset-0 bg-black/60 z-40 md:hidden'
                        onClick={onClose}
                    />
                )}
            </AnimatePresence>
            <AnimatePresence>
                {isOpen && (
                    <motion.aside
                        key='mobile-sidebar'
                        initial={{ x: '-100%' }}
                        animate={{ x: '0%' }}
                        exit={{ x: '-100%' }}
                        transition={{ type: 'spring', stiffness: 300, damping: 30 }}
                        className='fixed top-0 left-0 h-full w-64 bg-white shadow-lg flex flex-col z-50 md:hidden'
                    >
                        <SidebarContent />
                    </motion.aside>
                )}
            </AnimatePresence>

            <aside className='w-64 bg-white shadow-md flex-col h-screen hidden md:flex'>
                <SidebarContent />
            </aside>
        </>
    );
}
</file>

<file path="app/(main)/integrations/components/IntegrationCard.tsx">
'use client';

import type { Integration } from '../../../data/types';
import { Card, CardContent } from '@/components/ui/card';
import { Heart } from 'lucide-react';
import { cn } from '@/lib/utils';

type IntegrationCardProps = {
    integration: Integration;
    onSelect: (integration: Integration) => void;
    isFavorite: boolean;
    onToggleFavorite: (id: string) => void;
};

export default function IntegrationCard({ integration, onSelect, isFavorite, onToggleFavorite }: IntegrationCardProps) {
    const Icon = integration.icon;

    return (
        <Card
            className="hover:shadow-lg transition-all duration-300 group h-full cursor-pointer transform hover:-translate-y-1"
            onClick={() => onSelect(integration)}
        >
            <CardContent className="p-4 flex flex-col h-full relative">
                <button
                    className="absolute top-2 right-2 z-10 p-1.5 rounded-full bg-transparent transition-colors hover:bg-black/5 dark:hover:bg-white/10"
                    onClick={(e) => {
                        e.stopPropagation();
                        onToggleFavorite(integration.id);
                    }}
                >
                    <Heart
                        className={cn(
                            'w-5 h-5 transition-all duration-300',
                            isFavorite
                                ? 'fill-red-500 text-red-500'
                                : 'text-gray-300 group-hover:text-red-400 dark:text-gray-600 dark:group-hover:text-red-400'
                        )}
                    />
                </button>
                <div className="flex flex-col items-center text-center space-y-2 mb-2">
                    <div
                        className="w-12 h-12 rounded-full flex items-center justify-center transition-colors duration-300"
                        style={{ backgroundColor: `${integration.color}20` }}
                    >
                        <Icon
                            className="w-6 h-6 transition-transform duration-300 group-hover:scale-110"
                            style={{ color: integration.color }}
                        />
                    </div>
                    <h3 className="font-semibold text-sm">{integration.name}</h3>
                </div>
                <p className="text-xs text-gray-500 flex-grow overflow-hidden">
                    {integration.description.length > 150
                        ? `${integration.description.substring(0, 150)}...`
                        : integration.description}
                </p>
                <div className="mt-3 pt-2 border-t border-gray-100 flex justify-between items-center">
                    <span className="text-xs bg-gray-100 px-2 py-1 rounded-full">{integration.category}</span>
                    <span className="text-xs text-blue-500 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                        View details →
                    </span>
                </div>
            </CardContent>
        </Card>
    );
}
</file>

<file path="app/(main)/integrations/components/IntegrationModal.tsx">
'use client';

import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Heart, X } from 'lucide-react';
import type { Integration } from '../../../data/types';
import { cn } from '@/lib/utils';

type IntegrationModalProps = {
    integration: Integration | null;
    isOpen: boolean;
    onClose: () => void;
    isFavorite: boolean;
    onToggleFavorite: (id: string) => void;
    onLearnMore: (id: string) => void; // 추가
    onConnect: (id: string) => void; // 추가
};

export default function IntegrationModal({
    integration,
    isOpen,
    onClose,
    isFavorite,
    onToggleFavorite,
    onLearnMore,
    onConnect,
}: IntegrationModalProps) {
    if (!integration) return null;

    const Icon = integration.icon;

    return (
        <Dialog open={isOpen} onOpenChange={onClose}>
            <DialogContent className="sm:max-w-[500px] max-h-[90vh] overflow-y-auto">
                <DialogHeader>
                    <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                            <div
                                className="w-10 h-10 rounded-full flex items-center justify-center"
                                style={{ backgroundColor: `${integration.color}20` }}
                            >
                                <Icon className="w-5 h-5" style={{ color: integration.color }} />
                            </div>
                            <DialogTitle>{integration.name}</DialogTitle>
                        </div>
                        <div className="flex items-center gap-2">
                            <Button
                                variant="ghost"
                                size="icon"
                                onClick={(e) => {
                                    e.stopPropagation();
                                    onToggleFavorite(integration.id);
                                }}
                            >
                                <Heart
                                    className={cn(
                                        'w-5 h-5 transition-all',
                                        isFavorite ? 'fill-red-500 text-red-500' : 'text-gray-400 hover:text-red-500'
                                    )}
                                />
                            </Button>
                            <Button variant="ghost" size="icon" onClick={onClose}>
                                <X className="w-5 h-5" />
                            </Button>
                        </div>
                    </div>
                    <DialogDescription>
                        <span className="inline-block bg-gray-100 text-xs px-2 py-1 rounded-full mt-2">
                            {integration.category}
                        </span>
                    </DialogDescription>
                </DialogHeader>

                <div className="space-y-4 mt-4">
                    <p className="text-sm text-gray-700">{integration.description}</p>

                    <div className="space-y-2">
                        <h4 className="text-sm font-medium">Key Features</h4>
                        <ul className="list-disc list-inside text-sm text-gray-700 space-y-1">
                            <li>Seamless integration with your existing workflow</li>
                            <li>Advanced analytics and reporting capabilities</li>
                            <li>Real-time data synchronization</li>
                            <li>Customizable dashboard and notifications</li>
                        </ul>
                    </div>

                    <div className="pt-4 flex justify-end gap-3">
                        <Button variant="outline" onClick={() => onLearnMore(integration.id)}>
                            Learn More
                        </Button>
                        <Button onClick={() => onConnect(integration.id)}>Connect Integration</Button>
                    </div>
                </div>
            </DialogContent>
        </Dialog>
    );
}
</file>

<file path="app/(main)/layout.tsx">
'use client';

import { groupedTools } from '../data/integrations';
import CategoryFilter from './integrations/components/CategoryFilter';
import { Button } from '@/components/ui/button';
import { Menu } from 'lucide-react';
import { SidebarProvider, useSidebar } from '@/lib/context/SidebarContext';
import { useCallback } from 'react';

export default function MainLayout({ children }: { children: React.ReactNode }) {
    return (
        <SidebarProvider>
            <LayoutContent>{children}</LayoutContent>
        </SidebarProvider>
    );
}

function LayoutContent({ children }: { children: React.ReactNode }) {
    const { isSidebarOpen, setSidebarOpen } = useSidebar();

    const handleCloseSidebar = useCallback(() => {
        setSidebarOpen(false);
    }, [setSidebarOpen]);

    return (
        <div className='flex h-screen bg-gray-100 overflow-hidden'>
            {/* CategoryFilter에 isOpen과 onClose props를 전달합니다.
              - isOpen: 사이드바가 열려있는지 여부
              - onClose: 사이드바를 닫는 함수
            */}
            <CategoryFilter groupedTools={groupedTools} isOpen={isSidebarOpen} onClose={handleCloseSidebar} />

            <main className='flex-1 flex flex-col overflow-y-auto'>
                {/* 모바일 화면에서만 보이는 헤더와 메뉴 버튼 */}
                <header className='p-4 md:p-6 md:pb-0 flex items-center gap-4 md:hidden'>
                    <Button
                        variant='outline'
                        size='icon'
                        className='md:hidden'
                        onClick={() => setSidebarOpen(true)} // 버튼 클릭 시 사이드바 열기
                    >
                        <Menu className='h-5 w-5' />
                    </Button>
                    <h1 className='text-lg font-bold'>Tools</h1>
                </header>
                {children}
            </main>
        </div>
    );
}
</file>

<file path="README.md">
# AI-Project - 개발 도구 허브

<div align="center">
  <img src="https://img.shields.io/badge/Next.js-15.3.3-black?style=for-the-badge&logo=next.js" alt="Next.js">
  <img src="https://img.shields.io/badge/React-19.0.0-blue?style=for-the-badge&logo=react" alt="React">
  <img src="https://img.shields.io/badge/TypeScript-5.0-blue?style=for-the-badge&logo=typescript" alt="TypeScript">
  <img src="https://img.shields.io/badge/Tailwind_CSS-4.0-38B2AC?style=for-the-badge&logo=tailwind-css" alt="Tailwind CSS">
</div>

## 📌 프로젝트 소개

AI-Project는 개발자와 일반 사용자 모두에게 유용한 다양한 개발 도구들을 한곳에 모아 제공하는 웹 플랫폼입니다. 인코딩/디코딩, 텍스트 처리, 보안 관련 도구 등 개발 과정에서 자주 사용되는 기능들을 직관적인 UI로 제공하며, PC와 모바일 환경 모두에서 최적화된 사용 경험을 제공합니다.

### ✨ 주요 기능

-   **🔧 다양한 개발 도구**: 인코딩/디코딩, 텍스트 변환, 보안/암호화 등 다양한 카테고리의 도구 제공
-   **🔤 인코딩/디코딩**: Base64, Base32, Hex, URL, HTML, Unicode 등 다채로운 형식의 변환 지원
-   **🔢 진수 변환기**: 2진수, 8진수, 10진수, 16진수 간 편리한 변환
-   **📁 파일 처리**: 특정 도구에서 파일 업로드/다운로드 지원
-   **🔍 검색 및 필터링**: 필요한 도구를 빠르게 찾을 수 있는 검색 및 카테고리별 필터링 기능
-   **⭐ 즐겨찾기**: 자주 사용하는 도구를 즐겨찾기에 추가하여 손쉽게 접근
-   **📱 반응형 디자인**: PC, 태블릿, 모바일 등 모든 기기에서 최적화된 레이아웃과 사용자 경험 제공

## 🚀 시작하기

### 필수 요구사항

-   Node.js 18.0.0 이상
-   npm 또는 yarn 패키지 매니저

### 설치 및 실행

1. **저장소 클론**

```bash
git clone https://github.com/your-username/ai-project.git
cd ai-project
```

2. **의존성 설치**

```bash
npm install
# 또는
yarn install
```

3. **개발 서버 실행**

```bash
npm run dev
# 또는
yarn dev
```

4. **브라우저에서 확인**

```
http://localhost:3000
```

### 프로덕션 빌드

```bash
# 빌드
npm run build

# 프로덕션 실행
npm run start
```

## 📁 프로젝트 구조

```
ai-project/
├── app/                      # Next.js App Router
│   ├── (main)/              # 라우트 그룹
│   │   ├── encoding/        # 인코딩 도구 페이지들
│   │   │   ├── base64/      # Base64 인코더/디코더
│   │   │   ├── base32/      # Base32 인코더/디코더
│   │   │   ├── hex/         # Hex 변환기
│   │   │   ├── url/         # URL 인코더/디코더
│   │   │   ├── html/        # HTML 인코더/디코더
│   │   │   ├── unicode/     # Unicode 변환기
│   │   │   └── binary/      # 진수 변환기
│   │   └── integrations/    # 통합 컴포넌트
│   ├── data/                # 데이터 정의 파일
│   │   ├── encoding-tools.ts
│   │   ├── integrations.ts
│   │   └── types.ts
│   ├── layout.tsx           # 루트 레이아웃
│   ├── page.tsx            # 홈페이지
│   └── globals.css         # 전역 스타일
├── components/              # 재사용 가능한 컴포넌트
│   └── ui/                 # shadcn/ui 컴포넌트
├── hooks/                   # 커스텀 React 훅
│   └── useEncoding.ts      # 인코딩/디코딩 로직 훅
├── lib/                     # 유틸리티 함수
├── public/                  # 정적 파일
└── package.json            # 프로젝트 설정
```

## 🛠 기술 스택

### 프론트엔드

-   **[Next.js](https://nextjs.org/)** (v15.3.3) - React 프레임워크
-   **[React](https://react.dev/)** (v19.0.0) - UI 라이브러리
-   **[TypeScript](https://www.typescriptlang.org/)** (v5) - 타입 안정성
-   **[Tailwind CSS](https://tailwindcss.com/)** (v4) - 유틸리티 우선 CSS

### UI 컴포넌트

-   **[Radix UI](https://www.radix-ui.com/)** - 접근성 높은 UI 컴포넌트
-   **[shadcn/ui](https://ui.shadcn.com/)** - 재사용 가능한 컴포넌트
-   **[Framer Motion](https://www.framer.com/motion/)** - 애니메이션 라이브러리
-   **[Lucide React](https://lucide.dev/)** - 아이콘 라이브러리

## 🎨 주요 컴포넌트

### 페이지 컴포넌트

-   `page.tsx` - 메인 홈페이지
-   `encoding/[tool]/page.tsx` - 각 인코딩 도구 페이지

### UI 컴포넌트

-   `IntegrationGrid` - 도구 그리드 레이아웃
-   `IntegrationCard` - 개별 도구 카드
-   `SearchBar` - 검색 바
-   `CategoryFilter` - 카테고리 필터
-   `Pagination` - 페이지네이션

### 커스텀 훅

-   `useEncoding` - 인코딩/디코딩 로직을 관리하는 재사용 가능한 훅

## 📝 사용 예시

### Base64 인코딩

```typescript
import { useEncoding } from '@/hooks/useEncoding';

const { input, output, handleEncode } = useEncoding({
    encodeFn: (text) => btoa(text),
    decodeFn: (base64) => atob(base64),
});
```

### 새로운 도구 추가

1. `app/data/` 디렉토리에 해당 도구의 데이터 정의 파일 추가 (예: `text-tools.ts`, `security-tools.ts`)
2. `app/(main)/` 디렉토리에 해당 도구 카테고리 폴더 생성 (예: `text/`, `security/`)
3. 생성된 카테고리 폴더 안에 `[tool-name]/page.tsx` 페이지 생성 및 도구 로직 구현
4. `app/data/integrations.ts` 파일에 새로 추가된 도구를 포함하여 통합

## 🤝 기여하기

프로젝트에 기여하고 싶으시다면:

1. 이 저장소를 Fork 하세요
2. 새로운 기능 브랜치를 생성하세요 (`git checkout -b feature/amazing-feature`)
3. 변경사항을 커밋하세요 (`git commit -m 'Add some amazing feature'`)
4. 브랜치에 Push 하세요 (`git push origin feature/amazing-feature`)
5. Pull Request를 생성하세요

## 📄 라이선스

이 프로젝트는 MIT 라이선스 하에 배포됩니다. 자세한 내용은 [LICENSE](LICENSE) 파일을 참조하세요.

## 🔮 향후 계획

-   [x] PWA(Progressive Web App) 지원
-   [ ] 다크 모드 지원
-   [ ] 국제화(i18n) 지원
-   [ ] API 엔드포인트 추가
-   [ ] 더 많은 인코딩 도구 추가
-   [ ] 단위 테스트 및 E2E 테스트 추가

## 📢 최근 업데이트

이 프로젝트는 Next.js SSR(서버 사이드 렌더링) 환경에서 클라이언트 전용 API (예: `navigator.clipboard`, `TextEncoder`, `TextDecoder`) 및 `framer-motion` 라이브러리 사용으로 인해 빌드 시 다양한 오류와 경고가 발생했습니다. 이러한 문제들을 해결하기 위해 다음과 같은 개선 사항을 적용했습니다:

-   **클라이언트 전용 로직 분리**: 빌드 프로세스 중 서버 환경에서 실행될 수 없는 코드를 `"use client"` 지시자와 `next/dynamic`의 `ssr: false` 옵션을 사용하여 클라이언트 컴포넌트로 분리했습니다. 이를 통해 브라우저 전용 API 호출이 클라이언트 측에서만 이루어지도록 보장했습니다.
-   **Next.js 설정 최적화**: `next.config.ts` 파일에서 `protocol` 및 `output` 속성의 타입 오류를 명시적인 `as const` 타입 지정을 통해 해결했습니다. 또한, 더 이상 필요하지 않거나 인식되지 않는 `serverComponentsExternalPackages` 옵션을 제거하여 빌드 경고를 해소했습니다.
-   **종속성 관리**: `framer-motion`의 누락된 종속성인 `@emotion/is-prop-valid`를 설치하여 빌드 경고를 해결했습니다.
-   **사이드바 메뉴 정돈**: 실제 페이지와 연결되지 않은 사이드바 메뉴 항목들을 제거하여 사용자 경험을 개선했습니다.

이러한 노력으로 현재 프로젝트는 모든 빌드 오류와 경고 없이 성공적으로 빌드됩니다.

## 📞 문의

프로젝트에 대한 문의사항이 있으시면 이슈를 생성해주세요.

---

<div align="center">
  Made with ❤️ using Next.js and TypeScript
</div>
</file>

<file path="app/(main)/encoding/base64/page.tsx">
'use client';

import dynamic from 'next/dynamic';

// 클라이언트 컴포넌트를 동적으로 로드하고 SSR을 비활성화합니다.
const DynamicClientBase64Tool = dynamic(() => import('./ClientBase64Tool'), {
    ssr: false, // 서버 측 렌더링 비활성화
});

export default function Base64Tool() {
    return <DynamicClientBase64Tool />;
}
</file>

<file path="app/(main)/encoding/binary/page.tsx">
'use client';

import dynamic from 'next/dynamic';

const ClientBinaryTool = dynamic(() => import('./ClientBinaryTool'), { ssr: false });

export default function BinaryPage() {
    return <ClientBinaryTool />;
}
</file>

<file path="app/(main)/encoding/hex/page.tsx">
'use client';

import dynamic from 'next/dynamic';

const DynamicClientHexTool = dynamic(() => import('./ClientHexTool'), {
    ssr: false, // 서버 측 렌더링 비활성화
});

export default function HexTool() {
    return <DynamicClientHexTool />;
}
</file>

<file path="app/(main)/encoding/unicode/page.tsx">
'use client';

import dynamic from 'next/dynamic';

// 클라이언트 컴포넌트를 동적으로 로드하고 SSR을 비활성화합니다.
const DynamicClientUnicodeTool = dynamic(() => import('./ClientUnicodeTool'), {
    ssr: false, // 서버 측 렌더링 비활성화
});

export default function UnicodeTool() {
    return <DynamicClientUnicodeTool />;
}
</file>

<file path="app/(main)/integrations/page.tsx">
// app/(main)/integrations/page.tsx

'use client';

import { motion } from 'framer-motion';
import { useRouter, useSearchParams } from 'next/navigation';
import { useMemo, useState, useEffect } from 'react';
import type { Integration } from '../../data/types';
import { allTools } from '../../data/integrations';
import IntegrationGrid from './components/IntegrationGrid';
import SearchBar from './components/SearchBar';
import SortOptions from './components/SortOptions'; // --- 추가된 부분 ---

// 카테고리 이름을 URL 경로로 변환하는 헬퍼 함수
const getPathForCategory = (category: string) => {
    switch (category) {
        case '텍스트 처리':
            return 'text';
        case '보안/암호화':
            return 'security';
        default:
            return 'encoding';
    }
};

const sortOptions = [
    { value: 'name-asc', label: 'Name (A-Z)' },
    { value: 'name-desc', label: 'Name (Z-A)' },
    { value: 'category', label: 'Category' },
];

export default function IntegrationsPage() {
    const router = useRouter();
    const searchParams = useSearchParams();

    const selectedCategory = searchParams.get('category') || 'All';

    const [searchQuery, setSearchQuery] = useState('');
    const [sortOption, setSortOption] = useState('name-asc');
    const [favorites, setFavorites] = useState<string[]>([]);

    useEffect(() => {
        const savedFavorites = localStorage.getItem('favoriteIntegrations');
        if (savedFavorites) {
            setFavorites(JSON.parse(savedFavorites));
        }
    }, []);

    useEffect(() => {
        localStorage.setItem('favoriteIntegrations', JSON.stringify(favorites));
    }, [favorites]);

    const handleToggleFavorite = (id: string) => {
        setFavorites((prev) => (prev.includes(id) ? prev.filter((favId) => favId !== id) : [...prev, id]));
    };

    const sortedAndFilteredTools = useMemo(() => {
        const filtered = allTools.filter((tool) => {
            const categoryMatch = selectedCategory === 'All' || tool.category === selectedCategory;
            const searchMatch =
                tool.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                tool.description.toLowerCase().includes(searchQuery.toLowerCase());
            return categoryMatch && searchMatch;
        });

        return filtered.sort((a, b) => {
            switch (sortOption) {
                case 'name-asc':
                    return a.name.localeCompare(b.name);
                case 'name-desc':
                    return b.name.localeCompare(a.name);
                case 'category':
                    return a.category.localeCompare(b.category);
                default:
                    return 0;
            }
        });
    }, [selectedCategory, searchQuery, sortOption]);

    const handleSelectTool = (tool: Integration) => {
        const path = `/${getPathForCategory(tool.category)}/${tool.id}`;
        router.push(path);
    };

    return (
        <div className="p-4 md:p-6 space-y-4">
            <motion.h1
                className="text-2xl font-bold"
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
            >
                Developer Tools
            </motion.h1>

            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                <SearchBar onSearch={setSearchQuery} />
                <div className="flex items-center gap-4">
                    <SortOptions options={sortOptions} selectedOption={sortOption} onSelectOption={setSortOption} />
                </div>
            </div>

            <div className="flex-1 overflow-auto mt-4">
                <IntegrationGrid
                    integrations={sortedAndFilteredTools}
                    onSelectIntegration={handleSelectTool}
                    favorites={favorites}
                    onToggleFavorite={handleToggleFavorite}
                />
            </div>
        </div>
    );
}
</file>

<file path="app/layout.tsx">
'use client';

// import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import React, { useState, useCallback } from 'react';
import './globals.css';
import CommandPalette from '@/components/command-palette/CommandPalette';

const inter = Inter({ subsets: ['latin'] });

// export const metadata: Metadata = {
//     title: 'DevTools Hub',
//     description: 'A collection of developer tools.',
// };

export default function RootLayout({ children }: { children: React.ReactNode }) {
    const [isCommandPaletteOpen, setIsCommandPaletteOpen] = useState(false);

    const toggleCommandPalette = useCallback(() => {
        setIsCommandPaletteOpen((prev) => !prev);
    }, []);

    // Add global keyboard shortcut listener
    React.useEffect(() => {
        const handleKeyDown = (event: KeyboardEvent) => {
            if ((event.metaKey || event.ctrlKey) && event.key === 'k') {
                event.preventDefault();
                toggleCommandPalette();
            }
        };
        document.addEventListener('keydown', handleKeyDown);
        return () => {
            document.removeEventListener('keydown', handleKeyDown);
        };
    }, [toggleCommandPalette]);

    return (
        <html lang='en'>
            <body className={inter.className}>
                {children}
                <CommandPalette
                    isOpen={isCommandPaletteOpen}
                    onClose={() => setIsCommandPaletteOpen(false)}
                    togglePalette={toggleCommandPalette}
                />
            </body>
        </html>
    );
}
</file>

<file path="hooks/useEncoding.ts">
import { useCallback, useState } from 'react';

// 훅에 전달할 함수의 타입 정의
type EncodeFn = (input: string) => string;
type DecodeFn = (input: string) => string;

interface UseEncodingParams {
    initialMode?: 'encode' | 'decode';
    encodeFn: EncodeFn;
    decodeFn: DecodeFn;
    defaultInput?: string;
    defaultOutput?: string;
}

export const useEncoding = ({
    initialMode = 'encode',
    encodeFn,
    decodeFn,
    defaultInput = '',
    defaultOutput = '결과가 여기에 표시됩니다.',
}: UseEncodingParams) => {
    const [input, setInput] = useState(defaultInput);
    const [output, setOutput] = useState(defaultOutput);
    const [mode, setMode] = useState<'encode' | 'decode'>(initialMode);

    const handleEncode = useCallback(() => {
        try {
            setOutput(encodeFn(input));
        } catch {
            setOutput('인코딩 중 오류가 발생했습니다. 유효한 텍스트를 입력해주세요.');
        }
    }, [input, encodeFn]);

    const handleDecode = useCallback(() => {
        try {
            setOutput(decodeFn(input));
        } catch {
            setOutput('디코딩 중 오류가 발생했습니다. 유효한 문자열을 입력해주세요.');
        }
    }, [input, decodeFn]);

    const handleClear = useCallback(() => {
        setInput('');
        setOutput('결과가 여기에 표시됩니다.');
    }, []);

    const handleCopy = useCallback(() => {
        if (typeof window === 'undefined') {
            // 브라우저 환경이 아님
            return;
        }

        const nav = window.navigator;
        if (!nav || !nav.clipboard) {
            console.warn('클립보드 API를 사용할 수 없습니다. 복사할 수 없습니다.');
            return;
        }

        if (output && output !== '결과가 여기에 표시됩니다.') {
            if (typeof nav.clipboard.writeText === 'function') {
                nav.clipboard.writeText(output);
            } else {
                console.warn('클립보드 API의 writeText 함수를 사용할 수 없습니다.');
            }
        }
    }, [output]);

    const swapInputOutput = useCallback(() => {
        const temp = input;
        setInput(output === defaultOutput ? '' : output);
        setOutput(temp === '' ? defaultOutput : temp);
    }, [input, output, defaultOutput]);

    return {
        input,
        setInput,
        output,
        setOutput,
        mode,
        setMode, // 이제 순수 상태 변경 함수를 반환
        handleEncode,
        handleDecode,
        handleClear,
        handleCopy,
        swapInputOutput, // 새로 추가된 함수
    };
};
</file>

<file path="next.config.ts">
// 파일: next.config.ts

// import type { NextConfig } from 'next';
import withPWA from 'next-pwa';

const withPWAConfig = withPWA({
    dest: 'public',
    register: true,
    skipWaiting: true,
    disable: process.env.NODE_ENV === 'development',
});

const nextConfig = {
    output: 'standalone' as const,
    images: {
        remotePatterns: [
            {
                protocol: 'https' as const,
                hostname: 'raw.githubusercontent.com',
                port: '',
                pathname: '/walkxcode/devtool-ui/main/public/assets/**', // githubusercontent.com에 있는 이미지를 허용하도록 패턴을 추가
            },
        ],
    },
    transpilePackages: ['lucide-react', 'vaul'], // 예시: 특정 패키지 트랜스파일링
    // async redirects() { // 삭제 시작
    //   return [
    //     {
    //       source: '/',
    //       destination: '/integrations',
    //       permanent: true,
    //     },
    //   ];
    // }, // 삭제 끝
    /* config options here */
};

export default withPWAConfig(nextConfig);
</file>

<file path="app/(main)/encoding/url/page.tsx">
'use client';

import dynamic from 'next/dynamic';

const DynamicClientUrlTool = dynamic(() => import('./ClientUrlTool'), {
    ssr: false, // 서버 측 렌더링 비활성화
    loading: () => <p>로딩 중...</p>, // 로딩 컴포넌트 추가
});

export default function UrlTool() {
    return <DynamicClientUrlTool />;
}
</file>

<file path="package.json">
{
  "name": "ai-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@emotion/is-prop-valid": "^1.3.1",
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-tabs": "^1.1.12",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "dayjs": "^1.11.13",
    "framer-motion": "^12.15.0",
    "jsdiff": "^1.1.1",
    "lucide-react": "^0.511.0",
    "marked": "^15.0.12",
    "next": "15.3.3",
    "next-pwa": "^5.6.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "rfc4648": "^1.5.4",
    "tailwind-merge": "^3.3.0",
    "tailwindcss-animate": "^1.0.7",
    "zustand": "^5.0.5"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/diff": "^7.0.2",
    "@types/marked": "^5.0.2",
    "@types/next-pwa": "^5.6.9",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.3.3",
    "tailwindcss": "^4",
    "tw-animate-css": "^1.3.2",
    "typescript": "^5"
  }
}
</file>

<file path="app/page.tsx">
'use client';

import dynamic from 'next/dynamic';

const HomePageClient = dynamic(() => import('./HomePageClient'), { ssr: false });

export default function Home() {
    return <HomePageClient />;
}
</file>

<file path="app/data/integrations.ts">
import { encodingTools } from './encoding-tools';
import { textTools } from './text-tools';
import { securityTools } from './security-tools';
import { conversionTools } from './conversion-tools';
import type { Integration } from './types';

// 모든 도구들을 합칩니다.
export const allTools: Integration[] = [...encodingTools, ...textTools, ...securityTools, ...conversionTools];

// 모든 도구들을 카테고리별로 그룹화합니다.
export const groupedTools = allTools.reduce((acc, tool) => {
    // 현재 도구의 카테고리를 찾습니다.
    let group = acc.find((g) => g.category === tool.category);

    // 그룹이 없으면 새로 생성합니다.
    if (!group) {
        group = { category: tool.category, tools: [] };
        acc.push(group);
    }

    // 현재 그룹에 도구를 추가합니다.
    group.tools.push(tool);

    return acc;
}, [] as { category: string; tools: Integration[] }[]);

// 모든 카테고리 목록을 생성합니다.
export const allCategories: string[] = ['All', ...groupedTools.map((g) => g.category)];
</file>

</files>
